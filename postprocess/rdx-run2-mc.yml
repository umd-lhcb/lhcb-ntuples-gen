headers:
    system:
        - TLorentzVector.h
    user:
        - functor/flag.h
        - functor/kinematic.h
        - functor/pid.h

keep:
    # Event uid, also needed for keeping only one B for multi-B events
    - runNumber
    - eventNumber
    - GpsTime

rename:
    # For pseudo-random sequence generation
    b0_PT: b0_pt
    # Isolation variables
    b0_ISOLATION_BDT: iso_bdt
    # Triggers
    b0_L0Global_TIS: b0_l0glob_tis
    dst_L0HadronDecision_TOS: dst_l0had_dec_tos
    mu_L0Global_TIS: mu_l0glob_tis
    # B0
    b0_M: b0_m
    b0_BKGCAT: b_bkg_cat
    # Dst mother
    dst_MC_MOTHER_ID: dst_mom_id
    dst_MC_MOTHER_TRUEPX: dst_mc_mom_px
    dst_MC_MOTHER_TRUEPY: dst_mc_mom_py
    dst_MC_MOTHER_TRUEPZ: dst_mc_mom_pz
    dst_MC_MOTHER_TRUEPE: dst_mc_mom_pe
    # Dst
    dst_PX: dst_px
    dst_PY: dst_py
    dst_PZ: dst_pz
    dst_PE: dst_pe
    dst_BKGCAT: dst_bkg_cat
    # D0
    d0_ID: d0_id
    d0_BKGCAT: d0_bkg_cat
    # Pi
    pi_ID: pi_id
    # Mu
    mu_ID: mu_id
    mu_isMuon: mu_is_mu
    mu_PIDmu: mu_pid_mu

calculation:
    # Temp variables for calculating MC flags
    mu_true_id: "^auto; mu_TRUEID"
    mu_mc_mom_key: "^auto; mu_MC_MOTHER_KEY"
    mu_mc_mom_id: "^auto; mu_MC_MOTHER_ID"
    mu_mc_gd_mom_key: "^auto; mu_MC_GD_MOTHER_KEY"
    mu_mc_gd_mom_id: "^auto; mu_MC_GD_GD_MOTHER_ID"
    mu_mc_gd_gd_mom_key: "^auto; mu_MC_GD_GD_MOTHER_KEY"
    mu_mc_gd_gd_mom_id: "^auto; mu_MC_GD_GD_MOTHER_ID"
    d0_mc_mom_key: "^auto; d0_MC_MOTHER_KEY"
    dst_mc_mom_key: "^auto; dst_MC_MOTHER_KEY"
    dst_mc_mom_id: "^auto; dst_MC_MOTHER_ID"
    dst_mc_gd_mom_key: "^auto; dst_MC_GD_MOTHER_KEY"
    dst_mc_gd_mom_id: "^auto; dst_MC_GD_MOTHER_ID"
    dst_mc_gd_gd_mom_key: "^auto; dst_MC_GD_GD_MOTHER_KEY"
    dst_mc_gd_gd_mom_id: "^auto; dst_MC_GD_GD_MOTHER_ID"
    # Temp variables
    v_dst_mom_p: "^auto; TLorentzVector(dst_mc_mom_px, dst_mc_mom_py, dst_mc_mom_pz, dst_mc_mom_pe)"
    v_dst_p: "^auto; TLorentzVector(dst_px, dst_py, dst_pz, dst_pe)"
    v_mc_flags: "^auto; MC_FLAGS(mu_mc_mom_key, d0_mc_mom_key, dst_mc_mom_key, mu_mc_gd_mom_key, dst_mc_gd_mom_key, mu_mc_gd_gd_mom_key, dst_mc_gd_gd_mom_key)"
    # PID
    mu_pid: "Bool_t; MU_PID(mu_is_mu, mu_pid_mu)"
    dst_id_prod: "Double_t; d0_id*pi_id"   # negative when physical
    id_prod: "Double_t; d0_id*mu_id"       # positive when physical
    # Physical variables
    mm_dst_mom: "Double_t; MM_DST_MOM(v_dst_mom_p, v_dst_p)"  # Missing mass between Dst and its mother
    # Flags
    flag_tau: "Bool_t; FLAG_TAU(v_mc_flags, mu_true_id, mu_mc_mom_id, mu_mc_gd_mom_id)"
    flag_mu: "Bool_t; FLAG_MU(v_mc_flags, mu_true_id, mu_mc_mom_id)"
    flag_two_d_tau: "Bool_t; FLAG_TWO_D_TAU(mu_mc_mom_id, mu_mc_gd_mom_id)"
    flag_two_d_mu: "Bool_t; FLAG_TWO_D_MU(v_mc_flags, mu_mc_mom_id, mu_mc_gd_gd_mom_id, dst_mc_mom_id)"
    flag_d0_mu: "Bool_t; FLAG_D0_MU(v_mc_flags, mu_true_id)"
    # flag_dst_sb: <-- Dst side band flag. Obsolete.
    # Other flags
    is_data: "Bool_t; IS_DATA(GpsTime)"
    # is_2pi: (ishigher) Need: flagBmu, justDst, DstOk
    just_dst: "Bool_t; JUST_DST(v_mc_flags, mu_mc_mom_id, dst_mc_mom_id)"
    dst_ok: "Bool_t; DST_OK(d0_bkg_cat, dst_bkg_cat)"
    # Types
    b_type: 'Int_t; B_TYPE(v_mc_flags, flag_d0_mu, mu_true_id, mu_mc_mom_id, mu_mc_gd_mom_id, dst_mc_mom_id, dst_mc_gd_mom_id, dst_mc_gd_gd_mom_id)'
    # dss_type: (Dststtype), HARD, on hold. Need: (flagD0mu)

output:
    b0dst:
        input: TupleB0/DecayTree
        selection:
            - "mu_pid"
            - "iso_bdt < 0.15"
            #- "is_data"  # Well, this doesn't apply to MC
            - "b0_m < 5280"
            # L0 cuts
            - "b0_l0glob_tis || dst_l0had_dec_tos"
            - "mu_l0glob_tis"
