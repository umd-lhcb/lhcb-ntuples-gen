headers:
    user:
        - functor/rdx/cut.h
        - functor/rdx/kinematic.h
        - functor/basic.h

keep:
    - runNumber
    - eventNumber
    - GpsTime

rename:
    runNumber: run
    eventNumber: event
    # L0
    b0_L0Global_TIS: b0_l0_global_tis
    b_L0Global_TIS: b_l0_global_tis
    d0_L0HadronDecision_TOS: d0_l0_hadron_tos
    mu_L0Global_TIS: mu_l0_global_tis
    # HLT1
    k_Hlt1TrackAllL0Decision_TOS: k_hlt1_trackalll0_tos
    pi_Hlt1TrackAllL0Decision_TOS: pi_htl1_trackalll0_tos
    # HLT2
    d0_Hlt2CharmHadD02HH_D02KPiDecision_TOS: d0_hlt2_tos

calculation:
    # For pseudo-random sequence generation
    prs_in: double; b0_PT; b_PT

    #######################
    # Isolation variables #
    #######################
    # Isolation BDTs
    iso_bdt1: double; b0_ISOLATION_BDT;  b_ISOLATION_BDT
    iso_bdt2: double; b0_ISOLATION_BDT2; b_ISOLATION_BDT2
    iso_bdt3: double; b0_ISOLATION_BDT3; b_ISOLATION_BDT3
    # PID
    iso_nnk1: float; b0_ISOLATION_NNk; b_ISOLATION_NNk
    iso_nnk2: float; b0_ISOLATION_NNk2; b_ISOLATION_NNk2
    iso_nnk3: float; b0_ISOLATION_NNk3; b_ISOLATION_NNk3
    # Charge
    iso_chrg1: int; b0_ISOLATION_CHARGE;  b_ISOLATION_CHARGE
    iso_chrg2: int; b0_ISOLATION_CHARGE2; b_ISOLATION_CHARGE2
    # Kinematic
    iso_p1: float; GEV(MAG(b0_ISOLATION_PX, b0_ISOLATION_PY, b0_ISOLATION_PZ)); GEV(MAG(b_ISOLATION_PX, b_ISOLATION_PY, b_ISOLATION_PZ))
    iso_p2: float; GEV(MAG(b0_ISOLATION_PX2, b0_ISOLATION_PY2, b0_ISOLATION_PZ2)); GEV(MAG(b_ISOLATION_PX2, b_ISOLATION_PY2, b_ISOLATION_PZ2))
    iso_p3: float; GEV(MAG(b0_ISOLATION_PX3, b0_ISOLATION_PY3, b0_ISOLATION_PZ3)); GEV(MAG(b_ISOLATION_PX3, b_ISOLATION_PY3, b_ISOLATION_PZ3))
    iso_pt1: float; GEV(MAG(b0_ISOLATION_PX, b0_ISOLATION_PY)); GEV(MAG(b_ISOLATION_PX, b_ISOLATION_PY))
    iso_pt2: float; GEV(MAG(b0_ISOLATION_PX2, b0_ISOLATION_PY2)); GEV(MAG(b_ISOLATION_PX2, b_ISOLATION_PY2))
    iso_pt3: float; GEV(MAG(b0_ISOLATION_PX3, b0_ISOLATION_PY3)); GEV(MAG(b_ISOLATION_PX3, b_ISOLATION_PY3))
    # Track types
    iso_type1: int; b0_ISOLATION_Type; b_ISOLATION_Type
    iso_type2: int; b0_ISOLATION_Type2; b_ISOLATION_Type2
    iso_type3: int; b0_ISOLATION_Type3; b_ISOLATION_Type3

    #################
    # Fit variables #
    #################
    el: double; GEV(FitVar_El)
    mm2: double; GEV2(FitVar_Mmiss2)
    q2: double; GEV2(FitVar_q2)

    #######################
    # Kinematic variables #
    #######################
    # B0
    b0_m: double; GEV(b0_M)
    b0_p: double; GEV(b0_P)
    b0_pt: double; GEV(b0_PT)
    # B
    b_m: double; GEV(b_M)
    b_p: double; GEV(b_P)
    b_pt: double; GEV(b_PT)
    # D*
    dst_m: double; GEV(dst_M)
    dst_p: double; GEV(dst_P)
    dst_pt: double; GEV(dst_PT)
    dst_iso_invm: double; GEV(MINV(b0_ISOLATION_PX, b0_ISOLATION_PY, b0_ISOLATION_PZ, b0_ISOLATION_PE, dst_PX, dst_PY, dst_PZ, dst_PE))
    dst_iso_deltam: double; GEV(ISO_DELTAM(b0_ISOLATION_PX, b0_ISOLATION_PY, b0_ISOLATION_PZ, b0_ISOLATION_PE, dst_PX, dst_PY, dst_PZ, dst_PE, dst_M))
    dst_veto_deltam: double; MIN(ABS(b_ISOLATION_DstWindowDELTAM-145.454), ABS(b_ISOLATION_DstWindowDELTAM2-145.454)); ABS(dst_M-d0_M-145.454); 100.0  # MeV!
    # D0
    d0_m: double; GEV(d0_M)
    d0_p: double; GEV(d0_P)
    d0_pt: double; GEV(d0_PT)
    # K
    k_p: double; GEV(k_P)
    k_pt: double; GEV(k_PT)
    # Pi
    pi_p: double; GEV(pi_P)
    pi_pt: double; GEV(pi_PT)
    # slow Pi
    spi_p: double; GEV(spi_P)
    spi_pt: double; GEV(spi_PT)
    # Mu
    mu_p: double; GEV(mu_P)
    mu_pt: double; GEV(mu_PT)

    #################
    # PID variables #
    #################
    # Dst
    dst_id: int; dst_ID
    # D0
    d0_id: int; d0_ID
    # K
    k_is_mu: bool; k_isMuon
    k_pid_mu: double; k_PIDmu
    k_pid_k: double; k_PIDK
    k_pid_e: double; k_PIDe
    # Pi
    pi_is_mu: bool; pi_isMuon
    pi_pid_mu: double; pi_PIDmu
    pi_pid_k: double; pi_PIDK
    pi_pid_e: double; pi_PIDe
    # slow Pi
    spi_is_mu: bool; spi_isMuon
    spi_pid_mu: double; spi_PIDmu
    spi_pid_k: double; spi_PIDK
    spi_pid_e: double; spi_PIDe
    # Mu
    mu_is_mu: bool; mu_isMuon
    mu_pid_mu: double; mu_PIDmu
    mu_pid_k: double; mu_PIDK
    mu_pid_e: double; mu_PIDe
    mu_ubdt: float; mu_bdt_mu; 1.0  # Greg's Mu UBDT PID

    ######################
    # Tracking variables #
    ######################
    # B0
    b0_endvtx_chi2ndof: double; b0_ENDVERTEX_CHI2 / b0_ENDVERTEX_NDOF
    b0_fd_trans: double; FD_TRANS(b0_ENDVERTEX_X, b0_OWNPV_X, b0_ENDVERTEX_Y, b0_OWNPV_Y)
    # B
    b_endvtx_chi2ndof: double; b_ENDVERTEX_CHI2 / b_ENDVERTEX_NDOF
    b_fd_trans: double; FD_TRANS(b_ENDVERTEX_X, b_OWNPV_X, b_ENDVERTEX_Y, b_OWNPV_Y)
    b_dira: double; b_DIRA_OWNPV
    # D*
    dst_endvtx_chi2ndof: double; dst_ENDVERTEX_CHI2 / dst_ENDVERTEX_NDOF
    # D0
    d0_endvtx_chi2ndof: double; d0_ENDVERTEX_CHI2 / d0_ENDVERTEX_NDOF
    d0_dira: double; d0_DIRA_OWNPV
    d0_fd_chi2: double; d0_FDCHI2_OWNPV
    d0_ip: double; d0_IP_OWNPV
    d0_ip_chi2: double; d0_IPCHI2_OWNPV
    # K
    k_gh_prob: double; k_TRACK_GhostProb
    k_ip_chi2: double; k_IPCHI2_OWNPV
    # Pi
    pi_gh_prob: double; pi_TRACK_GhostProb
    pi_ip_chi2: double; pi_IPCHI2_OWNPV
    # slow Pi
    spi_gh_prob: double; spi_TRACK_GhostProb
    spi_ip_chi2: double; spi_IPCHI2_OWNPV
    # Mu
    mu_gh_prob: double; mu_TRACK_GhostProb
    mu_ip_chi2: double; mu_IPCHI2_OWNPV
    mu_eta: double; ETA(mu_P, mu_PZ)

    ###################
    # Selection flags #
    ###################
    # Trigger
    l0: "bool; mu_L0Global_TIS && (b0_L0Global_TIS || d0_L0HadronDecision_TOS); mu_L0Global_TIS && (b_L0Global_TIS || d0_L0HadronDecision_TOS)"
    hlt1: "bool; k_Hlt1TrackAllL0Decision_TOS || pi_Hlt1TrackAllL0Decision_TOS"
    hlt2: "bool; d0_Hlt2CharmHadD02HH_D02KPiDecision_TOS"

    # D0 selection
    d0_pid_ok: bool; FLAG_SEL_D0_PID_OK_RUN1(k_PIDK, pi_PIDK, k_isMuon, pi_isMuon)
    d0_ok: >-
        bool; FLAG_SEL_D0_RUN1(
        d0_pid_ok,
        k_PT, pi_PT, k_P, pi_P,
        k_Hlt1TrackAllL0Decision_TOS, pi_Hlt1TrackAllL0Decision_TOS,
        k_IPCHI2_OWNPV, pi_IPCHI2_OWNPV,
        k_TRACK_GhostProb, pi_TRACK_GhostProb,
        d0_PT, d0_Hlt2CharmHadD02HH_D02KPiDecision_TOS,
        d0_ENDVERTEX_NDOF, d0_ENDVERTEX_CHI2,
        d0_IP_OWNPV, d0_IPCHI2_OWNPV,
        d0_DIRA_OWNPV, d0_FDCHI2_OWNPV, d0_M
        )

    # Mu selection
    # Variables needed for Mu selection
    trk_mu:  ^XYZVector; XYZVector(mu_PX, mu_PY, mu_PZ)
    trk_k:   ^XYZVector; XYZVector(k_PX, k_PY, k_PZ)
    trk_pi:  ^XYZVector; XYZVector(pi_PX, pi_PY, pi_PZ)
    trk_spi: ^XYZVector; XYZVector(spi_PX, spi_PY, spi_PZ)
    trks_other: ^vector<XYZVector>; BUILD_VEC(trk_k, trk_pi, trk_spi); BUILD_VEC(trk_k, trk_pi)
    # Actual flags
    trks_ok: bool; FLAG_SEL_GOOD_TRACKS(trk_mu, trks_other)
    mu_pid_ok: bool; FLAG_SEL_MU_PID_OK_RUN1(mu_isMuon, mu_PIDmu, mu_PIDe)
    mu_ubdt_ok: bool; FLAG_SEL_MU_UBDT_OK_RUN1(mu_ubdt)
    mu_ok: >-
        bool; FLAG_SEL_MU_RUN1(
        trks_ok, mu_pid_ok,
        mu_P, mu_eta,
        mu_IPCHI2_OWNPV, mu_TRACK_GhostProb
        )

    # D0Mu combo selection
    d0mu_ok: >-
        bool; FLAG_SEL_BMINUSD0_RUN1(
        d0_ok, mu_ok,
        b_ENDVERTEX_CHI2, b_ENDVERTEX_NDOF,
        b_fd_trans,
        b_DIRA_OWNPV,
        b_M,
        mu_PX, mu_PY, mu_PZ,
        d0_PX, d0_PY, d0_PZ, d0_M,
        dst_veto_deltam
        )

    # D*Mu combo selection
    dstmu_ok: >-
        bool; FLAG_SEL_B0DST_RUN1(
        d0_ok, mu_ok,
        spi_TRACK_GhostProb,
        dst_ENDVERTEX_CHI2, dst_ENDVERTEX_NDOF,
        dst_veto_deltam,
        b0_ENDVERTEX_CHI2, b0_ENDVERTEX_NDOF,
        b0_fd_trans,
        b0_DIRA_OWNPV, b0_M
        )

    # Skims
    is_iso: bool; FLAG_ISO(mu_ubdt_ok, iso_bdt1)
    is_dd: >-
        bool; FLAG_DD(
        mu_ubdt_ok,
        iso_bdt1, iso_bdt2, iso_bdt2, iso_type1, iso_type2, iso_type3,
        iso_p1, iso_p2, iso_p3, iso_pt1, iso_pt2, iso_pt3,
        iso_nnk1, iso_nnk2, iso_nnk3
        )
    is_2os: >-
        bool; FLAG_2OS(
        mu_ubdt_ok,
        iso_bdt1, iso_bdt2, iso_bdt3, iso_type1, iso_type2,
        iso_p1, iso_p2, iso_pt1, iso_pt2,
        iso_chrg1, iso_chrg2,
        iso_nnk1, iso_nnk2
        )
    is_1os: >-
        bool; FLAG_1OS(
        mu_ubdt_ok,
        iso_bdt1, iso_bdt2, iso_type1,
        iso_p1, iso_pt1,
        iso_chrg1,
        iso_nnk1,
        dst_id, dst_iso_deltam
        ); FLAG_1OS(
        mu_ubdt_ok,
        iso_bdt1, iso_bdt2, iso_type1,
        iso_p1, iso_pt1,
        iso_chrg1,
        iso_nnk1,
        d0_id
        )

global_selection:
    # Trigger (L0, HLT1, HLT2)
    - l0
    - hlt1
    - hlt2
    # Offline cuts
    - d0mu_ok
    - dstmu_ok

one_cand_only:
    enable: true
    branch: calculation_prs_in

output:
    Dst:
        input: TupleB0/DecayTree
        mute:
            - "^b_.*"
            - "d0mu_ok"

    D0:
        input: TupleBminus/DecayTree
        mute:
            - "^b0_.*"
            - "^spi_.*"
            - "trk_spi"
            - "dst_m"
            - "dst_id"
            - "dst_endvtx_chi2ndof"
            - "dst_p.*"
            - "dst_iso.*"
            - "dstmu_ok"
