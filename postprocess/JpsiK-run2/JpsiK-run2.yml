headers:
    user:
        - functor/basic.h
        - functor/basic_kinematic.h
        - functor/jpsik/flag.h

keep:
    - runNumber
    - eventNumber
    - GpsTime
    - "^wpid*"
    - "^wtrk*"
    - "^wjk*"

rename:
    # General
    Polarity: polarity
    # L0
    b_L0Global_TIS: b_l0_global_tis
    b_L0MuonDecision_TOS: b_l0_muon_tos
    b_L0DiMuonDecision_TOS: b_l0_dimuon_tos
    # HLT1
    b_Hlt1TwoTrackMVADecision_TOS: b_hlt1_twotrackmva_tos
    b_Hlt1TrackMVADecision_TOS: b_hlt1_trackmva_tos
    b_Hlt1TrackMuonDecision_TOS: b_hlt1_trackmu_tos
    # HLT2
    b_Hlt2DiMuonDetachedHeavyDecision_TOS: b_hlt2_dimuon_heavy_tos
    # Event variables
    nTracks: ntracks
    nSPDHits: nspdhits

calculation:
    #######################
    # Kinematic variables #
    #######################
    # Keep everything in MeV!
    # B
    b_m: double; b_M
    b_p: double; b_P
    b_pz: double; b_PZ
    b_pt: double; b_PT
    b_true_pz: double; b_TRUEP_Z
    b_true_pt: double; b_TRUEPT
    b_eta: double; ETA(b_P, b_PZ)
    # J/psi
    # For M vs MM, see https://github.com/lhcb/first-analysis-steps/pull/148
    j_m: double; j_M
    j_mm: double; j_MM  # the sum of the four-vectors of the children as the 'parent'
    # K
    k_p: double; k_P
    k_pt: double; k_PT
    k_eta: double; ETA(k_P, k_PZ)
    # Mu
    mu_p: double; mu_P
    mu_pt: double; mu_PT
    mu_eta: double; ETA(mu_P, mu_PZ)
    # anti-Mu
    amu_p: double; amu_P
    amu_pt: double; amu_PT
    amu_eta: double; ETA(amu_P, amu_PZ)
    # Misc.
    pt_prod_sqrt: double; SQRT(mu_pt*amu_pt)

    #################
    # PID variables #
    #################
    # K
    k_pid_k: double; k_PIDK
    # Mu
    mu_pid_mu: double; mu_PIDmu
    mu_ismu: double; mu_isMuon
    # anti-Mu
    amu_pid_mu: double; amu_PIDmu
    amu_ismu: double; amu_isMuon

    ######################
    # Tracking variables #
    ######################
    # B
    b_endvtx_chi2: double; b_ENDVERTEX_CHI2
    b_min_ip_ch2: double; b_MINIPCHI2
    b_dira: double; b_DIRA_OWNPV
    b_ownpv_ndof: double; b_OWNPV_NDOF
    # J/psi
    j_fd_chi2: double; j_FDCHI2_OWNPV
    # Mu
    mu_min_ip_chi2: double; mu_MINIPCHI2
    # anti-Mu
    amu_min_ip_chi2: double; amu_MINIPCHI2

    ################################
    # Selection flags, MC-specific #
    ################################
    mc_id: int; cli_mc_id
    truthmatch: >-
        bool;
        amu_MC_MOTHER_KEY == mu_MC_MOTHER_KEY &&
        j_MC_MOTHER_KEY == mu_MC_GD_MOTHER_KEY &&
        j_MC_MOTHER_KEY == k_MC_MOTHER_KEY &&
        j_MC_GD_MOTHER_KEY == b_MC_MOTHER_KEY &&
        ABS(amu_TRUEID) == 13 &&
        ABS(mu_TRUEID) == 13 &&
        ABS(j_TRUEID) == 443 &&
        ABS(k_TRUEID) == 321 &&
        ABS(b_TRUEID) == 521

    ##########################
    # Selection flags, basic #
    ##########################
    # Trigger
    l0_mu_tos: bool; b_l0_muon_tos
    l0_mu_tos_pt: bool; L0MUPT(mu_pt, mu_L0MuonDecision_TOS, amu_pt, amu_L0MuonDecision_TOS)
    l0: bool; l0_mu_tos_pt || b_l0_global_tis
    hlt1: bool; b_hlt1_trackmu_tos
    hlt2: bool; b_hlt2_dimuon_heavy_tos
    nspd_ok: bool; nspdhits < 450 # L0 DiMuon has nspd cut at 900, whereas all other lines have it at 450; this cut mostly removes
                                  # inconsistency due to underlying occupancy distributions when combining Global TIS + Muon TOS samples

    # Kinematic
    pt_ok: bool; mu_pt > 500.0 && amu_pt > 500.0 && k_pt > 500.0
    b_mass_ok: bool; b_m > 5150.0 && b_m < 5450.0  # fit range
    j_mass_ok: bool; j_mm > 3060.0 && j_mm < 3140.0

    # PID- note: stripping has PIDK,mu>0, isMuon (all applied to both mu, amu). Better to use PIDCalib weights for MC if possible, so set this to true
    pid_ok: >-
        bool; IF_VAR_EXISTS(mc_id, true);
        k_pid_k > 4.0 && mu_pid_mu > 2.0 && amu_pid_mu > 2.0

    # Vertexing
    vtx_ok: >-
        bool; b_dira > 0.9995 &&
        b_min_ip_ch2 < 12.0 && b_endvtx_chi2 < 18.0 &&
        j_fd_chi2 > 25.0 &&
        mu_min_ip_chi2 > 4.0 && amu_min_ip_chi2 > 4.0

    ###########
    # Weights #
    ###########
    wpid: double; IF(wpid_k > 1.0, 1.0, wpid_k)*IF(wpid_mu > 1.0, 1.0, wpid_mu)*IF(wpid_amu > 1.0, 1.0, wpid_amu) # these should be shifted into [0,1] already, but double-check
    wtrk: double; wtrk_k*wtrk_mu*wtrk_amu
    # nominally use JpsiK weights where, for PID, used weights for DLLK and DLLmu, cuts for isMuon (L0 Muon TOS highly correlated with the isMuon)
    wjk_occ: double; wjk_PIDweights_IsMuonCut_occ
    wjk_kin: double; wjk_PIDweights_IsMuonCut_kin
    wjk: double; IF(wjk_occ*wjk_kin > 100.0, 100.0, wjk_occ*wjk_kin)
    pid_mc_ok: bool; mu_ismu && amu_ismu # && mu_pid_mu > 2.0 && amu_pid_mu > 2.0
    w: double; wpid*wtrk*wjk*pid_mc_ok

global_selection:
    - l0 && hlt1 && hlt2 # comment out if producing trigger-less sample for real L0 Global TIS measurements!
    - nspd_ok && pt_ok && b_mass_ok && j_mass_ok
    - vtx_ok
    - pid_ok  # This is set to be always true for MC
    - truthmatch

one_cand_only:
    enable: false

output:
    JpsiK:
        input: tree
