{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the wiki for lhcb-ntuples-gen , the repository that generates the ntuples for some LHCb analyses at UMD, currently just run 2 \\(R(D^{(*)})\\) analysis. In this section, you'll find useful information for installing the required dependencies for this project, as well as the usage of some tools, such as git-annex , that will be used in this project. Generation of analysis ntuples The ntuples 1 generation is separated into: STEP 1 : Use LHCb's DaVinci to generate ntuples from raw LHCb data 2 . Follow this section to install required programs. Use this manual to learn how to use DaVinci locally. Follow this section to learn submitting DaVinci jobs to the GRID. STEP 2 : Use babymaker frame work to do slimming, skimming, and additional calculation on previous ntuples, generating new ntuples. Follow these two section for installation. A general guide for generating step-2 ntuple can be found here . Note These two steps have separate dependencies. If you only need to run one step, just follow the installation instruction for that particular step. Info The step-1 and step-2 ntuples have the following naming conventions. For some tips on the general development of this project, see here Directory structures . \u251c\u2500\u2500 archive # storage for plots, csv, and some old code \u251c\u2500\u2500 docs \u251c\u2500\u2500 ganga \u251c\u2500\u2500 gen # output produced by make rules, e.g. ntuple, cutflow MD \u251c\u2500\u2500 include # headers \u2502 \u2514\u2500\u2500 functor \u2502 \u2514\u2500\u2500 rdx # RDX-specific headers \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 python # Python submodules, e.g. pyBabyMaker \u251c\u2500\u2500 ntuples # storage for (mostly) GRID-produced ntuples \u251c\u2500\u2500 postprocess \u2502 \u251c\u2500\u2500 cpp_templates # C++ templates for babymaker \u2502 \u251c\u2500\u2500 rdx-run1 \u2502 \u251c\u2500\u2500 rdx-run2 \u2502 \u251c\u2500\u2500 ref-rdx-run1 # For Phoebe's sample ntuples \u2502 \u2514\u2500\u2500 skims # For branch removal at lxplus level \u251c\u2500\u2500 run1-rdx # DaVinci scripts, sample ntuples for RDX run 1 \u251c\u2500\u2500 run2-rdx # ^^^^ for RDX run 2 \u251c\u2500\u2500 scripts # plotting, cutflow, and utility scripts \u251c\u2500\u2500 studies # One-off studies \u2514\u2500\u2500 workflows # workflows for ntuple production, cutflow, etc. \u2514\u2500\u2500 rdx Modifying this wiki This wiki is written in a series of markdown files ( .md ) committed to the docs folder of the lhcb-ntuples-gen repository. The structure of the wiki is defined in mkdocs.yml . This file contains the title of each page in the wiki, and the markdown file that defines that page. To modify the wiki just modify mkdocs.yml or the .md files, and commit the changes to the repo. In about a minute Github Action will deploy the new website to https://umd-lhcb.github.io/lhcb-ntuples-gen/ . To view the website locally (for instance, before committing), you will need to install mkdocs and the material theme pip install --user -r docs/requirements.txt Then, from lhcb-ntuples-gen you generate the website at the local address http://127.0.0.1:8000 with the command mkdocs serve Note If you have problems installing mkdocs , you can also install it and run it inside nix with nix develop # Enter the nix shell in lhcb-ntuples-gen pip install -r docs/requirements.txt Version control systems (VCS) This project requires the following VCS to be installed in your system: git : for source code version control git-annex (that supports v7 repository format): for data file version control To install these programs, please follow this section . In addition, we provide a brief introduction on the usage of git-annex . .root files that can be processed by DaVinci , ROOT , and many other tools. \u21a9 .dst files that directly come from CERN. \u21a9","title":"Home"},{"location":"#generation-of-analysis-ntuples","text":"The ntuples 1 generation is separated into: STEP 1 : Use LHCb's DaVinci to generate ntuples from raw LHCb data 2 . Follow this section to install required programs. Use this manual to learn how to use DaVinci locally. Follow this section to learn submitting DaVinci jobs to the GRID. STEP 2 : Use babymaker frame work to do slimming, skimming, and additional calculation on previous ntuples, generating new ntuples. Follow these two section for installation. A general guide for generating step-2 ntuple can be found here . Note These two steps have separate dependencies. If you only need to run one step, just follow the installation instruction for that particular step. Info The step-1 and step-2 ntuples have the following naming conventions. For some tips on the general development of this project, see here","title":"Generation of analysis ntuples"},{"location":"#directory-structures","text":". \u251c\u2500\u2500 archive # storage for plots, csv, and some old code \u251c\u2500\u2500 docs \u251c\u2500\u2500 ganga \u251c\u2500\u2500 gen # output produced by make rules, e.g. ntuple, cutflow MD \u251c\u2500\u2500 include # headers \u2502 \u2514\u2500\u2500 functor \u2502 \u2514\u2500\u2500 rdx # RDX-specific headers \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 python # Python submodules, e.g. pyBabyMaker \u251c\u2500\u2500 ntuples # storage for (mostly) GRID-produced ntuples \u251c\u2500\u2500 postprocess \u2502 \u251c\u2500\u2500 cpp_templates # C++ templates for babymaker \u2502 \u251c\u2500\u2500 rdx-run1 \u2502 \u251c\u2500\u2500 rdx-run2 \u2502 \u251c\u2500\u2500 ref-rdx-run1 # For Phoebe's sample ntuples \u2502 \u2514\u2500\u2500 skims # For branch removal at lxplus level \u251c\u2500\u2500 run1-rdx # DaVinci scripts, sample ntuples for RDX run 1 \u251c\u2500\u2500 run2-rdx # ^^^^ for RDX run 2 \u251c\u2500\u2500 scripts # plotting, cutflow, and utility scripts \u251c\u2500\u2500 studies # One-off studies \u2514\u2500\u2500 workflows # workflows for ntuple production, cutflow, etc. \u2514\u2500\u2500 rdx","title":"Directory structures"},{"location":"#modifying-this-wiki","text":"This wiki is written in a series of markdown files ( .md ) committed to the docs folder of the lhcb-ntuples-gen repository. The structure of the wiki is defined in mkdocs.yml . This file contains the title of each page in the wiki, and the markdown file that defines that page. To modify the wiki just modify mkdocs.yml or the .md files, and commit the changes to the repo. In about a minute Github Action will deploy the new website to https://umd-lhcb.github.io/lhcb-ntuples-gen/ . To view the website locally (for instance, before committing), you will need to install mkdocs and the material theme pip install --user -r docs/requirements.txt Then, from lhcb-ntuples-gen you generate the website at the local address http://127.0.0.1:8000 with the command mkdocs serve Note If you have problems installing mkdocs , you can also install it and run it inside nix with nix develop # Enter the nix shell in lhcb-ntuples-gen pip install -r docs/requirements.txt","title":"Modifying this wiki"},{"location":"#version-control-systems-vcs","text":"This project requires the following VCS to be installed in your system: git : for source code version control git-annex (that supports v7 repository format): for data file version control To install these programs, please follow this section . In addition, we provide a brief introduction on the usage of git-annex . .root files that can be processed by DaVinci , ROOT , and many other tools. \u21a9 .dst files that directly come from CERN. \u21a9","title":"Version control systems (VCS)"},{"location":"data/data_management/","text":"Split book-keeping files The .dst description files downloaded directly from Dirac contains a list with a large number of files (700 files or more). For example, this file contains 1690 lines: /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00001536_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00001039_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000344_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000301_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000850_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000988_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00001423_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000841_1.Semileptonic.dst ... /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00001096_1.Semileptonic.dst It is impractical to download every single one of them, as we don't have enough storage space in lxplus , even with EOS . To split, we use split , a linux tool that should have been installed by default: split --lines=50 <filename.txt> In this case, the <filename.txt> will be sliced for every 50 lines, and the output filenames will be x?? . Download data files with lxplus To download all dst files listed in a bookkeeping file: lhcb-proxy-init lb-dirac dirac-dms-get-file -D <target_dir> --File <file_with_list_of_lfns> If you know a LFN , instead of a file that contains a list of LFN s, you can: lb-dirac dirac-dms-get-file -D <target_dir> -l <lfn> Query MC DDDB and CONDDB tags Warning MagUp and MagDown have different tags. Typically you can replace mu100 with md100 . Find the production number for a given .dst LFN, say: /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000841_1.Semileptonic.dst It's production number is 67251 . On lxplus, do the following: lhcb-proxy-init lb-dirac dirac-bookkeeping-production-information 67251 The output contains both DDDB and CONDDB tags.","title":"Data management"},{"location":"data/data_management/#split-book-keeping-files","text":"The .dst description files downloaded directly from Dirac contains a list with a large number of files (700 files or more). For example, this file contains 1690 lines: /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00001536_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00001039_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000344_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000301_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000850_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000988_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00001423_1.Semileptonic.dst /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000841_1.Semileptonic.dst ... /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00001096_1.Semileptonic.dst It is impractical to download every single one of them, as we don't have enough storage space in lxplus , even with EOS . To split, we use split , a linux tool that should have been installed by default: split --lines=50 <filename.txt> In this case, the <filename.txt> will be sliced for every 50 lines, and the output filenames will be x?? .","title":"Split book-keeping files"},{"location":"data/data_management/#download-data-files-with-lxplus","text":"To download all dst files listed in a bookkeeping file: lhcb-proxy-init lb-dirac dirac-dms-get-file -D <target_dir> --File <file_with_list_of_lfns> If you know a LFN , instead of a file that contains a list of LFN s, you can: lb-dirac dirac-dms-get-file -D <target_dir> -l <lfn>","title":"Download data files with lxplus"},{"location":"data/data_management/#query-mc-dddb-and-conddb-tags","text":"Warning MagUp and MagDown have different tags. Typically you can replace mu100 with md100 . Find the production number for a given .dst LFN, say: /lhcb/LHCb/Collision12/SEMILEPTONIC.DST/00067251/0000/00067251_00000841_1.Semileptonic.dst It's production number is 67251 . On lxplus, do the following: lhcb-proxy-init lb-dirac dirac-bookkeeping-production-information 67251 The output contains both DDDB and CONDDB tags.","title":"Query MC DDDB and CONDDB tags"},{"location":"data/data_sources/","text":"Run 1 muonic \\(R(D^{(*)})\\) data stripping line sample DIRAC path b2D0MuXB2DMuNuForTauMuLine /LHCb/Collision12/Beam4000GeV-VeloClosed-MagDown/Real Data/Reco14/Stripping21/90000000/SEMILEPTONIC.DST b2D0MuXFakeB2DMuNuForTauMuLine Same as above Note Both lines are defined in the same file, which can be found here . We have to use Stripping21 instead of Stripping20 as mentioned in the notes, because the latter one is no longer fully exist. Also, Stripping21 contains 2012 data, and Stripping21r1 contains 2011 data. Info The Fake line contains all cuts as the Regular line, with the following differences: Fake uses StdAllNoPIDsMuons whereas Regular uses StdLooseMuons Fake has the \\(\\mu\\) cuts of: (~ISMUON) & (INMUON) Regular has the \\(\\mu\\) cuts of: PIDmu > 2.0 Run 1 muonic \\(R(D^{(*)})\\) Monte-Carlo Tip In DIRAC , make sure to switch from Simulation Condition to Event type . Then the event will be available at MC/2012/<event_type_uid> . Normalization sample MC ID decay \\(D^0\\) 12573010 \\(B^- \\rightarrow D^0 \\mu \\nu\\) \\(D^0/D^{*+}\\) 11574020 \\(B^0 \\rightarrow D^{*+} \\mu \\nu\\) \\(D^0\\) 12573031 \\(B^- \\rightarrow D^{*0} \\mu \\nu\\) Signal sample MC ID decay \\(D^0\\) 12573000 \\(B^- \\rightarrow D^0 \\tau \\nu\\) \\(D^0/D^{*+}\\) 11574010 \\(B^0 \\rightarrow D^{*+} \\tau \\nu\\) \\(D^0\\) 12573021 \\(B^- \\rightarrow D^{*0} \\tau \\nu\\) \\(D^{**}\\) sample MC ID decay \\(D^0/D^{*+}\\) 12873010 \\(B^- \\rightarrow D^{**0} \\mu \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 11873010 \\(B^0 \\rightarrow D^{**+} \\mu \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 12873030 \\(B^- \\rightarrow D^{**0} \\tau \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 11873030 \\(B^0 \\rightarrow D^{**+} \\tau \\nu \\rightarrow D^0\\) \\(D^{**} \\rightarrow D^{(*)} \\pi \\pi\\) sample MC ID decay \\(D^0\\) 12675010 \\(B^- \\rightarrow D^{**} (\\rightarrow D^0 \\pi \\pi) \\mu \\nu\\) \\(D^0\\) 11674400 \\(B^0 \\rightarrow D^{**} (\\rightarrow D^0 \\pi \\pi) \\mu \\nu\\) \\(D^0/D^{*+}\\) 12675400 \\(B^- \\rightarrow D^{**} (\\rightarrow D^{*+} \\pi \\pi) \\mu \\nu\\) \\(D^0/D^{*+}\\) 11676010 \\(B^0 \\rightarrow D^{**} (\\rightarrow D^{*+} \\pi \\pi) \\mu \\nu\\) \\(D^0\\) 12675430 \\(B^- \\rightarrow D^{**} (\\rightarrow D^{*0} \\pi \\pi) \\mu \\nu\\) \\(D_s^{**}\\) sample MC ID decay \\(D^0\\) 13873000 \\(B_s \\rightarrow D_s^{**} (\\rightarrow D^0 K) \\mu \\nu\\) \\(D^{*+}\\) 13874000 \\(B_s \\rightarrow D^{**+} \\mu \\nu\\) \\(DDX\\) sample MC ID decay \\(D^0\\) 11873000 \\(B^0 \\rightarrow D^0 X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^0\\) 12873000 \\(B^+ \\rightarrow D^0 X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^0\\) 11873020 \\(B^0 \\rightarrow D^0 D_s (\\rightarrow \\tau \\nu) X\\) \\(D^0\\) 12873021 \\(B^+ \\rightarrow D^0 D_s (\\rightarrow \\tau \\nu) X\\) \\(D^{*+}\\) 11874050 \\(B^0 \\rightarrow D^{*+} X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^{*+}\\) 12874010 \\(B^+ \\rightarrow D^{*+} X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^{*+}\\) 11874070 \\(B^0 \\rightarrow D^{*+} D_s (\\rightarrow \\tau \\nu) X\\) \\(D^{*+}\\) 11874030 \\(B^+ \\rightarrow D^{*+} D_s (\\rightarrow \\tau \\nu) X\\) Cocktail sample for cutflow study sample MC ID decay \\(D^0/D^{*+}\\) 11874091 \\(B_d \\rightarrow D^0 X \\mu \\nu\\) , \\(D^0 = cocktail\\) Run 2 muonic \\(R(D^{(*)})\\) data stripping line sample DIRAC path b2D0MuXB2DMuForTauMuLine /LHCb/Collision16/Beam6500GeV-VeloClosed-MagDown/Real Data/Reco16/Stripping28r1/90000000/SEMILEPTONIC.DST b2D0MuXFakeB2DMuForTauMuLine Same as above Note As in run 1, both are defined in the same file . Warning The run 2 stripping line name is different from that of run 1! The run 2 stripping line omits Nu . Run 2 muonic \\(R(D^{(*)})\\) Monte-Carlo Info The FullSim production IDs are: 74233, 74234, 74494, 74509 . Tips To find the MC IDs of a production, go to DIRAC, then navigate: Data -> Production Request -> input the production ID you'd like to inspect. Normalization sample MC ID decay \\(D^0\\) 12573012 \\(B^- \\rightarrow D^0 \\mu \\nu\\) \\(D^0/D^{*+}\\) 11574021 \\(B^0 \\rightarrow D^{*+} \\mu \\nu\\) \\(D^0\\) 12773410 \\(B^- \\rightarrow D^{*0} \\mu \\nu\\) Signal sample MC ID decay \\(D^0\\) 12573001 \\(B^- \\rightarrow D^0 \\tau \\nu\\) \\(D^0/D^{*+}\\) 11574011 \\(B^0 \\rightarrow D^{*+} \\tau \\nu\\) \\(D^0\\) 12773400 \\(B^- \\rightarrow D^{*0} \\tau \\nu\\) \\(D^{**}\\) sample MC ID decay \\(D^0/D^{*+}\\) 11874430 \\(B^0 \\rightarrow D^{**+} \\mu \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 11874440 \\(B^0 \\rightarrow D^{**+} \\tau \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 12873450 \\(B^- \\rightarrow D^{**0} \\mu \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 12873460 \\(B^- \\rightarrow D^{**0} \\tau \\nu \\rightarrow D^0\\) \\(D^{**} \\rightarrow D^{(*)} \\pi \\pi\\) sample MC ID decay \\(D^0\\) 12675011 \\(B^- \\rightarrow D^{**} (\\rightarrow D^0 \\pi \\pi) \\mu \\nu\\) \\(D^0\\) 11674401 \\(B^0 \\rightarrow D^{**} (\\rightarrow D^0 \\pi \\pi) \\mu \\nu\\) \\(D^0/D^{*+}\\) 12675402 \\(B^- \\rightarrow D^{**} (\\rightarrow D^{*+} \\pi \\pi) \\mu \\nu\\) \\(D^0/D^{*+}\\) 11676012 \\(B^0 \\rightarrow D^{**} (\\rightarrow D^{*+} \\pi \\pi) \\mu \\nu\\) \\(D^0\\) 12875440 \\(B^- \\rightarrow D^{**} (\\rightarrow D^{*0} \\pi \\pi) \\mu \\nu\\) \\(D_s^{**}\\) sample MC ID decay \\(D^0\\) 13874020 \\(B_s \\rightarrow D_s^{**} (\\rightarrow D^0 K) \\mu \\nu\\) \\(D^{*+}\\) 13674000 \\(B_s \\rightarrow D^{**+} \\mu \\nu\\) \\(DDX\\) sample MC ID decay \\(D^0\\) 11894600 \\(B^0 \\rightarrow D^0 X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^0\\) 12893600 \\(B^+ \\rightarrow D^0 X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^0\\) 11894200 \\(B^0 \\rightarrow D^0 D_s (\\rightarrow \\tau \\nu) X\\) \\(D^0\\) 12893610 \\(B^+ \\rightarrow D^0 D_s (\\rightarrow \\tau \\nu) X\\) \\(D^{*+}\\) 11894610 \\(B^0 \\rightarrow D^{*+} X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^{*+}\\) 12895400 \\(B^+ \\rightarrow D^{*+} X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^{*+}\\) 11894210 \\(B^0 \\rightarrow D^{*+} D_s (\\rightarrow \\tau \\nu) X\\) \\(D^{*+}\\) 12895000 \\(B^+ \\rightarrow D^{*+} D_s (\\rightarrow \\tau \\nu) X\\) Cocktail sample for cutflow study sample MC ID decay \\(D^0/D^{*+}\\) 11874091 \\(B_d \\rightarrow D^0 X \\mu \\nu\\) , \\(D^0 = cocktail\\)","title":"Data sources"},{"location":"data/data_sources/#run-1-muonic-rd-data","text":"stripping line sample DIRAC path b2D0MuXB2DMuNuForTauMuLine /LHCb/Collision12/Beam4000GeV-VeloClosed-MagDown/Real Data/Reco14/Stripping21/90000000/SEMILEPTONIC.DST b2D0MuXFakeB2DMuNuForTauMuLine Same as above Note Both lines are defined in the same file, which can be found here . We have to use Stripping21 instead of Stripping20 as mentioned in the notes, because the latter one is no longer fully exist. Also, Stripping21 contains 2012 data, and Stripping21r1 contains 2011 data. Info The Fake line contains all cuts as the Regular line, with the following differences: Fake uses StdAllNoPIDsMuons whereas Regular uses StdLooseMuons Fake has the \\(\\mu\\) cuts of: (~ISMUON) & (INMUON) Regular has the \\(\\mu\\) cuts of: PIDmu > 2.0","title":"Run 1 muonic \\(R(D^{(*)})\\) data"},{"location":"data/data_sources/#run-1-muonic-rd-monte-carlo","text":"Tip In DIRAC , make sure to switch from Simulation Condition to Event type . Then the event will be available at MC/2012/<event_type_uid> .","title":"Run 1 muonic \\(R(D^{(*)})\\) Monte-Carlo"},{"location":"data/data_sources/#normalization","text":"sample MC ID decay \\(D^0\\) 12573010 \\(B^- \\rightarrow D^0 \\mu \\nu\\) \\(D^0/D^{*+}\\) 11574020 \\(B^0 \\rightarrow D^{*+} \\mu \\nu\\) \\(D^0\\) 12573031 \\(B^- \\rightarrow D^{*0} \\mu \\nu\\)","title":"Normalization"},{"location":"data/data_sources/#signal","text":"sample MC ID decay \\(D^0\\) 12573000 \\(B^- \\rightarrow D^0 \\tau \\nu\\) \\(D^0/D^{*+}\\) 11574010 \\(B^0 \\rightarrow D^{*+} \\tau \\nu\\) \\(D^0\\) 12573021 \\(B^- \\rightarrow D^{*0} \\tau \\nu\\)","title":"Signal"},{"location":"data/data_sources/#d","text":"sample MC ID decay \\(D^0/D^{*+}\\) 12873010 \\(B^- \\rightarrow D^{**0} \\mu \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 11873010 \\(B^0 \\rightarrow D^{**+} \\mu \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 12873030 \\(B^- \\rightarrow D^{**0} \\tau \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 11873030 \\(B^0 \\rightarrow D^{**+} \\tau \\nu \\rightarrow D^0\\)","title":"\\(D^{**}\\)"},{"location":"data/data_sources/#d-rightarrow-d-pi-pi","text":"sample MC ID decay \\(D^0\\) 12675010 \\(B^- \\rightarrow D^{**} (\\rightarrow D^0 \\pi \\pi) \\mu \\nu\\) \\(D^0\\) 11674400 \\(B^0 \\rightarrow D^{**} (\\rightarrow D^0 \\pi \\pi) \\mu \\nu\\) \\(D^0/D^{*+}\\) 12675400 \\(B^- \\rightarrow D^{**} (\\rightarrow D^{*+} \\pi \\pi) \\mu \\nu\\) \\(D^0/D^{*+}\\) 11676010 \\(B^0 \\rightarrow D^{**} (\\rightarrow D^{*+} \\pi \\pi) \\mu \\nu\\) \\(D^0\\) 12675430 \\(B^- \\rightarrow D^{**} (\\rightarrow D^{*0} \\pi \\pi) \\mu \\nu\\)","title":"\\(D^{**} \\rightarrow D^{(*)} \\pi \\pi\\)"},{"location":"data/data_sources/#d_s","text":"sample MC ID decay \\(D^0\\) 13873000 \\(B_s \\rightarrow D_s^{**} (\\rightarrow D^0 K) \\mu \\nu\\) \\(D^{*+}\\) 13874000 \\(B_s \\rightarrow D^{**+} \\mu \\nu\\)","title":"\\(D_s^{**}\\)"},{"location":"data/data_sources/#ddx","text":"sample MC ID decay \\(D^0\\) 11873000 \\(B^0 \\rightarrow D^0 X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^0\\) 12873000 \\(B^+ \\rightarrow D^0 X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^0\\) 11873020 \\(B^0 \\rightarrow D^0 D_s (\\rightarrow \\tau \\nu) X\\) \\(D^0\\) 12873021 \\(B^+ \\rightarrow D^0 D_s (\\rightarrow \\tau \\nu) X\\) \\(D^{*+}\\) 11874050 \\(B^0 \\rightarrow D^{*+} X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^{*+}\\) 12874010 \\(B^+ \\rightarrow D^{*+} X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^{*+}\\) 11874070 \\(B^0 \\rightarrow D^{*+} D_s (\\rightarrow \\tau \\nu) X\\) \\(D^{*+}\\) 11874030 \\(B^+ \\rightarrow D^{*+} D_s (\\rightarrow \\tau \\nu) X\\)","title":"\\(DDX\\)"},{"location":"data/data_sources/#cocktail-sample-for-cutflow-study","text":"sample MC ID decay \\(D^0/D^{*+}\\) 11874091 \\(B_d \\rightarrow D^0 X \\mu \\nu\\) , \\(D^0 = cocktail\\)","title":"Cocktail sample for cutflow study"},{"location":"data/data_sources/#run-2-muonic-rd-data","text":"stripping line sample DIRAC path b2D0MuXB2DMuForTauMuLine /LHCb/Collision16/Beam6500GeV-VeloClosed-MagDown/Real Data/Reco16/Stripping28r1/90000000/SEMILEPTONIC.DST b2D0MuXFakeB2DMuForTauMuLine Same as above Note As in run 1, both are defined in the same file . Warning The run 2 stripping line name is different from that of run 1! The run 2 stripping line omits Nu .","title":"Run 2 muonic \\(R(D^{(*)})\\) data"},{"location":"data/data_sources/#run-2-muonic-rd-monte-carlo","text":"Info The FullSim production IDs are: 74233, 74234, 74494, 74509 . Tips To find the MC IDs of a production, go to DIRAC, then navigate: Data -> Production Request -> input the production ID you'd like to inspect.","title":"Run 2 muonic \\(R(D^{(*)})\\) Monte-Carlo"},{"location":"data/data_sources/#normalization_1","text":"sample MC ID decay \\(D^0\\) 12573012 \\(B^- \\rightarrow D^0 \\mu \\nu\\) \\(D^0/D^{*+}\\) 11574021 \\(B^0 \\rightarrow D^{*+} \\mu \\nu\\) \\(D^0\\) 12773410 \\(B^- \\rightarrow D^{*0} \\mu \\nu\\)","title":"Normalization"},{"location":"data/data_sources/#signal_1","text":"sample MC ID decay \\(D^0\\) 12573001 \\(B^- \\rightarrow D^0 \\tau \\nu\\) \\(D^0/D^{*+}\\) 11574011 \\(B^0 \\rightarrow D^{*+} \\tau \\nu\\) \\(D^0\\) 12773400 \\(B^- \\rightarrow D^{*0} \\tau \\nu\\)","title":"Signal"},{"location":"data/data_sources/#d_1","text":"sample MC ID decay \\(D^0/D^{*+}\\) 11874430 \\(B^0 \\rightarrow D^{**+} \\mu \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 11874440 \\(B^0 \\rightarrow D^{**+} \\tau \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 12873450 \\(B^- \\rightarrow D^{**0} \\mu \\nu \\rightarrow D^0\\) \\(D^0/D^{*+}\\) 12873460 \\(B^- \\rightarrow D^{**0} \\tau \\nu \\rightarrow D^0\\)","title":"\\(D^{**}\\)"},{"location":"data/data_sources/#d-rightarrow-d-pi-pi_1","text":"sample MC ID decay \\(D^0\\) 12675011 \\(B^- \\rightarrow D^{**} (\\rightarrow D^0 \\pi \\pi) \\mu \\nu\\) \\(D^0\\) 11674401 \\(B^0 \\rightarrow D^{**} (\\rightarrow D^0 \\pi \\pi) \\mu \\nu\\) \\(D^0/D^{*+}\\) 12675402 \\(B^- \\rightarrow D^{**} (\\rightarrow D^{*+} \\pi \\pi) \\mu \\nu\\) \\(D^0/D^{*+}\\) 11676012 \\(B^0 \\rightarrow D^{**} (\\rightarrow D^{*+} \\pi \\pi) \\mu \\nu\\) \\(D^0\\) 12875440 \\(B^- \\rightarrow D^{**} (\\rightarrow D^{*0} \\pi \\pi) \\mu \\nu\\)","title":"\\(D^{**} \\rightarrow D^{(*)} \\pi \\pi\\)"},{"location":"data/data_sources/#d_s_1","text":"sample MC ID decay \\(D^0\\) 13874020 \\(B_s \\rightarrow D_s^{**} (\\rightarrow D^0 K) \\mu \\nu\\) \\(D^{*+}\\) 13674000 \\(B_s \\rightarrow D^{**+} \\mu \\nu\\)","title":"\\(D_s^{**}\\)"},{"location":"data/data_sources/#ddx_1","text":"sample MC ID decay \\(D^0\\) 11894600 \\(B^0 \\rightarrow D^0 X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^0\\) 12893600 \\(B^+ \\rightarrow D^0 X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^0\\) 11894200 \\(B^0 \\rightarrow D^0 D_s (\\rightarrow \\tau \\nu) X\\) \\(D^0\\) 12893610 \\(B^+ \\rightarrow D^0 D_s (\\rightarrow \\tau \\nu) X\\) \\(D^{*+}\\) 11894610 \\(B^0 \\rightarrow D^{*+} X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^{*+}\\) 12895400 \\(B^+ \\rightarrow D^{*+} X_c (\\rightarrow \\mu \\nu X') X\\) \\(D^{*+}\\) 11894210 \\(B^0 \\rightarrow D^{*+} D_s (\\rightarrow \\tau \\nu) X\\) \\(D^{*+}\\) 12895000 \\(B^+ \\rightarrow D^{*+} D_s (\\rightarrow \\tau \\nu) X\\)","title":"\\(DDX\\)"},{"location":"data/data_sources/#cocktail-sample-for-cutflow-study_1","text":"sample MC ID decay \\(D^0/D^{*+}\\) 11874091 \\(B_d \\rightarrow D^0 X \\mu \\nu\\) , \\(D^0 = cocktail\\)","title":"Cocktail sample for cutflow study"},{"location":"data/comparison/trigger_lines/","text":"2012 data, MagDown, TCK 0x990042 L0, HLT 1 and 2 lines are extracted with TCKsh . See here for more info. L0 (24 lines) L0B1gasDecision L0B2gasDecision L0CALODecision L0DiEM,lowMultDecision L0DiHadron,lowMultDecision L0DiMuonDecision L0DiMuon,lowMultDecision L0DiMuonNoSPDDecision L0ElectronDecision L0Electron,lowMultDecision L0ElectronHiDecision L0ElectronNoSPDDecision L0HadronDecision L0HadronNoSPDDecision L0HighSumETJetDecision L0MUON,minbiasDecision L0MuonDecision L0Muon,lowMultDecision L0MuonNoSPDDecision L0NoPVFlagDecision L0PhotonDecision L0Photon,lowMultDecision L0PhotonHiDecision L0PhotonNoSPDDecision HLT 1 (33 lines) Hlt1TrackAllL0TightDecision Hlt1TrackMuonDecision Hlt1TrackPhotonDecision Hlt1TrackForwardPassThroughDecision Hlt1TrackForwardPassThroughLooseDecision Hlt1LumiDecision Hlt1LumiMidBeamCrossingDecision Hlt1MBNoBiasDecision Hlt1CharmCalibrationNoBiasDecision Hlt1MBMicroBiasVeloDecision Hlt1MBMicroBiasTStationDecision Hlt1L0AnyDecision Hlt1L0AnyNoSPDDecision Hlt1L0HighSumETJetDecision Hlt1NoPVPassThroughDecision Hlt1DiProtonDecision Hlt1DiProtonLowMultDecision Hlt1BeamGasNoBeamBeam1Decision Hlt1BeamGasNoBeamBeam2Decision Hlt1BeamGasBeam1Decision Hlt1BeamGasBeam2Decision Hlt1BeamGasCrossingEnhancedBeam1Decision Hlt1BeamGasCrossingEnhancedBeam2Decision Hlt1BeamGasCrossingForcedRecoDecision Hlt1BeamGasCrossingForcedRecoFullZDecision Hlt1BeamGasHighRhoVerticesDecision Hlt1ODINTechnicalDecision Hlt1Tell1ErrorDecision Hlt1VeloClosingMicroBiasDecision Hlt1VertexDisplVertexDecision Hlt1BeamGasCrossingParasiticDecision Hlt1ErrorEventDecision Hlt1GlobalDecision HLT 2 (33 lines) Hlt2LambdaC_LambdaC2Lambda0LLKDecision Hlt2LambdaC_LambdaC2Lambda0DDPiDecision Hlt2LambdaC_LambdaC2Lambda0DDKDecision Hlt2RadiativeTopoTrackDecision Hlt2RadiativeTopoPhotonDecision Hlt2B2HHPi0_MergedDecision Hlt2CharmHadD2HHHDecision Hlt2CharmHadD2HHHWideMassDecision Hlt2CharmHadD02HHHHDst_4piDecision Hlt2CharmHadD02HHHHDst_4piWideMassDecision Hlt2CharmHadD02HHHH_4piDecision Hlt2CharmHadD02HHHH_4piWideMassDecision Hlt2CharmHadD02HHHHDst_K3piDecision Hlt2CharmHadD02HHHHDst_K3piWideMassDecision Hlt2CharmHadD02HHHH_K3piDecision Hlt2CharmHadD02HHHH_K3piWideMassDecision Hlt2CharmHadD02HHHHDst_KKpipiDecision Hlt2CharmHadD02HHHHDst_KKpipiWideMassDecision Hlt2CharmHadD02HHHH_KKpipiDecision Hlt2CharmHadD02HHHH_KKpipiWideMassDecision Hlt2CharmHadD02HHHHDst_2K2piDecision Hlt2CharmHadD02HHHHDst_2K2piWideMassDecision Hlt2CharmHadD02HHHH_2K2piDecision Hlt2CharmHadD02HHHH_2K2piWideMassDecision Hlt2CharmHadD02HHHHDst_3KpiDecision Hlt2CharmHadD02HHHHDst_3KpiWideMassDecision Hlt2CharmHadD02HHHH_3KpiDecision Hlt2CharmHadD02HHHH_3KpiWideMassDecision Hlt2CharmSemilepD02PiPiMuMuDecision Hlt2CharmSemilepD02KKMuMuDecision Hlt2CharmSemilepD02KPiMuMuDecision Hlt2ErrorEventDecision Hlt2GlobalDecision 2016 data, MagDown, TCK 0x1138160E L0 (17 lines) L0B1gasDecision L0B2gasDecision L0CALODecision L0DiEM,lowMultDecision L0DiHadron,lowMultDecision L0DiMuonDecision L0DiMuon,lowMultDecision L0ElectronDecision L0Electron,lowMultDecision L0HadronDecision L0JetElDecision L0JetPhDecision L0MuonDecision L0Muon,lowMultDecision L0MuonEWDecision L0PhotonDecision L0Photon,lowMultDecision HLT 1 (57 lines) Hlt1TrackMVADecision Hlt1TwoTrackMVADecision Hlt1TrackMVALooseDecision Hlt1TwoTrackMVALooseDecision Hlt1TrackMuonDecision Hlt1TrackMuonMVADecision Hlt1DiMuonHighMassDecision Hlt1DiMuonLowMassDecision Hlt1SingleMuonHighPTDecision Hlt1DiMuonNoL0Decision Hlt1B2GammaGammaDecision Hlt1B2HH_LTUNB_KKDecision Hlt1B2HH_LTUNB_KPiDecision Hlt1B2HH_LTUNB_PiPiDecision Hlt1B2PhiGamma_LTUNBDecision Hlt1B2PhiPhi_LTUNBDecision Hlt1BeamGasBeam1Decision Hlt1BeamGasBeam1VeloOpenDecision Hlt1BeamGasBeam2Decision Hlt1BeamGasBeam2VeloOpenDecision Hlt1BeamGasHighRhoVerticesDecision Hlt1Bottomonium2KstarKstarDecision Hlt1Bottomonium2PhiPhiDecision Hlt1CalibHighPTLowMultTrksDecision Hlt1CalibMuonAlignJpsiDecision Hlt1CalibRICHMirrorRICH1Decision Hlt1CalibRICHMirrorRICH2Decision Hlt1CalibTrackingKKDecision Hlt1CalibTrackingKPiDecision Hlt1CalibTrackingKPiDetachedDecision Hlt1CalibTrackingPiPiDecision Hlt1DiMuonNoIPDecision Hlt1DiProtonDecision Hlt1DiProtonLowMultDecision Hlt1IncPhiDecision Hlt1L0AnyDecision Hlt1L0AnyNoSPDDecision Hlt1LowMultMaxVeloAndHerschelDecision Hlt1LowMultMaxVeloCutDecision Hlt1LowMultMuonDecision Hlt1LowMultPassThroughDecision Hlt1LowMultVeloAndHerschel_HadronsDecision Hlt1LowMultVeloAndHerschel_LeptonsDecision Hlt1LowMultVeloCut_HadronsDecision Hlt1LowMultVeloCut_LeptonsDecision Hlt1LumiDecision Hlt1MBNoBiasDecision Hlt1MultiDiMuonNoIPDecision Hlt1MultiMuonNoL0Decision Hlt1NoBiasNonBeamBeamDecision Hlt1ODINTechnicalDecision Hlt1SingleElectronNoIPDecision Hlt1SingleMuonNoIPDecision Hlt1Tell1ErrorDecision Hlt1VeloClosingMicroBiasDecision Hlt1ErrorEventDecision Hlt1GlobalDecision HLT 2 TCKsh can no longer extract HLT 2 line info for run 2. Please refer to the relevant part of the HLT project for all HLT 2 lines.","title":"Trigger lines"},{"location":"data/comparison/trigger_lines/#2012-data-magdown-tck-0x990042","text":"L0, HLT 1 and 2 lines are extracted with TCKsh . See here for more info.","title":"2012 data, MagDown, TCK 0x990042"},{"location":"data/comparison/trigger_lines/#l0-24-lines","text":"L0B1gasDecision L0B2gasDecision L0CALODecision L0DiEM,lowMultDecision L0DiHadron,lowMultDecision L0DiMuonDecision L0DiMuon,lowMultDecision L0DiMuonNoSPDDecision L0ElectronDecision L0Electron,lowMultDecision L0ElectronHiDecision L0ElectronNoSPDDecision L0HadronDecision L0HadronNoSPDDecision L0HighSumETJetDecision L0MUON,minbiasDecision L0MuonDecision L0Muon,lowMultDecision L0MuonNoSPDDecision L0NoPVFlagDecision L0PhotonDecision L0Photon,lowMultDecision L0PhotonHiDecision L0PhotonNoSPDDecision","title":"L0 (24 lines)"},{"location":"data/comparison/trigger_lines/#hlt-1-33-lines","text":"Hlt1TrackAllL0TightDecision Hlt1TrackMuonDecision Hlt1TrackPhotonDecision Hlt1TrackForwardPassThroughDecision Hlt1TrackForwardPassThroughLooseDecision Hlt1LumiDecision Hlt1LumiMidBeamCrossingDecision Hlt1MBNoBiasDecision Hlt1CharmCalibrationNoBiasDecision Hlt1MBMicroBiasVeloDecision Hlt1MBMicroBiasTStationDecision Hlt1L0AnyDecision Hlt1L0AnyNoSPDDecision Hlt1L0HighSumETJetDecision Hlt1NoPVPassThroughDecision Hlt1DiProtonDecision Hlt1DiProtonLowMultDecision Hlt1BeamGasNoBeamBeam1Decision Hlt1BeamGasNoBeamBeam2Decision Hlt1BeamGasBeam1Decision Hlt1BeamGasBeam2Decision Hlt1BeamGasCrossingEnhancedBeam1Decision Hlt1BeamGasCrossingEnhancedBeam2Decision Hlt1BeamGasCrossingForcedRecoDecision Hlt1BeamGasCrossingForcedRecoFullZDecision Hlt1BeamGasHighRhoVerticesDecision Hlt1ODINTechnicalDecision Hlt1Tell1ErrorDecision Hlt1VeloClosingMicroBiasDecision Hlt1VertexDisplVertexDecision Hlt1BeamGasCrossingParasiticDecision Hlt1ErrorEventDecision Hlt1GlobalDecision","title":"HLT 1 (33 lines)"},{"location":"data/comparison/trigger_lines/#hlt-2-33-lines","text":"Hlt2LambdaC_LambdaC2Lambda0LLKDecision Hlt2LambdaC_LambdaC2Lambda0DDPiDecision Hlt2LambdaC_LambdaC2Lambda0DDKDecision Hlt2RadiativeTopoTrackDecision Hlt2RadiativeTopoPhotonDecision Hlt2B2HHPi0_MergedDecision Hlt2CharmHadD2HHHDecision Hlt2CharmHadD2HHHWideMassDecision Hlt2CharmHadD02HHHHDst_4piDecision Hlt2CharmHadD02HHHHDst_4piWideMassDecision Hlt2CharmHadD02HHHH_4piDecision Hlt2CharmHadD02HHHH_4piWideMassDecision Hlt2CharmHadD02HHHHDst_K3piDecision Hlt2CharmHadD02HHHHDst_K3piWideMassDecision Hlt2CharmHadD02HHHH_K3piDecision Hlt2CharmHadD02HHHH_K3piWideMassDecision Hlt2CharmHadD02HHHHDst_KKpipiDecision Hlt2CharmHadD02HHHHDst_KKpipiWideMassDecision Hlt2CharmHadD02HHHH_KKpipiDecision Hlt2CharmHadD02HHHH_KKpipiWideMassDecision Hlt2CharmHadD02HHHHDst_2K2piDecision Hlt2CharmHadD02HHHHDst_2K2piWideMassDecision Hlt2CharmHadD02HHHH_2K2piDecision Hlt2CharmHadD02HHHH_2K2piWideMassDecision Hlt2CharmHadD02HHHHDst_3KpiDecision Hlt2CharmHadD02HHHHDst_3KpiWideMassDecision Hlt2CharmHadD02HHHH_3KpiDecision Hlt2CharmHadD02HHHH_3KpiWideMassDecision Hlt2CharmSemilepD02PiPiMuMuDecision Hlt2CharmSemilepD02KKMuMuDecision Hlt2CharmSemilepD02KPiMuMuDecision Hlt2ErrorEventDecision Hlt2GlobalDecision","title":"HLT 2 (33 lines)"},{"location":"data/comparison/trigger_lines/#2016-data-magdown-tck-0x1138160e","text":"","title":"2016 data, MagDown, TCK 0x1138160E"},{"location":"data/comparison/trigger_lines/#l0-17-lines","text":"L0B1gasDecision L0B2gasDecision L0CALODecision L0DiEM,lowMultDecision L0DiHadron,lowMultDecision L0DiMuonDecision L0DiMuon,lowMultDecision L0ElectronDecision L0Electron,lowMultDecision L0HadronDecision L0JetElDecision L0JetPhDecision L0MuonDecision L0Muon,lowMultDecision L0MuonEWDecision L0PhotonDecision L0Photon,lowMultDecision","title":"L0 (17 lines)"},{"location":"data/comparison/trigger_lines/#hlt-1-57-lines","text":"Hlt1TrackMVADecision Hlt1TwoTrackMVADecision Hlt1TrackMVALooseDecision Hlt1TwoTrackMVALooseDecision Hlt1TrackMuonDecision Hlt1TrackMuonMVADecision Hlt1DiMuonHighMassDecision Hlt1DiMuonLowMassDecision Hlt1SingleMuonHighPTDecision Hlt1DiMuonNoL0Decision Hlt1B2GammaGammaDecision Hlt1B2HH_LTUNB_KKDecision Hlt1B2HH_LTUNB_KPiDecision Hlt1B2HH_LTUNB_PiPiDecision Hlt1B2PhiGamma_LTUNBDecision Hlt1B2PhiPhi_LTUNBDecision Hlt1BeamGasBeam1Decision Hlt1BeamGasBeam1VeloOpenDecision Hlt1BeamGasBeam2Decision Hlt1BeamGasBeam2VeloOpenDecision Hlt1BeamGasHighRhoVerticesDecision Hlt1Bottomonium2KstarKstarDecision Hlt1Bottomonium2PhiPhiDecision Hlt1CalibHighPTLowMultTrksDecision Hlt1CalibMuonAlignJpsiDecision Hlt1CalibRICHMirrorRICH1Decision Hlt1CalibRICHMirrorRICH2Decision Hlt1CalibTrackingKKDecision Hlt1CalibTrackingKPiDecision Hlt1CalibTrackingKPiDetachedDecision Hlt1CalibTrackingPiPiDecision Hlt1DiMuonNoIPDecision Hlt1DiProtonDecision Hlt1DiProtonLowMultDecision Hlt1IncPhiDecision Hlt1L0AnyDecision Hlt1L0AnyNoSPDDecision Hlt1LowMultMaxVeloAndHerschelDecision Hlt1LowMultMaxVeloCutDecision Hlt1LowMultMuonDecision Hlt1LowMultPassThroughDecision Hlt1LowMultVeloAndHerschel_HadronsDecision Hlt1LowMultVeloAndHerschel_LeptonsDecision Hlt1LowMultVeloCut_HadronsDecision Hlt1LowMultVeloCut_LeptonsDecision Hlt1LumiDecision Hlt1MBNoBiasDecision Hlt1MultiDiMuonNoIPDecision Hlt1MultiMuonNoL0Decision Hlt1NoBiasNonBeamBeamDecision Hlt1ODINTechnicalDecision Hlt1SingleElectronNoIPDecision Hlt1SingleMuonNoIPDecision Hlt1Tell1ErrorDecision Hlt1VeloClosingMicroBiasDecision Hlt1ErrorEventDecision Hlt1GlobalDecision","title":"HLT 1 (57 lines)"},{"location":"data/comparison/trigger_lines/#hlt-2","text":"TCKsh can no longer extract HLT 2 line info for run 2. Please refer to the relevant part of the HLT project for all HLT 2 lines.","title":"HLT 2"},{"location":"data/comparison/RDst_step2_cuts_validation/RDst_step2_cuts_validation/","text":"\\(R(D^*)\\) run 1 step-2 cuts validation We took Phoebe's \\(D^*\\) step-2 ntuple located at: ntuples/ref-rdx-run1/Dst-mix/Dst--20_07_02--mix--all--2011-2012--md-mu--phoebe.root and extracted the ISO sample as a reference. Then, we apply most step-2 cuts to our newly generated 2011 MagDown ntuple: ntuples/0.9.2-2011_production/Dst_D0--20_10_12--std--LHCb_Collision11_Beam3500GeV-VeloClosed-MagDown_Real_Data_Reco14_Stripping21r1_90000000_SEMILEPTONIC.DST.root for comparison. There are ~79k candidates in Phoebe's, ~72k in ours. This is a mystery to be solved. el difference [GeV] difference (normalized) distributions [GeV] mm2 difference [GeV 2 ] difference (normalized) distributions [GeV 2 ]","title":"R(D*) run 1 step-2 cuts validation"},{"location":"data/comparison/RDst_step2_cuts_validation/RDst_step2_cuts_validation/#rd-run-1-step-2-cuts-validation","text":"We took Phoebe's \\(D^*\\) step-2 ntuple located at: ntuples/ref-rdx-run1/Dst-mix/Dst--20_07_02--mix--all--2011-2012--md-mu--phoebe.root and extracted the ISO sample as a reference. Then, we apply most step-2 cuts to our newly generated 2011 MagDown ntuple: ntuples/0.9.2-2011_production/Dst_D0--20_10_12--std--LHCb_Collision11_Beam3500GeV-VeloClosed-MagDown_Real_Data_Reco14_Stripping21r1_90000000_SEMILEPTONIC.DST.root for comparison. There are ~79k candidates in Phoebe's, ~72k in ours. This is a mystery to be solved.","title":"\\(R(D^*)\\) run 1 step-2 cuts validation"},{"location":"data/comparison/RDst_step2_cuts_validation/RDst_step2_cuts_validation/#el","text":"difference [GeV] difference (normalized) distributions [GeV]","title":"el"},{"location":"data/comparison/RDst_step2_cuts_validation/RDst_step2_cuts_validation/#mm2","text":"difference [GeV 2 ] difference (normalized) distributions [GeV 2 ]","title":"mm2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/","text":"\\(R(D^*)\\) variables, run 1 In general, we find the unique events 1 in both ntuples, then see if they occur in both ntuples, and find their: absolute difference normalized difference, with one of them used as normalization Comparison between data The files being compared are, located in ntuples/run1-Dst : ntuples/ref-rdx-run1/Dst-std/Dst--19_09_05--std--data--2012--md--phoebe.root (Phoebe) ntuples/pre-0.9.0/Dst-std/Dst--19_09_05--std--data--2012--md.root (Yipeng) Note Phoebe used this DaVinci script to generate her ntuple, with DaVinci v36r1p2 . We used our script 2 , and DaVinci v42r8p1 . D0_P difference [MeV] difference (normalized) Dst_2010_minus_P difference [MeV] difference (normalized) Kplus_P difference [MeV] difference (normalized) Kplus_PX difference [MeV] difference (normalized) Kplus_PY difference [MeV] difference (normalized) Kplus_PZ difference [MeV] difference (normalized) muplus_P difference [MeV] difference (normalized) muplus_PX difference [MeV] difference (normalized) muplus_PY difference [MeV] difference (normalized) muplus_PZ difference [MeV] difference (normalized) Y_ISOLATION_BDT difference (DL) difference (normalized) Y_ISOLATION_BDT2 difference (DL) difference (normalized) Y_ISOLATION_BDT3 difference (DL) difference (normalized) Y_ENDVERTEX_X difference [mm] difference (normalized) distributions [mm] Y_ENDVERTEX_Y difference [mm] difference (normalized) distributions [mm] Y_ENDVERTEX_Z difference [mm] difference (normalized) distributions [mm] Y_OWNPV_X difference [mm] difference (normalized) distributions [mm] Y_OWNPV_Y difference [mm] difference (normalized) distributions [mm] Y_OWNPV_Z difference [mm] difference (normalized) distributions [mm] Comparison between DaVinci v36r1p2 and v42r8p1 Files used: run1-rdx/samples/Dst--19_07_12--std--data--2012--md--dv36-subset.root run1-rdx/samples/Dst--19_07_12--std--data--2012--md--dv42-subset.root D0_P difference [MeV] difference (normalized) Dst_2010_minus_P difference [MeV] difference (normalized) Kplus_P difference [MeV] difference (normalized) Kplus_PX difference [MeV] difference (normalized) Kplus_PY difference [MeV] difference (normalized) Kplus_PZ difference [MeV] difference (normalized) muplus_P difference [MeV] difference (normalized) muplus_PX difference [MeV] difference (normalized) muplus_PY difference [MeV] difference (normalized) muplus_PZ difference [MeV] difference (normalized) Y_ISOLATION_BDT difference (DL) difference (normalized) Y_ISOLATION_BDT2 difference (DL) difference (normalized) Y_ISOLATION_BDT3 difference (DL) difference (normalized) Y_ISOLATION_Type v36r1p2 v42r8p1 Y_ISOLATION_Type2 v36r1p2 v42r8p1 Y_ISOLATION_Type3 v36r1p2 v42r8p1 Y_ISOLATION_Type4 v36r1p2 v42r8p1 Comparison between DaVinci v36r1p2 and v42r8p1 , without VELO pions Files used: run1-rdx/samples/Dst--19_09_11--std--data--2012--md--dv36-subset-no_velo_pions.root run1-rdx/samples/Dst--19_09_11--std--data--2012--md--dv42-subset-no_velo_pions.root Y_ISOLATION_BDT difference (DL) difference (normalized) Y_ISOLATION_BDT2 difference (DL) difference (normalized) Y_ISOLATION_BDT3 difference (DL) difference (normalized) Y_ISOLATION_Type Raw v36r1p2 v42r8p1 Matched diff Note These are the difference in track type for momentum-matched tracks in events matched by the event and run numbers. The momentum matching is performed for each track \\(i = 1,2,3\\) in release r= v36 , v42 by finding a track in the opposite release for any index \\(1\\) , \\(2\\) , or \\(3\\) whose difference in every 4-momentum component is smaller than 10 eV. The version should be interpreted in this way: v36r1p2 means v42 track type is used as a reference, and the difference is calculated with: \\(TrackType_{v42} - TrackType_{v36}\\) . v36r1p2 v42r8p1 Y_ISOLATION_Type2 Raw v36r1p2 v42r8p1 Matched diff v36r1p2 v42r8p1 Y_ISOLATION_Type3 Raw v36r1p2 v42r8p1 Matched diff v36r1p2 v42r8p1 Y_ISOLATION_Type4 v36r1p2 v42r8p1 ISOLATION_TRACK1 Note ISOLATION_TRACK{1,2,3} represent the best 3 tracks selected by the BDT. A value of \\(1\\) represents ISOLATION_TRACK1 . \\(2\\) and \\(3\\) are interpreted in the same way. A value of \\(0\\) indicates no match at all. A value of \\(-2\\) indicates no actual track exists, and is only assigned when the BDT score is \\(-2\\) . The version should be interpreted in this way: v36r1p2 means matching a v36 track with all 3 v42 tracks with the same UID. The v42 tracks act as references. Also, for track \\(i\\) , if the match is 100%, then all datapoints should be at \\(i\\) . v36r1p2 v42r8p1 ISOLATION_TRACK2 v36r1p2 v42r8p1 ISOLATION_TRACK3 v36r1p2 v42r8p1 Comparison between DaVinci v36r1p2 and v42r8p1 , without refitting Files used: run1-rdx/samples/Dst--19_10_04--std--data--2012--md--dv36-subset-no_refit.root run1-rdx/samples/Dst--19_09_26--std--data--2012--md--dv42-subset-no_refit.root D0_P difference [MeV] difference (normalized) Dst_2010_minus_P difference [MeV] difference (normalized) Kplus_P difference [MeV] difference (normalized) Kplus_PX difference [MeV] difference (normalized) Kplus_PY difference [MeV] difference (normalized) Kplus_PZ difference [MeV] difference (normalized) muplus_P difference [MeV] difference (normalized) muplus_PX difference [MeV] difference (normalized) muplus_PY difference [MeV] difference (normalized) muplus_PZ difference [MeV] difference (normalized) Y_ISOLATION_BDT difference (DL) difference (normalized) Y_ISOLATION_BDT2 difference (DL) difference (normalized) Y_ISOLATION_BDT3 difference (DL) difference (normalized) Y_ISOLATION_Type Raw v36r1p2 v42r8p1 Matched diff v36r1p2 v42r8p1 Y_ISOLATION_Type2 Raw v36r1p2 v42r8p1 Matched diff v36r1p2 v42r8p1 Y_ISOLATION_Type3 Raw v36r1p2 v42r8p1 Matched diff v36r1p2 v42r8p1 Y_ISOLATION_Type4 v36r1p2 v42r8p1 ISOLATION_TRACK1 v36r1p2 v42r8p1 ISOLATION_TRACK2 v36r1p2 v42r8p1 ISOLATION_TRACK3 v36r1p2 v42r8p1 TRACK_TYPE1_CHI2 v36r1p2 v42r8p1 TRACK_TYPE3_CHI2 v36r1p2 v42r8p1 TRACK_TYPE4_CHI2 v36r1p2 v42r8p1 Track type difference vs. BDT score difference v36r1p2 v42r8p1 Comparison between DaVinci v36r1p2 and v45r3 , without refitting Files used: run1-rdx/samples/Dst--19_10_04--std--data--2012--md--dv36-subset-no_refit.root run1-rdx/samples/Dst--19_11_14--std--data--2012--md--dv45-subset-no_refit.root D0_P difference [MeV] difference (normalized) Dst_2010_minus_P difference [MeV] difference (normalized) Kplus_P difference [MeV] difference (normalized) Kplus_PX difference [MeV] difference (normalized) Kplus_PY difference [MeV] difference (normalized) Kplus_PZ difference [MeV] difference (normalized) muplus_P difference [MeV] difference (normalized) muplus_PX difference [MeV] difference (normalized) muplus_PY difference [MeV] difference (normalized) muplus_PZ difference [MeV] difference (normalized) Y_ISOLATION_BDT difference (DL) difference (normalized) Y_ISOLATION_BDT2 difference (DL) difference (normalized) Y_ISOLATION_BDT3 difference (DL) difference (normalized) Y_ISOLATION_Type Raw v36r1p2 v45r3 Matched diff v36r1p2 v45r3 Y_ISOLATION_Type2 Raw v36r1p2 v45r3 Matched diff v36r1p2 v45r3 Y_ISOLATION_Type3 Raw v36r1p2 v45r3 Matched diff v36r1p2 v45r3 Y_ISOLATION_Type4 v36r1p2 v45r3 ISOLATION_TRACK1 v36r1p2 v45r3 ISOLATION_TRACK2 v36r1p2 v45r3 ISOLATION_TRACK3 v36r1p2 v45r3 TRACK_TYPE1_CHI2 v36r1p2 v45r3 TRACK_TYPE3_CHI2 v36r1p2 v45r3 TRACK_TYPE4_CHI2 v36r1p2 v45r3 Track type difference vs. BDT score difference v36r1p2 v45r3 Comparison between DaVinci v42r8p1 and v45r3 , without refitting Files used: run1-rdx/samples/Dst--19_09_26--std--data--2012--md--dv42-subset-no_refit.root run1-rdx/samples/Dst--19_11_14--std--data--2012--md--dv45-subset-no_refit.root D0_P difference [MeV] difference (normalized) Dst_2010_minus_P difference [MeV] difference (normalized) Kplus_P difference [MeV] difference (normalized) Kplus_PX difference [MeV] difference (normalized) Kplus_PY difference [MeV] difference (normalized) Kplus_PZ difference [MeV] difference (normalized) muplus_P difference [MeV] difference (normalized) muplus_PX difference [MeV] difference (normalized) muplus_PY difference [MeV] difference (normalized) muplus_PZ difference [MeV] difference (normalized) Y_ISOLATION_BDT difference (DL) difference (normalized) Y_ISOLATION_BDT2 difference (DL) difference (normalized) Y_ISOLATION_BDT3 difference (DL) difference (normalized) Y_ISOLATION_Type Raw v42r8p1 v45r3 Matched diff v42r8p1 v45r3 Y_ISOLATION_Type2 Raw v42r8p1 v45r3 Matched diff v42r8p1 v45r3 Y_ISOLATION_Type3 Raw v42r8p1 v45r3 Matched diff v42r8p1 v45r3 Y_ISOLATION_Type4 v42r8p1 v45r3 ISOLATION_TRACK1 v42r8p1 v45r3 ISOLATION_TRACK2 v42r8p1 v45r3 ISOLATION_TRACK3 v42r8p1 v45r3 TRACK_TYPE1_CHI2 v42r8p1 v45r3 TRACK_TYPE3_CHI2 v42r8p1 v45r3 TRACK_TYPE4_CHI2 v42r8p1 v45r3 Track type difference vs. BDT score difference v42r8p1 v45r3 Comparison between DaVinci v36r1p2 and v42r8p1 , without refitting nor momentum rescaling Files used: run1-rdx/samples/Dst--19_10_11--std--data--2012--md--dv36-subset-no_refit_no_rescale.root run1-rdx/samples/Dst--19_10_11--std--data--2012--md--dv42-subset-no_refit_no_rescale.root D0_P difference [MeV] difference (normalized) Dst_2010_minus_P difference [MeV] difference (normalized) Y_ISOLATION_Type Raw v36r1p2 v42r8p1 Matched diff v36r1p2 v42r8p1 Y_ISOLATION_Type2 Raw v36r1p2 v42r8p1 Matched diff v36r1p2 v42r8p1 Y_ISOLATION_Type3 Raw v36r1p2 v42r8p1 Matched diff v36r1p2 v42r8p1 Y_ISOLATION_Type4 v36r1p2 v42r8p1 ISOLATION_TRACK1 v36r1p2 v42r8p1 ISOLATION_TRACK2 v36r1p2 v42r8p1 ISOLATION_TRACK3 v36r1p2 v42r8p1 TRACK_TYPE1_CHI2 v36r1p2 v42r8p1 TRACK_TYPE3_CHI2 v36r1p2 v42r8p1 TRACK_TYPE4_CHI2 v36r1p2 v42r8p1 Track type difference vs. BDT score difference v36r1p2 v42r8p1 Comparison between MC (Pythia 6) Files used, located in run1-rdx/ntuples/mc : ntuples/ref-rdx-run1/Dst-mc/Dst--19_09_26--mc--Bd2DstTauNu--2012--md--py6-phoebe.root ntuples/pre-0.9.0/Dst-mc/Dst--19_09_26--mc--Bd2DstTauNu--2012--md--py6-sim08a.root D0_P difference [MeV] difference (normalized) Kplus_P difference [MeV] difference (normalized) Y_ISOLATION_BDT difference [MeV] difference (normalized) Y_ISOLATION_BDT2 difference [MeV] difference (normalized) Y_ISOLATION_BDT3 difference [MeV] difference (normalized) Typically by the combination of runNumber and eventNumber . \u21a9 Based on Phoebe's original script. \u21a9","title":"R(D*) variables, run 1"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#rd-variables-run-1","text":"In general, we find the unique events 1 in both ntuples, then see if they occur in both ntuples, and find their: absolute difference normalized difference, with one of them used as normalization","title":"\\(R(D^*)\\) variables, run 1"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#comparison-between-data","text":"The files being compared are, located in ntuples/run1-Dst : ntuples/ref-rdx-run1/Dst-std/Dst--19_09_05--std--data--2012--md--phoebe.root (Phoebe) ntuples/pre-0.9.0/Dst-std/Dst--19_09_05--std--data--2012--md.root (Yipeng) Note Phoebe used this DaVinci script to generate her ntuple, with DaVinci v36r1p2 . We used our script 2 , and DaVinci v42r8p1 .","title":"Comparison between data"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#d0_p","text":"difference [MeV] difference (normalized)","title":"D0_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#dst_2010_minus_p","text":"difference [MeV] difference (normalized)","title":"Dst_2010_minus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_p","text":"difference [MeV] difference (normalized)","title":"Kplus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_px","text":"difference [MeV] difference (normalized)","title":"Kplus_PX"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_py","text":"difference [MeV] difference (normalized)","title":"Kplus_PY"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_pz","text":"difference [MeV] difference (normalized)","title":"Kplus_PZ"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_p","text":"difference [MeV] difference (normalized)","title":"muplus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_px","text":"difference [MeV] difference (normalized)","title":"muplus_PX"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_py","text":"difference [MeV] difference (normalized)","title":"muplus_PY"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_pz","text":"difference [MeV] difference (normalized)","title":"muplus_PZ"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt2","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt3","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_endvertex_x","text":"difference [mm] difference (normalized) distributions [mm]","title":"Y_ENDVERTEX_X"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_endvertex_y","text":"difference [mm] difference (normalized) distributions [mm]","title":"Y_ENDVERTEX_Y"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_endvertex_z","text":"difference [mm] difference (normalized) distributions [mm]","title":"Y_ENDVERTEX_Z"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_ownpv_x","text":"difference [mm] difference (normalized) distributions [mm]","title":"Y_OWNPV_X"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_ownpv_y","text":"difference [mm] difference (normalized) distributions [mm]","title":"Y_OWNPV_Y"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_ownpv_z","text":"difference [mm] difference (normalized) distributions [mm]","title":"Y_OWNPV_Z"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#comparison-between-davinci-v36r1p2-and-v42r8p1","text":"Files used: run1-rdx/samples/Dst--19_07_12--std--data--2012--md--dv36-subset.root run1-rdx/samples/Dst--19_07_12--std--data--2012--md--dv42-subset.root","title":"Comparison between DaVinci v36r1p2 and v42r8p1"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#d0_p_1","text":"difference [MeV] difference (normalized)","title":"D0_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#dst_2010_minus_p_1","text":"difference [MeV] difference (normalized)","title":"Dst_2010_minus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_p_1","text":"difference [MeV] difference (normalized)","title":"Kplus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_px_1","text":"difference [MeV] difference (normalized)","title":"Kplus_PX"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_py_1","text":"difference [MeV] difference (normalized)","title":"Kplus_PY"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_pz_1","text":"difference [MeV] difference (normalized)","title":"Kplus_PZ"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_p_1","text":"difference [MeV] difference (normalized)","title":"muplus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_px_1","text":"difference [MeV] difference (normalized)","title":"muplus_PX"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_py_1","text":"difference [MeV] difference (normalized)","title":"muplus_PY"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_pz_1","text":"difference [MeV] difference (normalized)","title":"muplus_PZ"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt_1","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt2_1","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt3_1","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type","text":"v36r1p2 v42r8p1","title":"Y_ISOLATION_Type"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type2","text":"v36r1p2 v42r8p1","title":"Y_ISOLATION_Type2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type3","text":"v36r1p2 v42r8p1","title":"Y_ISOLATION_Type3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type4","text":"v36r1p2 v42r8p1","title":"Y_ISOLATION_Type4"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#comparison-between-davinci-v36r1p2-and-v42r8p1-without-velo-pions","text":"Files used: run1-rdx/samples/Dst--19_09_11--std--data--2012--md--dv36-subset-no_velo_pions.root run1-rdx/samples/Dst--19_09_11--std--data--2012--md--dv42-subset-no_velo_pions.root","title":"Comparison between DaVinci v36r1p2 and v42r8p1, without VELO pions"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt_2","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt2_2","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt3_2","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type_1","text":"","title":"Y_ISOLATION_Type"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw","text":"v36r1p2 v42r8p1","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff","text":"Note These are the difference in track type for momentum-matched tracks in events matched by the event and run numbers. The momentum matching is performed for each track \\(i = 1,2,3\\) in release r= v36 , v42 by finding a track in the opposite release for any index \\(1\\) , \\(2\\) , or \\(3\\) whose difference in every 4-momentum component is smaller than 10 eV. The version should be interpreted in this way: v36r1p2 means v42 track type is used as a reference, and the difference is calculated with: \\(TrackType_{v42} - TrackType_{v36}\\) . v36r1p2 v42r8p1","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type2_1","text":"","title":"Y_ISOLATION_Type2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_1","text":"v36r1p2 v42r8p1","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_1","text":"v36r1p2 v42r8p1","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type3_1","text":"","title":"Y_ISOLATION_Type3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_2","text":"v36r1p2 v42r8p1","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_2","text":"v36r1p2 v42r8p1","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type4_1","text":"v36r1p2 v42r8p1","title":"Y_ISOLATION_Type4"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track1","text":"Note ISOLATION_TRACK{1,2,3} represent the best 3 tracks selected by the BDT. A value of \\(1\\) represents ISOLATION_TRACK1 . \\(2\\) and \\(3\\) are interpreted in the same way. A value of \\(0\\) indicates no match at all. A value of \\(-2\\) indicates no actual track exists, and is only assigned when the BDT score is \\(-2\\) . The version should be interpreted in this way: v36r1p2 means matching a v36 track with all 3 v42 tracks with the same UID. The v42 tracks act as references. Also, for track \\(i\\) , if the match is 100%, then all datapoints should be at \\(i\\) . v36r1p2 v42r8p1","title":"ISOLATION_TRACK1"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track2","text":"v36r1p2 v42r8p1","title":"ISOLATION_TRACK2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track3","text":"v36r1p2 v42r8p1","title":"ISOLATION_TRACK3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#comparison-between-davinci-v36r1p2-and-v42r8p1-without-refitting","text":"Files used: run1-rdx/samples/Dst--19_10_04--std--data--2012--md--dv36-subset-no_refit.root run1-rdx/samples/Dst--19_09_26--std--data--2012--md--dv42-subset-no_refit.root","title":"Comparison between DaVinci v36r1p2 and v42r8p1, without refitting"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#d0_p_2","text":"difference [MeV] difference (normalized)","title":"D0_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#dst_2010_minus_p_2","text":"difference [MeV] difference (normalized)","title":"Dst_2010_minus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_p_2","text":"difference [MeV] difference (normalized)","title":"Kplus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_px_2","text":"difference [MeV] difference (normalized)","title":"Kplus_PX"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_py_2","text":"difference [MeV] difference (normalized)","title":"Kplus_PY"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_pz_2","text":"difference [MeV] difference (normalized)","title":"Kplus_PZ"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_p_2","text":"difference [MeV] difference (normalized)","title":"muplus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_px_2","text":"difference [MeV] difference (normalized)","title":"muplus_PX"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_py_2","text":"difference [MeV] difference (normalized)","title":"muplus_PY"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_pz_2","text":"difference [MeV] difference (normalized)","title":"muplus_PZ"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt_3","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt2_3","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt3_3","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type_2","text":"","title":"Y_ISOLATION_Type"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_3","text":"v36r1p2 v42r8p1","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_3","text":"v36r1p2 v42r8p1","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type2_2","text":"","title":"Y_ISOLATION_Type2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_4","text":"v36r1p2 v42r8p1","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_4","text":"v36r1p2 v42r8p1","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type3_2","text":"","title":"Y_ISOLATION_Type3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_5","text":"v36r1p2 v42r8p1","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_5","text":"v36r1p2 v42r8p1","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type4_2","text":"v36r1p2 v42r8p1","title":"Y_ISOLATION_Type4"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track1_1","text":"v36r1p2 v42r8p1","title":"ISOLATION_TRACK1"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track2_1","text":"v36r1p2 v42r8p1","title":"ISOLATION_TRACK2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track3_1","text":"v36r1p2 v42r8p1","title":"ISOLATION_TRACK3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type1_chi2","text":"v36r1p2 v42r8p1","title":"TRACK_TYPE1_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type3_chi2","text":"v36r1p2 v42r8p1","title":"TRACK_TYPE3_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type4_chi2","text":"v36r1p2 v42r8p1","title":"TRACK_TYPE4_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track-type-difference-vs-bdt-score-difference","text":"v36r1p2 v42r8p1","title":"Track type difference vs. BDT score difference"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#comparison-between-davinci-v36r1p2-and-v45r3-without-refitting","text":"Files used: run1-rdx/samples/Dst--19_10_04--std--data--2012--md--dv36-subset-no_refit.root run1-rdx/samples/Dst--19_11_14--std--data--2012--md--dv45-subset-no_refit.root","title":"Comparison between DaVinci v36r1p2 and v45r3, without refitting"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#d0_p_3","text":"difference [MeV] difference (normalized)","title":"D0_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#dst_2010_minus_p_3","text":"difference [MeV] difference (normalized)","title":"Dst_2010_minus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_p_3","text":"difference [MeV] difference (normalized)","title":"Kplus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_px_3","text":"difference [MeV] difference (normalized)","title":"Kplus_PX"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_py_3","text":"difference [MeV] difference (normalized)","title":"Kplus_PY"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_pz_3","text":"difference [MeV] difference (normalized)","title":"Kplus_PZ"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_p_3","text":"difference [MeV] difference (normalized)","title":"muplus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_px_3","text":"difference [MeV] difference (normalized)","title":"muplus_PX"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_py_3","text":"difference [MeV] difference (normalized)","title":"muplus_PY"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_pz_3","text":"difference [MeV] difference (normalized)","title":"muplus_PZ"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt_4","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt2_4","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt3_4","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type_3","text":"","title":"Y_ISOLATION_Type"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_6","text":"v36r1p2 v45r3","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_6","text":"v36r1p2 v45r3","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type2_3","text":"","title":"Y_ISOLATION_Type2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_7","text":"v36r1p2 v45r3","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_7","text":"v36r1p2 v45r3","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type3_3","text":"","title":"Y_ISOLATION_Type3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_8","text":"v36r1p2 v45r3","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_8","text":"v36r1p2 v45r3","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type4_3","text":"v36r1p2 v45r3","title":"Y_ISOLATION_Type4"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track1_2","text":"v36r1p2 v45r3","title":"ISOLATION_TRACK1"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track2_2","text":"v36r1p2 v45r3","title":"ISOLATION_TRACK2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track3_2","text":"v36r1p2 v45r3","title":"ISOLATION_TRACK3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type1_chi2_1","text":"v36r1p2 v45r3","title":"TRACK_TYPE1_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type3_chi2_1","text":"v36r1p2 v45r3","title":"TRACK_TYPE3_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type4_chi2_1","text":"v36r1p2 v45r3","title":"TRACK_TYPE4_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track-type-difference-vs-bdt-score-difference_1","text":"v36r1p2 v45r3","title":"Track type difference vs. BDT score difference"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#comparison-between-davinci-v42r8p1-and-v45r3-without-refitting","text":"Files used: run1-rdx/samples/Dst--19_09_26--std--data--2012--md--dv42-subset-no_refit.root run1-rdx/samples/Dst--19_11_14--std--data--2012--md--dv45-subset-no_refit.root","title":"Comparison between DaVinci v42r8p1 and v45r3, without refitting"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#d0_p_4","text":"difference [MeV] difference (normalized)","title":"D0_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#dst_2010_minus_p_4","text":"difference [MeV] difference (normalized)","title":"Dst_2010_minus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_p_4","text":"difference [MeV] difference (normalized)","title":"Kplus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_px_4","text":"difference [MeV] difference (normalized)","title":"Kplus_PX"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_py_4","text":"difference [MeV] difference (normalized)","title":"Kplus_PY"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_pz_4","text":"difference [MeV] difference (normalized)","title":"Kplus_PZ"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_p_4","text":"difference [MeV] difference (normalized)","title":"muplus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_px_4","text":"difference [MeV] difference (normalized)","title":"muplus_PX"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_py_4","text":"difference [MeV] difference (normalized)","title":"muplus_PY"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#muplus_pz_4","text":"difference [MeV] difference (normalized)","title":"muplus_PZ"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt_5","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt2_5","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt3_5","text":"difference (DL) difference (normalized)","title":"Y_ISOLATION_BDT3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type_4","text":"","title":"Y_ISOLATION_Type"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_9","text":"v42r8p1 v45r3","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_9","text":"v42r8p1 v45r3","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type2_4","text":"","title":"Y_ISOLATION_Type2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_10","text":"v42r8p1 v45r3","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_10","text":"v42r8p1 v45r3","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type3_4","text":"","title":"Y_ISOLATION_Type3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_11","text":"v42r8p1 v45r3","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_11","text":"v42r8p1 v45r3","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type4_4","text":"v42r8p1 v45r3","title":"Y_ISOLATION_Type4"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track1_3","text":"v42r8p1 v45r3","title":"ISOLATION_TRACK1"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track2_3","text":"v42r8p1 v45r3","title":"ISOLATION_TRACK2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track3_3","text":"v42r8p1 v45r3","title":"ISOLATION_TRACK3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type1_chi2_2","text":"v42r8p1 v45r3","title":"TRACK_TYPE1_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type3_chi2_2","text":"v42r8p1 v45r3","title":"TRACK_TYPE3_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type4_chi2_2","text":"v42r8p1 v45r3","title":"TRACK_TYPE4_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track-type-difference-vs-bdt-score-difference_2","text":"v42r8p1 v45r3","title":"Track type difference vs. BDT score difference"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#comparison-between-davinci-v36r1p2-and-v42r8p1-without-refitting-nor-momentum-rescaling","text":"Files used: run1-rdx/samples/Dst--19_10_11--std--data--2012--md--dv36-subset-no_refit_no_rescale.root run1-rdx/samples/Dst--19_10_11--std--data--2012--md--dv42-subset-no_refit_no_rescale.root","title":"Comparison between DaVinci v36r1p2 and v42r8p1, without refitting nor momentum rescaling"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#d0_p_5","text":"difference [MeV] difference (normalized)","title":"D0_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#dst_2010_minus_p_5","text":"difference [MeV] difference (normalized)","title":"Dst_2010_minus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type_5","text":"","title":"Y_ISOLATION_Type"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_12","text":"v36r1p2 v42r8p1","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_12","text":"v36r1p2 v42r8p1","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type2_5","text":"","title":"Y_ISOLATION_Type2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_13","text":"v36r1p2 v42r8p1","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_13","text":"v36r1p2 v42r8p1","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type3_5","text":"","title":"Y_ISOLATION_Type3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#raw_14","text":"v36r1p2 v42r8p1","title":"Raw"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#matched-diff_14","text":"v36r1p2 v42r8p1","title":"Matched diff"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_type4_5","text":"v36r1p2 v42r8p1","title":"Y_ISOLATION_Type4"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track1_4","text":"v36r1p2 v42r8p1","title":"ISOLATION_TRACK1"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track2_4","text":"v36r1p2 v42r8p1","title":"ISOLATION_TRACK2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#isolation_track3_4","text":"v36r1p2 v42r8p1","title":"ISOLATION_TRACK3"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type1_chi2_3","text":"v36r1p2 v42r8p1","title":"TRACK_TYPE1_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type3_chi2_3","text":"v36r1p2 v42r8p1","title":"TRACK_TYPE3_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track_type4_chi2_3","text":"v36r1p2 v42r8p1","title":"TRACK_TYPE4_CHI2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#track-type-difference-vs-bdt-score-difference_3","text":"v36r1p2 v42r8p1","title":"Track type difference vs. BDT score difference"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#comparison-between-mc-pythia-6","text":"Files used, located in run1-rdx/ntuples/mc : ntuples/ref-rdx-run1/Dst-mc/Dst--19_09_26--mc--Bd2DstTauNu--2012--md--py6-phoebe.root ntuples/pre-0.9.0/Dst-mc/Dst--19_09_26--mc--Bd2DstTauNu--2012--md--py6-sim08a.root","title":"Comparison between MC (Pythia 6)"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#d0_p_6","text":"difference [MeV] difference (normalized)","title":"D0_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#kplus_p_5","text":"difference [MeV] difference (normalized)","title":"Kplus_P"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt_6","text":"difference [MeV] difference (normalized)","title":"Y_ISOLATION_BDT"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt2_6","text":"difference [MeV] difference (normalized)","title":"Y_ISOLATION_BDT2"},{"location":"data/comparison/RDst_vars_run1/RDst_vars_run1/#y_isolation_bdt3_6","text":"difference [MeV] difference (normalized) Typically by the combination of runNumber and eventNumber . \u21a9 Based on Phoebe's original script. \u21a9","title":"Y_ISOLATION_BDT3"},{"location":"data/cutflows/RDX_run1_phoebe_vs_us/","text":"RDX run 1 validation: Phoebe vs us, 2011 MD Info The bold number with a link indicates that this number is consistent with a previous study, with the previous study linked. If a number is bold but w/o a link, it shares the link for the number to its left. \\(D^*\\) , right-sign, Phoebe step-1+1.5 vs us Note Before the slanted step-1.5 line, the numbers are from Phoebe's step-1. The * is considered immaterial For Phoebe's ntuple, we remove the VELO only slow \\(\\pi\\) For us, this is already removed at DaVinci level Info It is known that PID and isolation BDT values have changed between DaVinci versions Also, the vertexing has changed. This is manifested in the Offline \\(D^* \\mu\\) combo cuts. The cuts are defined in here . Notably, we have vertex \\(\\chi^2/dof\\) cuts, like b0_endvtx_chi2/b0_endvtx_ndof < 6.0 . Cut Phoebe us Phoebe \\(\\epsilon\\) us \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 208846 216987 - - - Select 2011 MD data 195535 216987 93.6 100.0 1.07 L0 189422 210166 96.9 96.9 1.00 Hlt1 185980 206226 98.2 98.1 1.00 Hlt2 183194 203010 98.5 98.4 1.00 \\(D^0\\) PID 178517 197740 97.4 97.4 1.00 Offline \\(D^0\\) cuts (no PID no mass window) 146240 160219 81.9 81.0 0.99 \\(\\mu\\) PID \\(\\mu\\) cut 146240 160219 100.0 100.0 1.00 Offline \\(\\mu\\) cuts (no PID) 138166 151326 94.5 94.4 1.00 Offline \\(D^* \\mu\\) combo cuts (no mass window) 137097 140528 99.2 92.9 0.94 \\(D^0\\) mass window 131579 134907 96.0 96.0 1.00 step-1.5 136645 134907 100.0 96.0 0.96 Fit variable range cuts 132754 131097 97.2 97.2 1.00 \\(\\mu\\) other PID cuts 126514 129735 95.3 99.0 1.04 \\(D^*\\) mass window 110017 112535 87.0 86.7 1.00 \\(B^0\\) mass window 110010 112528 100.0 100.0 1.00 \\(BDT_{iso} < 0.15\\) 78903 72628 71.7 64.5 0.90 ISO final 74301 - - - - \\(D^*\\) , wrong-sign \\(\\mu\\) , Phoebe step-1+1.5 vs us Cut Phoebe us Phoebe \\(\\epsilon\\) us \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 26705 31939 - - - Select 2011 MD data 24945 31939 93.4 100.0 1.07 L0 24120 30876 96.7 96.7 1.00 Hlt1 23451 30008 97.2 97.2 1.00 Hlt2 22872 29218 97.5 97.4 1.00 \\(D^0\\) PID 22256 28390 97.3 97.2 1.00 Offline \\(D^0\\) cuts (no PID no mass window) 11925 14643 53.6 51.6 0.96 \\(\\mu\\) PID \\(\\mu\\) cut 11925 14643 100.0 100.0 1.00 Offline \\(\\mu\\) cuts (no PID) 11665 14332 97.8 97.9 1.00 Offline \\(D^* \\mu\\) combo cuts (no mass window) 11529 11796 98.8 82.3 0.83 \\(D^0\\) mass window 9445 9662 81.9 81.9 1.00 step-1.5 12219 9662 100.0 81.9 0.82 Fit variable range cuts 10819 8356 88.5 86.5 0.98 \\(\\mu\\) other PID cuts 7796 7963 72.1 95.3 1.32 \\(D^*\\) mass window 5495 5594 70.5 70.2 1.00 \\(B^0\\) mass window 5486 5586 99.8 99.9 1.00 \\(BDT_{iso} < 0.15\\) 1419 1248 25.9 22.3 0.86 \\(D^*\\) , wrong-sign slow \\(\\pi\\) , Phoebe step-1+1.5 vs us Cut Phoebe us Phoebe \\(\\epsilon\\) us \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 34556 44187 - - - Select 2011 MD data 31850 44187 92.2 100.0 1.08 L0 30785 42712 96.7 96.7 1.00 Hlt1 29563 41079 96.0 96.2 1.00 Hlt2 28683 39843 97.0 97.0 1.00 \\(D^0\\) PID 27678 38413 96.5 96.4 1.00 Offline \\(D^0\\) cuts (no PID no mass window) 21291 30013 76.9 78.1 1.02 \\(\\mu\\) PID \\(\\mu\\) cut 21291 30013 100.0 100.0 1.00 Offline \\(\\mu\\) cuts (no PID) 20403 28649 95.8 95.5 1.00 Offline \\(D^* \\mu\\) combo cuts (no mass window) 20240 21165 99.2 73.9 0.74 \\(D^0\\) mass window 18440 19314 91.1 91.3 1.00 step-1.5 19409 19314 100.0 91.3 0.91 Fit variable range cuts 18710 18599 96.4 96.3 1.00 \\(\\mu\\) other PID cuts 17511 18335 93.6 98.6 1.05 \\(D^*\\) mass window 3194 3386 18.2 18.5 1.01 \\(B^0\\) mass window 3193 3385 100.0 100.0 1.00 \\(BDT_{iso} < 0.15\\) 1548 1446 48.5 42.7 0.88","title":"RDX validation cutflow"},{"location":"data/cutflows/RDX_run1_phoebe_vs_us/#rdx-run-1-validation-phoebe-vs-us-2011-md","text":"Info The bold number with a link indicates that this number is consistent with a previous study, with the previous study linked. If a number is bold but w/o a link, it shares the link for the number to its left.","title":"RDX run 1 validation: Phoebe vs us, 2011 MD"},{"location":"data/cutflows/RDX_run1_phoebe_vs_us/#d-right-sign-phoebe-step-115-vs-us","text":"Note Before the slanted step-1.5 line, the numbers are from Phoebe's step-1. The * is considered immaterial For Phoebe's ntuple, we remove the VELO only slow \\(\\pi\\) For us, this is already removed at DaVinci level Info It is known that PID and isolation BDT values have changed between DaVinci versions Also, the vertexing has changed. This is manifested in the Offline \\(D^* \\mu\\) combo cuts. The cuts are defined in here . Notably, we have vertex \\(\\chi^2/dof\\) cuts, like b0_endvtx_chi2/b0_endvtx_ndof < 6.0 . Cut Phoebe us Phoebe \\(\\epsilon\\) us \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 208846 216987 - - - Select 2011 MD data 195535 216987 93.6 100.0 1.07 L0 189422 210166 96.9 96.9 1.00 Hlt1 185980 206226 98.2 98.1 1.00 Hlt2 183194 203010 98.5 98.4 1.00 \\(D^0\\) PID 178517 197740 97.4 97.4 1.00 Offline \\(D^0\\) cuts (no PID no mass window) 146240 160219 81.9 81.0 0.99 \\(\\mu\\) PID \\(\\mu\\) cut 146240 160219 100.0 100.0 1.00 Offline \\(\\mu\\) cuts (no PID) 138166 151326 94.5 94.4 1.00 Offline \\(D^* \\mu\\) combo cuts (no mass window) 137097 140528 99.2 92.9 0.94 \\(D^0\\) mass window 131579 134907 96.0 96.0 1.00 step-1.5 136645 134907 100.0 96.0 0.96 Fit variable range cuts 132754 131097 97.2 97.2 1.00 \\(\\mu\\) other PID cuts 126514 129735 95.3 99.0 1.04 \\(D^*\\) mass window 110017 112535 87.0 86.7 1.00 \\(B^0\\) mass window 110010 112528 100.0 100.0 1.00 \\(BDT_{iso} < 0.15\\) 78903 72628 71.7 64.5 0.90 ISO final 74301 - - - -","title":"\\(D^*\\), right-sign, Phoebe step-1+1.5 vs us"},{"location":"data/cutflows/RDX_run1_phoebe_vs_us/#d-wrong-sign-mu-phoebe-step-115-vs-us","text":"Cut Phoebe us Phoebe \\(\\epsilon\\) us \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 26705 31939 - - - Select 2011 MD data 24945 31939 93.4 100.0 1.07 L0 24120 30876 96.7 96.7 1.00 Hlt1 23451 30008 97.2 97.2 1.00 Hlt2 22872 29218 97.5 97.4 1.00 \\(D^0\\) PID 22256 28390 97.3 97.2 1.00 Offline \\(D^0\\) cuts (no PID no mass window) 11925 14643 53.6 51.6 0.96 \\(\\mu\\) PID \\(\\mu\\) cut 11925 14643 100.0 100.0 1.00 Offline \\(\\mu\\) cuts (no PID) 11665 14332 97.8 97.9 1.00 Offline \\(D^* \\mu\\) combo cuts (no mass window) 11529 11796 98.8 82.3 0.83 \\(D^0\\) mass window 9445 9662 81.9 81.9 1.00 step-1.5 12219 9662 100.0 81.9 0.82 Fit variable range cuts 10819 8356 88.5 86.5 0.98 \\(\\mu\\) other PID cuts 7796 7963 72.1 95.3 1.32 \\(D^*\\) mass window 5495 5594 70.5 70.2 1.00 \\(B^0\\) mass window 5486 5586 99.8 99.9 1.00 \\(BDT_{iso} < 0.15\\) 1419 1248 25.9 22.3 0.86","title":"\\(D^*\\), wrong-sign \\(\\mu\\), Phoebe step-1+1.5 vs us"},{"location":"data/cutflows/RDX_run1_phoebe_vs_us/#d-wrong-sign-slow-pi-phoebe-step-115-vs-us","text":"Cut Phoebe us Phoebe \\(\\epsilon\\) us \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 34556 44187 - - - Select 2011 MD data 31850 44187 92.2 100.0 1.08 L0 30785 42712 96.7 96.7 1.00 Hlt1 29563 41079 96.0 96.2 1.00 Hlt2 28683 39843 97.0 97.0 1.00 \\(D^0\\) PID 27678 38413 96.5 96.4 1.00 Offline \\(D^0\\) cuts (no PID no mass window) 21291 30013 76.9 78.1 1.02 \\(\\mu\\) PID \\(\\mu\\) cut 21291 30013 100.0 100.0 1.00 Offline \\(\\mu\\) cuts (no PID) 20403 28649 95.8 95.5 1.00 Offline \\(D^* \\mu\\) combo cuts (no mass window) 20240 21165 99.2 73.9 0.74 \\(D^0\\) mass window 18440 19314 91.1 91.3 1.00 step-1.5 19409 19314 100.0 91.3 0.91 Fit variable range cuts 18710 18599 96.4 96.3 1.00 \\(\\mu\\) other PID cuts 17511 18335 93.6 98.6 1.05 \\(D^*\\) mass window 3194 3386 18.2 18.5 1.01 \\(B^0\\) mass window 3193 3385 100.0 100.0 1.00 \\(BDT_{iso} < 0.15\\) 1548 1446 48.5 42.7 0.88","title":"\\(D^*\\), wrong-sign slow \\(\\pi\\), Phoebe step-1+1.5 vs us"},{"location":"data/cutflows/RDst_refit_Dst_only_vs_full_refit/","text":"\\(R(D^*)\\) cutflow to study the effect of refit \\(D^*\\) only Component-wise cutflow table with run 2 cocktail MC, refit \\(D^*\\) only cut name Signal Normaliz. D** Sig eff Nor eff D** eff Partial stripping 221 6163 1250 1 1.8 0.8 L0 144 3293 718 65.2 53.4 57.4 Hlt1 137 3094 674 95.1 94 93.9 Hlt2 137 3094 674 100 100 100 Full stripping 136 3035 660 99.3 98.1 97.9 \\(\\mu\\) PID 120 2654 604 88.2 87.4 91.5 \\(\\text{IsoBDT}_{B^0} < 0.15\\) 98 2062 232 81.7 77.7 38.4 \\(B^0\\) cuts 97 1993 230 99 96.7 99.1 \\(K\\) cuts 82 1663 181 84.5 83.4 78.7 \\(\\pi\\) cuts 66 1373 142 80.5 82.6 78.5 \\(\\pi_{soft}\\) cuts 66 1373 142 100 100 100 \\(D^0\\) cuts 57 1261 127 86.4 91.8 89.4 \\(D^*\\) cuts 53 1179 108 93 93.5 85 Total ratio - - - 39 38.8 16.4 Component-wise cutflow table with run 2 cocktail MC, full refit cut name Signal Normaliz. D** Sig eff Nor eff D** eff Partial stripping 221 6133 1224 1 1.8 0.8 L0 145 3277 706 65.6 53.4 57.7 Hlt1 138 3081 662 95.2 94 93.8 Hlt2 138 3081 662 100 100 100 Full stripping 137 3043 642 99.3 98.8 97 \\(\\mu\\) PID 121 2666 587 88.3 87.6 91.4 \\(\\text{IsoBDT}_{B^0} < 0.15\\) 96 2146 297 79.3 80.5 50.6 \\(B^0\\) cuts 95 2075 294 99 96.7 99 \\(K\\) cuts 81 1716 235 85.3 82.7 79.9 \\(\\pi\\) cuts 64 1425 194 79 83 82.6 \\(\\pi_{soft}\\) cuts 64 1425 194 100 100 100 \\(D^0\\) cuts 56 1312 174 87.5 92.1 89.7 \\(D^*\\) cuts 49 1193 142 87.5 90.9 81.6 Total ratio - - - 35.8 39.2 22.1","title":"R(D*) cutflow to study the effect of refit D* only"},{"location":"data/cutflows/RDst_refit_Dst_only_vs_full_refit/#rd-cutflow-to-study-the-effect-of-refit-d-only","text":"","title":"\\(R(D^*)\\) cutflow to study the effect of refit \\(D^*\\) only"},{"location":"data/cutflows/RDst_refit_Dst_only_vs_full_refit/#component-wise-cutflow-table-with-run-2-cocktail-mc-refit-d-only","text":"cut name Signal Normaliz. D** Sig eff Nor eff D** eff Partial stripping 221 6163 1250 1 1.8 0.8 L0 144 3293 718 65.2 53.4 57.4 Hlt1 137 3094 674 95.1 94 93.9 Hlt2 137 3094 674 100 100 100 Full stripping 136 3035 660 99.3 98.1 97.9 \\(\\mu\\) PID 120 2654 604 88.2 87.4 91.5 \\(\\text{IsoBDT}_{B^0} < 0.15\\) 98 2062 232 81.7 77.7 38.4 \\(B^0\\) cuts 97 1993 230 99 96.7 99.1 \\(K\\) cuts 82 1663 181 84.5 83.4 78.7 \\(\\pi\\) cuts 66 1373 142 80.5 82.6 78.5 \\(\\pi_{soft}\\) cuts 66 1373 142 100 100 100 \\(D^0\\) cuts 57 1261 127 86.4 91.8 89.4 \\(D^*\\) cuts 53 1179 108 93 93.5 85 Total ratio - - - 39 38.8 16.4","title":"Component-wise cutflow table with run 2 cocktail MC, refit \\(D^*\\) only"},{"location":"data/cutflows/RDst_refit_Dst_only_vs_full_refit/#component-wise-cutflow-table-with-run-2-cocktail-mc-full-refit","text":"cut name Signal Normaliz. D** Sig eff Nor eff D** eff Partial stripping 221 6133 1224 1 1.8 0.8 L0 145 3277 706 65.6 53.4 57.7 Hlt1 138 3081 662 95.2 94 93.8 Hlt2 138 3081 662 100 100 100 Full stripping 137 3043 642 99.3 98.8 97 \\(\\mu\\) PID 121 2666 587 88.3 87.6 91.4 \\(\\text{IsoBDT}_{B^0} < 0.15\\) 96 2146 297 79.3 80.5 50.6 \\(B^0\\) cuts 95 2075 294 99 96.7 99 \\(K\\) cuts 81 1716 235 85.3 82.7 79.9 \\(\\pi\\) cuts 64 1425 194 79 83 82.6 \\(\\pi_{soft}\\) cuts 64 1425 194 100 100 100 \\(D^0\\) cuts 56 1312 174 87.5 92.1 89.7 \\(D^*\\) cuts 49 1193 142 87.5 90.9 81.6 Total ratio - - - 35.8 39.2 22.1","title":"Component-wise cutflow table with run 2 cocktail MC, full refit"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/","text":"\\(R(D^*)\\) cutflow detail Comparison between physical variables For now, we focus on \\(P_T\\) of all reconstructed particles, generated with cocktail MC. Y_PT Dst_PT D0_PT Kplus_PT muplus_PT piminus_PT piminus0_PT Comparison between run 1 and run 2 individual cut name run 1 yield run 2 yield run 1 efficiency run 2 efficiency double ratio After DaVinci 5796 6731 - - - \\(D^*\\) L0Hadron TOS 1205 1628 0.2079\u00b10.0054 0.2419\u00b10.0053 1.163\u00b10.040 \\(\\Upsilon(4s)\\) L0Electron TIS 387 711 0.0668\u00b10.0034 0.1056\u00b10.0039 1.58\u00b10.10 \\(\\Upsilon(4s)\\) L0Hadron TIS 1245 1560 0.2148\u00b10.0055 0.2318\u00b10.0052 1.079\u00b10.037 \\(\\Upsilon(4s)\\) L0Muon TIS 565 789 0.0975\u00b10.0040 0.1172\u00b10.0040 1.202\u00b10.065 \\(\\Upsilon(4s)\\) L0Photon TIS 260 277 0.0449\u00b10.0029 0.0412\u00b10.0026 0.917\u00b10.082 \\(\\Upsilon(4s)\\) L0Global TIS 1931 2714 0.3332\u00b10.0063 0.4032\u00b10.0060 1.210\u00b10.029 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS 113 175 0.0938\u00b10.0091 0.1075\u00b10.0082 1.15\u00b10.14 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 330 355 0.274\u00b10.013 0.218\u00b10.011 0.796\u00b10.055 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS 135 147 0.1120\u00b10.0098 0.0903\u00b10.0076 0.806\u00b10.098 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS 68 72 0.0564\u00b10.0074 0.0442\u00b10.0057 0.78\u00b10.14 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS 489 578 0.406\u00b10.015 0.355\u00b10.012 0.875\u00b10.043 Total ratio - - 0.0844\u00b10.0038 0.0859\u00b10.0035 1.018\u00b10.062 Note Only lines present in both runs are considered here. Run 1 detail Marginal impact cut name yield efficiency After DaVinci 5796 - \\(D^*\\) L0Hadron TOS 1205 0.208+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS 113 0.094+/-0.009 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 35 0.029+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 65 0.054+/-0.007 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 16 0.013+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 17 0.014+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 10 0.0083+/-0.0035 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 113 0.094+/-0.009 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 35 0.029+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 35 0.029+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 22 0.018+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 4 0.0033+/-0.0026 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 6 0.0050+/-0.0029 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 4 0.0033+/-0.0026 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 35 0.029+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 330 0.274+/-0.013 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 65 0.054+/-0.007 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 22 0.018+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 40 0.033+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 36 0.030+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 12 0.010+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 330 0.274+/-0.013 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS 135 0.112+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 16 0.013+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 4 0.0033+/-0.0026 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 40 0.033+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 7 0.0058+/-0.0031 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 3 0.0025+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 135 0.112+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS 68 0.056+/-0.007 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 17 0.014+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 6 0.0050+/-0.0029 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 36 0.030+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 7 0.0058+/-0.0031 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 19 0.016+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 68 0.056+/-0.007 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 19 0.016+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 10 0.0083+/-0.0035 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 4 0.0033+/-0.0026 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 12 0.010+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 3 0.0025+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 19 0.016+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 19 0.016+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS 489 0.406+/-0.015 Individual impact cut name yield efficiency After DaVinci 5796 - \\(D^*\\) L0Hadron TOS 1205 0.208+/-0.005 \\(\\Upsilon(4s)\\) L0Electron TIS 387 0.0668+/-0.0034 \\(\\Upsilon(4s)\\) L0ElectronHi TIS 94 0.0162+/-0.0018 \\(\\Upsilon(4s)\\) L0Hadron TIS 1245 0.215+/-0.006 \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.00000+/-0.00032 \\(\\Upsilon(4s)\\) L0Muon TIS 565 0.097+/-0.004 \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.00000+/-0.00032 \\(\\Upsilon(4s)\\) L0Photon TIS 260 0.0449+/-0.0029 \\(\\Upsilon(4s)\\) L0PhotonHi TIS 63 0.0109+/-0.0015 \\(\\Upsilon(4s)\\) L0Global TIS 1931 0.333+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS 113 0.094+/-0.009 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 35 0.029+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 330 0.274+/-0.013 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS 135 0.112+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS 68 0.056+/-0.007 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 19 0.016+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS 489 0.406+/-0.015 Run 2 detail Marginal impact cut name yield efficiency After DaVinci 6731 - \\(D^*\\) L0Hadron TOS 1628 0.242+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 36 0.022+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 6 0.0037+/-0.0022 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 35 0.021+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 9 0.0055+/-0.0025 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 36 0.022+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS 175 0.107+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 6 0.0037+/-0.0022 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 85 0.052+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 16 0.0098+/-0.0031 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 15 0.0092+/-0.0030 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 175 0.107+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 355 0.218+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 85 0.052+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 31 0.019+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 9 0.0055+/-0.0025 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 33 0.020+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 355 0.218+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS 147 0.090+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 35 0.021+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 16 0.0098+/-0.0031 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 31 0.019+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 37 0.023+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 147 0.090+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 37 0.023+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 9 0.0055+/-0.0025 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 9 0.0055+/-0.0025 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 37 0.023+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 3 0.0018+/-0.0018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 37 0.023+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS 72 0.044+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 15 0.0092+/-0.0030 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 33 0.020+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 3 0.0018+/-0.0018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 72 0.044+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS 578 0.355+/-0.012 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 118 0.204+/-0.018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 23 0.040+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 15 0.026+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 3 0.005+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 185 0.320+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 118 0.204+/-0.018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 118 0.204+/-0.018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 32 0.055+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 27 0.047+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 185 0.320+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 118 0.204+/-0.018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 23 0.040+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 15 0.026+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 3 0.005+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 39 0.067+/-0.012 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 23 0.040+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 32 0.055+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 23 0.040+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 28 0.048+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 39 0.067+/-0.012 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 29 0.050+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 15 0.026+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 27 0.047+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 15 0.026+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 28 0.048+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 29 0.050+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 5 0.009+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 3 0.005+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 3 0.005+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 5 0.009+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 576 0.997+/-0.005 Individual impact cut name yield efficiency After DaVinci 6731 - \\(D^*\\) L0Hadron TOS 1628 0.242+/-0.005 \\(\\Upsilon(4s)\\) L0DiMuon TIS 180 0.0267+/-0.0021 \\(\\Upsilon(4s)\\) L0Electron TIS 711 0.106+/-0.004 \\(\\Upsilon(4s)\\) L0Hadron TIS 1560 0.232+/-0.005 \\(\\Upsilon(4s)\\) L0JetEl TIS 34 0.0051+/-0.0010 \\(\\Upsilon(4s)\\) L0JetPh TIS 6 0.0009+/-0.0005 \\(\\Upsilon(4s)\\) L0Muon TIS 789 0.117+/-0.004 \\(\\Upsilon(4s)\\) L0MuonEW TIS 203 0.0302+/-0.0022 \\(\\Upsilon(4s)\\) L0Photon TIS 277 0.0412+/-0.0026 \\(\\Upsilon(4s)\\) L0Global TIS 2714 0.403+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 36 0.022+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS 175 0.107+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 355 0.218+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS 147 0.090+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 37 0.023+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS 72 0.044+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS 578 0.355+/-0.012 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 185 0.320+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 39 0.067+/-0.012 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 29 0.050+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 5 0.009+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 576 0.997+/-0.005","title":"R(D*) cutflow detail"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#rd-cutflow-detail","text":"","title":"\\(R(D^*)\\) cutflow detail"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#comparison-between-physical-variables","text":"For now, we focus on \\(P_T\\) of all reconstructed particles, generated with cocktail MC.","title":"Comparison between physical variables"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#y_pt","text":"","title":"Y_PT"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#dst_pt","text":"","title":"Dst_PT"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#d0_pt","text":"","title":"D0_PT"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#kplus_pt","text":"","title":"Kplus_PT"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#muplus_pt","text":"","title":"muplus_PT"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#piminus_pt","text":"","title":"piminus_PT"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#piminus0_pt","text":"","title":"piminus0_PT"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#comparison-between-run-1-and-run-2-individual","text":"cut name run 1 yield run 2 yield run 1 efficiency run 2 efficiency double ratio After DaVinci 5796 6731 - - - \\(D^*\\) L0Hadron TOS 1205 1628 0.2079\u00b10.0054 0.2419\u00b10.0053 1.163\u00b10.040 \\(\\Upsilon(4s)\\) L0Electron TIS 387 711 0.0668\u00b10.0034 0.1056\u00b10.0039 1.58\u00b10.10 \\(\\Upsilon(4s)\\) L0Hadron TIS 1245 1560 0.2148\u00b10.0055 0.2318\u00b10.0052 1.079\u00b10.037 \\(\\Upsilon(4s)\\) L0Muon TIS 565 789 0.0975\u00b10.0040 0.1172\u00b10.0040 1.202\u00b10.065 \\(\\Upsilon(4s)\\) L0Photon TIS 260 277 0.0449\u00b10.0029 0.0412\u00b10.0026 0.917\u00b10.082 \\(\\Upsilon(4s)\\) L0Global TIS 1931 2714 0.3332\u00b10.0063 0.4032\u00b10.0060 1.210\u00b10.029 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS 113 175 0.0938\u00b10.0091 0.1075\u00b10.0082 1.15\u00b10.14 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 330 355 0.274\u00b10.013 0.218\u00b10.011 0.796\u00b10.055 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS 135 147 0.1120\u00b10.0098 0.0903\u00b10.0076 0.806\u00b10.098 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS 68 72 0.0564\u00b10.0074 0.0442\u00b10.0057 0.78\u00b10.14 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS 489 578 0.406\u00b10.015 0.355\u00b10.012 0.875\u00b10.043 Total ratio - - 0.0844\u00b10.0038 0.0859\u00b10.0035 1.018\u00b10.062 Note Only lines present in both runs are considered here.","title":"Comparison between run 1 and run 2 individual"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#run-1-detail","text":"","title":"Run 1 detail"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#marginal-impact","text":"cut name yield efficiency After DaVinci 5796 - \\(D^*\\) L0Hadron TOS 1205 0.208+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS 113 0.094+/-0.009 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 35 0.029+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 65 0.054+/-0.007 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 16 0.013+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 17 0.014+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 10 0.0083+/-0.0035 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 113 0.094+/-0.009 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 35 0.029+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 35 0.029+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 22 0.018+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 4 0.0033+/-0.0026 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 6 0.0050+/-0.0029 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 4 0.0033+/-0.0026 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 35 0.029+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 330 0.274+/-0.013 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 65 0.054+/-0.007 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 22 0.018+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 40 0.033+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 36 0.030+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 12 0.010+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 330 0.274+/-0.013 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS 135 0.112+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 16 0.013+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 4 0.0033+/-0.0026 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 40 0.033+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 7 0.0058+/-0.0031 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 3 0.0025+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 135 0.112+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS 68 0.056+/-0.007 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 17 0.014+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 6 0.0050+/-0.0029 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 36 0.030+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 7 0.0058+/-0.0031 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 19 0.016+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 68 0.056+/-0.007 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 19 0.016+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 10 0.0083+/-0.0035 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 4 0.0033+/-0.0026 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 12 0.010+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 3 0.0025+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 19 0.016+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 19 0.016+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS 489 0.406+/-0.015","title":"Marginal impact"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#individual-impact","text":"cut name yield efficiency After DaVinci 5796 - \\(D^*\\) L0Hadron TOS 1205 0.208+/-0.005 \\(\\Upsilon(4s)\\) L0Electron TIS 387 0.0668+/-0.0034 \\(\\Upsilon(4s)\\) L0ElectronHi TIS 94 0.0162+/-0.0018 \\(\\Upsilon(4s)\\) L0Hadron TIS 1245 0.215+/-0.006 \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.00000+/-0.00032 \\(\\Upsilon(4s)\\) L0Muon TIS 565 0.097+/-0.004 \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.00000+/-0.00032 \\(\\Upsilon(4s)\\) L0Photon TIS 260 0.0449+/-0.0029 \\(\\Upsilon(4s)\\) L0PhotonHi TIS 63 0.0109+/-0.0015 \\(\\Upsilon(4s)\\) L0Global TIS 1931 0.333+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS 113 0.094+/-0.009 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0ElectronHi TIS 35 0.029+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 330 0.274+/-0.013 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0HighSumETJet TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS 135 0.112+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0NoPVFlag TIS 0 0.0000+/-0.0015 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS 68 0.056+/-0.007 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0PhotonHi TIS 19 0.016+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS 489 0.406+/-0.015","title":"Individual impact"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#run-2-detail","text":"","title":"Run 2 detail"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#marginal-impact_1","text":"cut name yield efficiency After DaVinci 6731 - \\(D^*\\) L0Hadron TOS 1628 0.242+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 36 0.022+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 6 0.0037+/-0.0022 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 35 0.021+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 9 0.0055+/-0.0025 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 36 0.022+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS 175 0.107+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 6 0.0037+/-0.0022 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 85 0.052+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 16 0.0098+/-0.0031 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 15 0.0092+/-0.0030 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 175 0.107+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 355 0.218+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 85 0.052+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 31 0.019+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 9 0.0055+/-0.0025 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 33 0.020+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 355 0.218+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS 147 0.090+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 35 0.021+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 16 0.0098+/-0.0031 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 31 0.019+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 37 0.023+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 147 0.090+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 37 0.023+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 9 0.0055+/-0.0025 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 9 0.0055+/-0.0025 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 0 0.0000+/-0.0011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 37 0.023+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0Photon TIS 3 0.0018+/-0.0018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 37 0.023+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS 72 0.044+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Electron TIS 15 0.0092+/-0.0030 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 33 0.020+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 1 0.0006+/-0.0014 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Muon TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 3 0.0018+/-0.0018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS+ \\(\\Upsilon(4s)\\) L0Global TIS 72 0.044+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS 578 0.355+/-0.012 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 118 0.204+/-0.018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 23 0.040+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 15 0.026+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 3 0.005+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 185 0.320+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 118 0.204+/-0.018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 118 0.204+/-0.018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 32 0.055+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 27 0.047+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 185 0.320+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 118 0.204+/-0.018 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 23 0.040+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 15 0.026+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 3 0.005+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 39 0.067+/-0.012 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 23 0.040+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 32 0.055+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 23 0.040+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 28 0.048+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 39 0.067+/-0.012 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 29 0.050+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 15 0.026+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 27 0.047+/-0.010 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 15 0.026+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 28 0.048+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 29 0.050+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 5 0.009+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 3 0.005+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 3 0.005+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 4 0.007+/-0.005 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 5 0.009+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 576 0.997+/-0.005","title":"Marginal impact"},{"location":"data/cutflows/RDst_run1_vs_run2/detail/#individual-impact_1","text":"cut name yield efficiency After DaVinci 6731 - \\(D^*\\) L0Hadron TOS 1628 0.242+/-0.005 \\(\\Upsilon(4s)\\) L0DiMuon TIS 180 0.0267+/-0.0021 \\(\\Upsilon(4s)\\) L0Electron TIS 711 0.106+/-0.004 \\(\\Upsilon(4s)\\) L0Hadron TIS 1560 0.232+/-0.005 \\(\\Upsilon(4s)\\) L0JetEl TIS 34 0.0051+/-0.0010 \\(\\Upsilon(4s)\\) L0JetPh TIS 6 0.0009+/-0.0005 \\(\\Upsilon(4s)\\) L0Muon TIS 789 0.117+/-0.004 \\(\\Upsilon(4s)\\) L0MuonEW TIS 203 0.0302+/-0.0022 \\(\\Upsilon(4s)\\) L0Photon TIS 277 0.0412+/-0.0026 \\(\\Upsilon(4s)\\) L0Global TIS 2714 0.403+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0DiMuon TIS 36 0.022+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Electron TIS 175 0.107+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Hadron TIS 355 0.218+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetEl TIS 8 0.0049+/-0.0024 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0JetPh TIS 2 0.0012+/-0.0016 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Muon TIS 147 0.090+/-0.008 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0MuonEW TIS 37 0.023+/-0.004 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Photon TIS 72 0.044+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS 578 0.355+/-0.012 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVA TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMVALoose TIS 185 0.320+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TwoTrackMVALoose TIS 167 0.289+/-0.020 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuon TIS 39 0.067+/-0.012 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1TrackMuonMVA TIS 29 0.050+/-0.011 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1SingleMuonHighPT TIS 5 0.009+/-0.006 \\(D^*\\) L0Hadron TOS+ \\(\\Upsilon(4s)\\) L0Global TIS+ \\(\\Upsilon(4s)\\) Hlt1Phys TIS 576 0.997+/-0.005","title":"Individual impact"},{"location":"data/cutflows/RDst_run1_vs_run2/overview/","text":"\\(R(D^*)\\) cutflow overview Cutflow table with cocktail MC, bare Cut Run 1 Run 2 Run 1 \\(\\epsilon\\) Run 2 \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 118213 126958 - - - Trig. + Strip. 4313 13005 3.6 10.2 2.81 Offline \\(D^0\\) cuts 3729 5808 86.5 44.7 0.52 Offline \\(\\mu\\) cuts 3307 4606 88.7 79.3 0.89 Offline \\(D^* \\mu\\) combo cuts 1975 2729 59.7 59.2 0.99 \\(BDT_{iso} < 0.15\\) 1513 1946 76.6 71.3 0.93 Total eff. - - 1.3 1.5 1.20 Yield ratio x 0.99 1513 1946 - - 1.27 Note We removed all kinematic cuts and loosened some vertex quality cuts when generating bare ntuples. This table uses full MagDown run 1 and 2 cocktail MC. Additional step 2 cuts are applied here. ALL numbers are number of events. We applied the same cuts for run 1 and 2. Info Run 1 stripping conditions can be found at Strippingb2D0MuXB2DMuNuForTauMuLine Run 2 stripping conditions can be found at Strippingb2D0MuXB2DMuForTauMuLine Cutflow table with cocktail MC, bare, with truth-matched signal, normalization, and \\(D^{**}\\) Signal Cut Run 1 Run 2 Run 1 \\(\\epsilon\\) Run 2 \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 118213 126958 - - - Signal truth-matching 4388 4638 3.7 3.7 0.98 Trig. + Strip. 151 397 3.4 8.6 2.49 Offline \\(D^0\\) cuts 120 207 79.5 52.1 0.66 Offline \\(\\mu\\) cuts 110 162 91.7 78.3 0.85 Offline \\(D^* \\mu\\) combo cuts 70 115 63.6 71.0 1.12 \\(BDT_{iso} < 0.15\\) 61 91 87.1 79.1 0.91 Total eff. - - 0.05 0.07 1.39 Yield ratio x 0.99 61 91 - - 1.48 Normalization Cut Run 1 Run 2 Run 1 \\(\\epsilon\\) Run 2 \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 118213 126958 - - - Normalization truth-matching 76567 82950 64.8 65.3 1.01 Trig. + Strip. 2898 8702 3.8 10.5 2.77 Offline \\(D^0\\) cuts 2480 3868 85.6 44.4 0.52 Offline \\(\\mu\\) cuts 2182 3062 88.0 79.2 0.90 Offline \\(D^* \\mu\\) combo cuts 1613 2186 73.9 71.4 0.97 \\(BDT_{iso} < 0.15\\) 1362 1714 84.4 78.4 0.93 Total eff. - - 1.2 1.4 1.17 Yield ratio x 0.99 1362 1714 - - 1.25 \\(D^{**}\\) Cut Run 1 Run 2 Run 1 \\(\\epsilon\\) Run 2 \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 118213 126958 - - - \\(D^{**}\\) truth-matching 35827 37755 30.3 29.7 0.98 Trig. + Strip. 1225 3818 3.4 10.1 2.96 Offline \\(D^0\\) cuts 1097 1699 89.6 44.5 0.50 Offline \\(\\mu\\) cuts 986 1357 89.9 79.9 0.89 Offline \\(D^* \\mu\\) combo cuts 289 424 29.3 31.2 1.07 \\(BDT_{iso} < 0.15\\) 89 138 30.8 32.5 1.06 Total eff. - - 0.08 0.11 1.44 Yield ratio x 0.99 89 138 - - 1.53 Cutflow table with real data Cut Run 1 Run 2 Run 1 \\(\\epsilon\\) Run 2 \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 216987 5349722 - - - Trig. + Strip. 202990 3043397 93.5 56.9 0.61 Offline \\(D^0\\) cuts 153311 1077159 75.5 35.4 0.47 Offline \\(\\mu\\) cuts 143242 656044 93.4 60.9 0.65 Offline \\(D^* \\mu\\) combo cuts 115321 512969 80.5 78.2 0.97 \\(BDT_{iso} < 0.15\\) 74535 317049 64.6 61.8 0.96 Total eff. - - 34.3 5.9 0.17 Yield ratio x 0.35 74535 317049 - - 1.51 Note This table uses full MagDown 2011 and 2016 real data. ALL numbers are number of events. The Trig. + Strip. entries should not be trusted as we don't include numbers extracted from DaVinci log.","title":"R(D*) cutflow overview"},{"location":"data/cutflows/RDst_run1_vs_run2/overview/#rd-cutflow-overview","text":"","title":"\\(R(D^*)\\) cutflow overview"},{"location":"data/cutflows/RDst_run1_vs_run2/overview/#cutflow-table-with-cocktail-mc-bare","text":"Cut Run 1 Run 2 Run 1 \\(\\epsilon\\) Run 2 \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 118213 126958 - - - Trig. + Strip. 4313 13005 3.6 10.2 2.81 Offline \\(D^0\\) cuts 3729 5808 86.5 44.7 0.52 Offline \\(\\mu\\) cuts 3307 4606 88.7 79.3 0.89 Offline \\(D^* \\mu\\) combo cuts 1975 2729 59.7 59.2 0.99 \\(BDT_{iso} < 0.15\\) 1513 1946 76.6 71.3 0.93 Total eff. - - 1.3 1.5 1.20 Yield ratio x 0.99 1513 1946 - - 1.27 Note We removed all kinematic cuts and loosened some vertex quality cuts when generating bare ntuples. This table uses full MagDown run 1 and 2 cocktail MC. Additional step 2 cuts are applied here. ALL numbers are number of events. We applied the same cuts for run 1 and 2. Info Run 1 stripping conditions can be found at Strippingb2D0MuXB2DMuNuForTauMuLine Run 2 stripping conditions can be found at Strippingb2D0MuXB2DMuForTauMuLine","title":"Cutflow table with cocktail MC, bare"},{"location":"data/cutflows/RDst_run1_vs_run2/overview/#cutflow-table-with-cocktail-mc-bare-with-truth-matched-signal-normalization-and-d","text":"","title":"Cutflow table with cocktail MC, bare, with truth-matched signal, normalization, and \\(D^{**}\\)"},{"location":"data/cutflows/RDst_run1_vs_run2/overview/#signal","text":"Cut Run 1 Run 2 Run 1 \\(\\epsilon\\) Run 2 \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 118213 126958 - - - Signal truth-matching 4388 4638 3.7 3.7 0.98 Trig. + Strip. 151 397 3.4 8.6 2.49 Offline \\(D^0\\) cuts 120 207 79.5 52.1 0.66 Offline \\(\\mu\\) cuts 110 162 91.7 78.3 0.85 Offline \\(D^* \\mu\\) combo cuts 70 115 63.6 71.0 1.12 \\(BDT_{iso} < 0.15\\) 61 91 87.1 79.1 0.91 Total eff. - - 0.05 0.07 1.39 Yield ratio x 0.99 61 91 - - 1.48","title":"Signal"},{"location":"data/cutflows/RDst_run1_vs_run2/overview/#normalization","text":"Cut Run 1 Run 2 Run 1 \\(\\epsilon\\) Run 2 \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 118213 126958 - - - Normalization truth-matching 76567 82950 64.8 65.3 1.01 Trig. + Strip. 2898 8702 3.8 10.5 2.77 Offline \\(D^0\\) cuts 2480 3868 85.6 44.4 0.52 Offline \\(\\mu\\) cuts 2182 3062 88.0 79.2 0.90 Offline \\(D^* \\mu\\) combo cuts 1613 2186 73.9 71.4 0.97 \\(BDT_{iso} < 0.15\\) 1362 1714 84.4 78.4 0.93 Total eff. - - 1.2 1.4 1.17 Yield ratio x 0.99 1362 1714 - - 1.25","title":"Normalization"},{"location":"data/cutflows/RDst_run1_vs_run2/overview/#d","text":"Cut Run 1 Run 2 Run 1 \\(\\epsilon\\) Run 2 \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 118213 126958 - - - \\(D^{**}\\) truth-matching 35827 37755 30.3 29.7 0.98 Trig. + Strip. 1225 3818 3.4 10.1 2.96 Offline \\(D^0\\) cuts 1097 1699 89.6 44.5 0.50 Offline \\(\\mu\\) cuts 986 1357 89.9 79.9 0.89 Offline \\(D^* \\mu\\) combo cuts 289 424 29.3 31.2 1.07 \\(BDT_{iso} < 0.15\\) 89 138 30.8 32.5 1.06 Total eff. - - 0.08 0.11 1.44 Yield ratio x 0.99 89 138 - - 1.53","title":"\\(D^{**}\\)"},{"location":"data/cutflows/RDst_run1_vs_run2/overview/#cutflow-table-with-real-data","text":"Cut Run 1 Run 2 Run 1 \\(\\epsilon\\) Run 2 \\(\\epsilon\\) \\(\\epsilon\\) ratio Total events 216987 5349722 - - - Trig. + Strip. 202990 3043397 93.5 56.9 0.61 Offline \\(D^0\\) cuts 153311 1077159 75.5 35.4 0.47 Offline \\(\\mu\\) cuts 143242 656044 93.4 60.9 0.65 Offline \\(D^* \\mu\\) combo cuts 115321 512969 80.5 78.2 0.97 \\(BDT_{iso} < 0.15\\) 74535 317049 64.6 61.8 0.96 Total eff. - - 34.3 5.9 0.17 Yield ratio x 0.35 74535 317049 - - 1.51 Note This table uses full MagDown 2011 and 2016 real data. ALL numbers are number of events. The Trig. + Strip. entries should not be trusted as we don't include numbers extracted from DaVinci log.","title":"Cutflow table with real data"},{"location":"ntupling/dev/","text":"Local development of in-house Python packages We have made several in-house Python packages, for example: pyBabyMaker : For producing step-2 ntuples. pyTuplingUtils : For simple plotting and cutflow study. These two packages are included as submodules in this project, so that: We can pinpoint a specific commit of these packages. The development of these packages are often related to this project. Including them as submodules makes development easier. Initializing pyBabyMaker and pyTuplingUtils submodules After initial clone of this project, these submodules can be initialized with: git submodule update --init Info The git submodule only record the pointer to a commit of each submodule, no actual content is recorded in the mother project. For example, in lhcb-ntuples-gen , we only record that pyBabyMaker should be at commit a7bb2981 . When we do submodule update --init , git will clone the module and checkout said commit. Local development procedure cd into the submodule that you want to develop, here we use pyBabyMaker as an example: cd lib/python/pyBabyMaker Checkout the master branch with git checkout master 1 Do development, and when you want to test something, go back to lhcb-ntuples-gen project root, and: make install-dep This will install the latest pyBabyMaker , with your local changes. Test everything out. After everything works out: Commit changes inside the pyBabyMaker directory. Inside pyBabyMaker directory, push changes to pyBabyMaker remote. Go back to project root, Update pointer to the pyBabyMaker commit in the mother project. Makefile In the Makefile , we define targets to generate output files and results, such as: Step 2 ntuple Cutflow study tables However, make rules can be arcane, so if you want to figure out how make would produce a certain target: make --dry-run --always-make <target_name> Workflows Each analysis can have many workflows. For example RDX run 2 has rdx.py and rdx_cutflows.py in the workflows folder. Example In rdx.py , we have: JOBS = { # Run 2 'rdx-ntuple-run2-data-oldcut' : lambda name : workflow_data ( name , '../ntuples/0.9.4-trigger_emulation/Dst_D0-std' , '../postprocess/rdx-run2/rdx-run2_oldcut.yml' , executor = executor ), 'rdx-ntuple-run2-mc-demo' : lambda name : workflow_mc ( name , '../run2-rdx/samples/Dst_D0--21_07_30--mc--Bd2DstMuNu--2016--md--py8-sim09j-dv45-subset.root' , '../postprocess/rdx-run2/rdx-run2_oldcut.yml' , output_ntp_name_gen = parse_step2_name , executor = executor ), # Run 1 'rdx-ntuple-run1-data' : lambda name : workflow_data ( name , '../ntuples/0.9.2-2011_production/Dst_D0-std' , '../postprocess/rdx-run1/rdx-run1.yml' , use_ubdt = False , executor = executor ), 'ref-rdx-ntuple-run1-data' : lambda name : workflow_data ( name , '../ntuples/ref-rdx-run1/Dst-mix' , '../postprocess/ref-rdx-run1/rdst-2011-mix.yml' , use_ubdt = False , output_ntp_name_gen = parse_step2_name , executor = executor ) } The actual workflows are defined earlier in the same file. External programs used by workflows Greg's \\(\\mu\\) UBDT adder The name of the program is addUBDTBranch . It's source code, along with its Makefile , is available here . Let's back track on how it is made available in our lhcb-ntuples-gen environment: In this project's flake.nix , we have: # snippet only inputs = { nixpkgs = ... ; # software foundation, including compiles, etc. MuonBDTPid . url = \"github:umd-lhcb/MuonBDTPid\" ; }; outputs = { nixpkgs , MuonBDTPid , ... }: let pkgs = import nixpkgs { # We make packages defined in MuonBDTPid's overlay available overlays = [ MuonBDTPid . overlay ]; }; in { devShell = pkgs . mkShell { buildInputs = [ pkgs . addUBDTBranchWrapped # Install UBDT adder ]; }; } What we learned is that the UBDT adder is defined in MuonBDTPid 's overlay . Let's inspect its content: final : prev : { root5-ubdt = prev . callPackage . /root5 { inherit ( prev . darwin . apple_sdk . frameworks ) Cocoa OpenGL ; stdenv = if prev . stdenv . cc . isClang then prev . llvmPackages_5 . stdenv else prev . gcc8Stdenv ; }; addUBDTBranch = prev . callPackage . /addUBDTBranch { root = final . root5-ubdt ; stdenv = if prev . stdenv . cc . isClang then prev . llvmPackages_5 . stdenv else prev . gcc8Stdenv ; }; addUBDTBranchWrapped = prev . writeScriptBin \"addUBDTBranch\" '' unset LD_LIBRARY_PATH unset DYLD_LIBRARY_PATH exec ${ final . addUBDTBranch } /bin/addUBDTBranchRun2 $@ '' ; } Now we see addUBDTBranchWrapped is just a shell script that wraps around the executables in addUBDTBranch . The reason is that when you make ROOT available in a devShell , on Linux it will set LD_LIBRARY_PATH environment variable, which will mess up with the addUBDTBranch executables. We need to unset it first. Also, addUBDTBranch has an input called root , which is explicitly set to a patched version of ROOT 5 that contains UBDT. Finally, the actual derivation (directive on how to compile it with nix ) of addUBDTBranch is defined here . It is actually quite simple but we won't go over it here. This operation is only valid for newer git . Make sure you use an up-to-date git ! \u21a9","title":"Developing this project"},{"location":"ntupling/dev/#local-development-of-in-house-python-packages","text":"We have made several in-house Python packages, for example: pyBabyMaker : For producing step-2 ntuples. pyTuplingUtils : For simple plotting and cutflow study. These two packages are included as submodules in this project, so that: We can pinpoint a specific commit of these packages. The development of these packages are often related to this project. Including them as submodules makes development easier.","title":"Local development of in-house Python packages"},{"location":"ntupling/dev/#initializing-pybabymaker-and-pytuplingutils-submodules","text":"After initial clone of this project, these submodules can be initialized with: git submodule update --init Info The git submodule only record the pointer to a commit of each submodule, no actual content is recorded in the mother project. For example, in lhcb-ntuples-gen , we only record that pyBabyMaker should be at commit a7bb2981 . When we do submodule update --init , git will clone the module and checkout said commit.","title":"Initializing pyBabyMaker and pyTuplingUtils submodules"},{"location":"ntupling/dev/#local-development-procedure","text":"cd into the submodule that you want to develop, here we use pyBabyMaker as an example: cd lib/python/pyBabyMaker Checkout the master branch with git checkout master 1 Do development, and when you want to test something, go back to lhcb-ntuples-gen project root, and: make install-dep This will install the latest pyBabyMaker , with your local changes. Test everything out. After everything works out: Commit changes inside the pyBabyMaker directory. Inside pyBabyMaker directory, push changes to pyBabyMaker remote. Go back to project root, Update pointer to the pyBabyMaker commit in the mother project.","title":"Local development procedure"},{"location":"ntupling/dev/#makefile","text":"In the Makefile , we define targets to generate output files and results, such as: Step 2 ntuple Cutflow study tables However, make rules can be arcane, so if you want to figure out how make would produce a certain target: make --dry-run --always-make <target_name>","title":"Makefile"},{"location":"ntupling/dev/#workflows","text":"Each analysis can have many workflows. For example RDX run 2 has rdx.py and rdx_cutflows.py in the workflows folder. Example In rdx.py , we have: JOBS = { # Run 2 'rdx-ntuple-run2-data-oldcut' : lambda name : workflow_data ( name , '../ntuples/0.9.4-trigger_emulation/Dst_D0-std' , '../postprocess/rdx-run2/rdx-run2_oldcut.yml' , executor = executor ), 'rdx-ntuple-run2-mc-demo' : lambda name : workflow_mc ( name , '../run2-rdx/samples/Dst_D0--21_07_30--mc--Bd2DstMuNu--2016--md--py8-sim09j-dv45-subset.root' , '../postprocess/rdx-run2/rdx-run2_oldcut.yml' , output_ntp_name_gen = parse_step2_name , executor = executor ), # Run 1 'rdx-ntuple-run1-data' : lambda name : workflow_data ( name , '../ntuples/0.9.2-2011_production/Dst_D0-std' , '../postprocess/rdx-run1/rdx-run1.yml' , use_ubdt = False , executor = executor ), 'ref-rdx-ntuple-run1-data' : lambda name : workflow_data ( name , '../ntuples/ref-rdx-run1/Dst-mix' , '../postprocess/ref-rdx-run1/rdst-2011-mix.yml' , use_ubdt = False , output_ntp_name_gen = parse_step2_name , executor = executor ) } The actual workflows are defined earlier in the same file.","title":"Workflows"},{"location":"ntupling/dev/#external-programs-used-by-workflows","text":"","title":"External programs used by workflows"},{"location":"ntupling/dev/#gregs-mu-ubdt-adder","text":"The name of the program is addUBDTBranch . It's source code, along with its Makefile , is available here . Let's back track on how it is made available in our lhcb-ntuples-gen environment: In this project's flake.nix , we have: # snippet only inputs = { nixpkgs = ... ; # software foundation, including compiles, etc. MuonBDTPid . url = \"github:umd-lhcb/MuonBDTPid\" ; }; outputs = { nixpkgs , MuonBDTPid , ... }: let pkgs = import nixpkgs { # We make packages defined in MuonBDTPid's overlay available overlays = [ MuonBDTPid . overlay ]; }; in { devShell = pkgs . mkShell { buildInputs = [ pkgs . addUBDTBranchWrapped # Install UBDT adder ]; }; } What we learned is that the UBDT adder is defined in MuonBDTPid 's overlay . Let's inspect its content: final : prev : { root5-ubdt = prev . callPackage . /root5 { inherit ( prev . darwin . apple_sdk . frameworks ) Cocoa OpenGL ; stdenv = if prev . stdenv . cc . isClang then prev . llvmPackages_5 . stdenv else prev . gcc8Stdenv ; }; addUBDTBranch = prev . callPackage . /addUBDTBranch { root = final . root5-ubdt ; stdenv = if prev . stdenv . cc . isClang then prev . llvmPackages_5 . stdenv else prev . gcc8Stdenv ; }; addUBDTBranchWrapped = prev . writeScriptBin \"addUBDTBranch\" '' unset LD_LIBRARY_PATH unset DYLD_LIBRARY_PATH exec ${ final . addUBDTBranch } /bin/addUBDTBranchRun2 $@ '' ; } Now we see addUBDTBranchWrapped is just a shell script that wraps around the executables in addUBDTBranch . The reason is that when you make ROOT available in a devShell , on Linux it will set LD_LIBRARY_PATH environment variable, which will mess up with the addUBDTBranch executables. We need to unset it first. Also, addUBDTBranch has an input called root , which is explicitly set to a patched version of ROOT 5 that contains UBDT. Finally, the actual derivation (directive on how to compile it with nix ) of addUBDTBranch is defined here . It is actually quite simple but we won't go over it here. This operation is only valid for newer git . Make sure you use an up-to-date git ! \u21a9","title":"Greg's \\(\\mu\\) UBDT adder"},{"location":"ntupling/grid_job/","text":"Rationale The main limitation for local DaVinci docker is: Raw data files ( .dst ) need to be downloaded locally. Given that the size of .dst files is on the order of TBs, this method is only used for developing DaVinci scripts and first-order validation On lxplus , several official DaVinci versions are provided. However, there are some drawbacks: .dst files still need to be downloaded to some lxplus user directory While DaVinci is running, the connection to lxplus must be kept alive LHCb collaboration provides a solution: Submitting and running DaVinci jobs on a GRID. The advantages are: GRID know how to access .dst files directly, thus there's no need to manually download them. Instead, users need to specify the links ( LFN s) to desired .dst files While the GRID DaVinci jobs are running, there's no need to keep a connection to lxplus . The rest of this doc is divided in two parts: GRID job preparation and submission on lxplus Offline skimming and annexing of the produced ntuples on a local machine, most possibly on glacier . GRID job preparation and submission on lxplus Setup LHCb GRID certificate Following this twiki to: Apply for a GRID certificate Setup the certificate on lxplus Note The twiki claimed that a new user must physically go to CERN's user office to be able to apply for a new cert via ca.cern.ch . But I didn't have to do that. Compile a local DaVinci on lxplus We are using some non-official TupleTool , so we need to compile DaVinci on lxplus. First, we need to figure out the runtime dependency for our version of DaVinci: v45r6. lb-run -L DaVinci/v45r6 For v45r6, we pick the following runtime: x86_64-centos7-gcc9-opt . We should set that runtime as the default for lxplus . Add to your login shell config: export CMTCONFIG = x86_64-centos7-gcc9-opt export BINARY_TAG = $CMTCONFIG Now, run this script anywhere on lxplus to build a DaVinci with our customizations. The DaVinci will be available at $HOME/build/DaVinciDev_v45r6 . Configure ganga ganga is a command-line interface for LHCb GRID. We need to configure ganga job output directory. On lxplus : Run ganga once. This should create a .gangarc in $HOME . Locate gangadir option, point it to your larger AFS storage , for example: gangadir = /afs/cern.ch/user/s/suny/work/gangadir Go into your gangadir , create a workspace symblink pointing to somewhere in your EOS. For example: workspace -> /eos/home-s/suny/gangadir-workspace Copy ganga/ganga.sample.py to $HOME/.ganga.py on lxplus . Submitting a job with ganga Submitting jobs is very simple, you will simply copy a previous script that has similar features (eg. data, MC tracker-only), modify it appropriately, and run it. The detailed steps are Log on to lxplus and get a proxy with lhcb-proxy-init Clone lhcb-ntuples-gen and go to the appropriate jobs folder, for instance lhcb-ntuples-gen/run2-rdx/jobs/ Copy a script with similar characteristics and rename it with the current date and some description, for instance cp 22_02_03-tracker_only_Bs.sh 22_02_03-tracker_only_ddx_22to25.sh Modify the new script appropriately, for instance adding the MC IDs that you want to run. The script automatically sends the MagDown and MagUp for each sample. Run the script, eg. ./22_02_03-tracker_only_ddx_22to25.sh If there are no errors in the submission, commit the script to git Note An error such as GangaDiracError: All the files are only available on archive SEs. It is likely the data set has been archived. Contact data management to request that it be staged (consider --debug option for more information) simply means that the files that you are trying to run on do not exist, perhaps because you have a typo. Monitor the status of your jobs by entering interactive ganga (simply type ganga in lxplus after getting a proxy) and typing jobs Usage of ganga_jobs.py See this appendix . Update subjob status and force status to be \"failed\" when necessary Sometimes ganga would stuck at updating job status. To reset the status for \"completing\" and \"failed\" subjobs, do: jobs [ 63 ] . backend . reset ( True ) If that still doesn't bring a job to a stable state (i.e. \"finished\" or \"failed\"), force the job to fail: jobs [ 63 ] . force_status ( \"failed\" , force = True ) Handling failing subjobs The GRID job are split into subjobs, enabling parallel execution. Some subjobs may fail. Considering the following jobs output in ganga shell: [01:30:22] Ganga In [2]: jobs Ganga Out [2]: Registry Slice: jobs (30 objects) -------------- fqid | status | name | subjobs | application | backend | backend.actualCE | comment | subjob status ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 62 | completed |Dst_D0--20 | 26 | GaudiExec | Dirac | None | | 0/0/0/26 63 | failed |Dst_D0--20 | 1007 | GaudiExec | Dirac | None | | 0/1/0/1006 66 | failed |Dst_D0--20 | 1 | GaudiExec | Dirac | None | | 0/1/0/0 73 | completed |Dst_D0--20 | 772 | GaudiExec | Dirac | None | | 0/0/0/772 Jobs 63 and 66 are marked as failed because all of their subjobs are either completed or failed. To resubmit failed subjobs for, say, job[66] : jobs [ 63 ] . resubmit () However, above won't work unless all sub-jobs are either completed or failed. To resubmit the failed sub-jobs ASAP: jobs [ 63 ] . subjobs . select ( status = \"failed\" ) . resubmit () If you forced a \"failed\" status, some sub-jobs may be in \"killed\" state. A simple job[63].resubmit() won't resubmit these killed jobs. To resubmit them: jobs [ 63 ] . subjobs . select ( status = \"killed\" ) . resubmit () If for some jobs keep failing, consider the backend bad and ban it in: ganga_jobs.py : In BannedSites .ganga.py : In remake_uncompleted_job function parameter And remake the job (this may take a while before any output is printed out): remake_uncompleted_job ( 63 ) Note Unfortunately the backend option is read-only for existing jobs, so we have to remake a new job. Manage ganga job output You need to keep ganga running in a lxplus session to get up-to-date info about your jobs and download output of completed (sub)jobs. Skimming and annexing of GRID ntuples Offline skimming Before you proceed Clone lhcb-ntuples-gen on glacier and setup git-annex normally. Also don't forget to do make install-dep in the nix shell! We prefer to not merge .root files at all. Still, we need to give output files sane names and skim them to remove unneeded branches. Yipeng has prepared a ganga function that generates a bash script to aid the process. To use it: In ganga shell, type in hadd_completed_job_output(63) , where 63 is some job index. Info This will generated a batch_hadd.sh in $HOME . The generated script contains commands to merge output .root files for all completed jobs with a index that is greater or equal to the specified index. A script naed batch_skim.sh will be generated in $HOME on lxplus . A sample batch_skim.sh is displayed here . Copy batch_skim.sh to your lhcb-ntuples-gen root folder on glacier , then give it execution permission with chmod +x batch_skim.sh . Edit the following variables in batch_skim.sh : INPUT_DIR = /dev/null # NOTE: Configure this before proceed!!! SKIM_CONFIG = ./postprocess/skims/rdx_mc.yml # NOTE: Make sure you pick the right one!!! Use scp to copy finished jobs to some folder under in your $HOME on glacier Example Say your gangadir is at ~/eos/gangadir-workspace/suny/LocalXML , and you want to proceed job index 63 , then copy the folder 63 to glacier . Go into a nix shell in your lhcb-ntuples-gen with nix develop , then in the project root, run: ./batch_skim.sh ntuples/<folder_to_ntuple_output> For example, <folder_to_ntuple_output> can be: 0.9.6-2016-production/Dst_D0-mc-tracker-only Annex ntuples Use git anenx copy normally, then inform Manuel or Yipeng . They'll pull the ntuples to the public lhcb-ntuples-gen on glacier . Then you wan use git annex drop to remove your local copy (More on this later). Example Say you are working on ntuples/0.9.6-2016-production/Dst_D0-mc-tracker-only , the simplest way to annex your latest additional ntuples is this: cd ntuples/0.9.6-2016-production/Dst_D0-mc-tracker-only git annex add . It is safe to do so, because git-annex is smart enough to skim already annexed files. Info For more info on git-annex usage, review the git-annex entry . Appendix Sample batch_skim.sh #!/usr/bin/env bash INPUT_DIR = /dev/null # NOTE: Configure this before proceed!!! SKIM_CONFIG = ./postprocess/skims/rdx_mc.yml # NOTE: Make sure you pick the right one!!! OUTPUT_DIR = $1 MIN_NTUPLE_SIZE = 500 # in KiB function check_job () { local error = 0 local job_dir = ${ INPUT_DIR } / $1 echo \"Verifying output for Job $1 ...\" for sj in $( ls $job_dir | grep -E \"^[0-9].* $ \" ) ; do local file = $( find $job_dir / $sj /output -name '*.root' ) if [[ -z $file ]] ; then let \"error++\" echo \"subjob $sj : ntuple missing!\" else local size = $( du -b $file | awk '{print int($1 / 1024)}' ) # in KiB if [ $size -lt ${ MIN_NTUPLE_SIZE } ] ; then let \"error++\" echo \"subjob $sj : ntuple has a size of $size KiB, which is too small!\" fi fi done if [ $error -gt 0 ] ; then echo \"Job $1 output verification failed with $error error(s).\" fi return $error } function concat_job () { check_job $1 if [ $? -eq 0 ] ; then ./ganga/ganga_skim_job_output.py ${ OUTPUT_DIR } / $2 ${ INPUT_DIR } / $1 ${ SKIM_CONFIG } fi } concat_job 177 Dst_D0--22_02_03--mc--tracker_only--MC_2016_Beam6500GeV-2016-MagUp-TrackerOnly-Nu1.6-25ns-Pythia8_Sim09k_Reco16_Filtered_13674000_D0TAUNU.SAFESTRIPTRIG.DST.root General usage of ganga_jobs.py For this repo, there is a central ganga job submitter that should handle all job submissions for all analyses with all reconstruction scripts in all folders. The script is located at: ganga/ganga_jobs.py . For it The general syntax is: ganga_jobs.py <reco_script> <cond_files> For instance, for run 1 \\(R(D^{*})\\) signal Monte Carlo: ganga_jobs.py run1-rdx/reco_Dst_D0.py run1-rdx/cond/cond-mc-2012-md-sim08a.py -p mu -P Pythia6 -d 11574020 Note The -p and -P are optional. They have default values. The -d flag has a dummy default of 00000000 . For actual values, consult data sources . Info The usage of ganga_jobs.py is described by: ganga_jobs.py --help Most of submissions are wrapped in shell scripts. Some of them can be found here .","title":"Submitting DaVinci jobs to GRID"},{"location":"ntupling/grid_job/#rationale","text":"The main limitation for local DaVinci docker is: Raw data files ( .dst ) need to be downloaded locally. Given that the size of .dst files is on the order of TBs, this method is only used for developing DaVinci scripts and first-order validation On lxplus , several official DaVinci versions are provided. However, there are some drawbacks: .dst files still need to be downloaded to some lxplus user directory While DaVinci is running, the connection to lxplus must be kept alive LHCb collaboration provides a solution: Submitting and running DaVinci jobs on a GRID. The advantages are: GRID know how to access .dst files directly, thus there's no need to manually download them. Instead, users need to specify the links ( LFN s) to desired .dst files While the GRID DaVinci jobs are running, there's no need to keep a connection to lxplus . The rest of this doc is divided in two parts: GRID job preparation and submission on lxplus Offline skimming and annexing of the produced ntuples on a local machine, most possibly on glacier .","title":"Rationale"},{"location":"ntupling/grid_job/#grid-job-preparation-and-submission-on-lxplus","text":"","title":"GRID job preparation and submission on lxplus"},{"location":"ntupling/grid_job/#setup-lhcb-grid-certificate","text":"Following this twiki to: Apply for a GRID certificate Setup the certificate on lxplus Note The twiki claimed that a new user must physically go to CERN's user office to be able to apply for a new cert via ca.cern.ch . But I didn't have to do that.","title":"Setup LHCb GRID certificate"},{"location":"ntupling/grid_job/#compile-a-local-davinci-on-lxplus","text":"We are using some non-official TupleTool , so we need to compile DaVinci on lxplus. First, we need to figure out the runtime dependency for our version of DaVinci: v45r6. lb-run -L DaVinci/v45r6 For v45r6, we pick the following runtime: x86_64-centos7-gcc9-opt . We should set that runtime as the default for lxplus . Add to your login shell config: export CMTCONFIG = x86_64-centos7-gcc9-opt export BINARY_TAG = $CMTCONFIG Now, run this script anywhere on lxplus to build a DaVinci with our customizations. The DaVinci will be available at $HOME/build/DaVinciDev_v45r6 .","title":"Compile a local DaVinci on lxplus"},{"location":"ntupling/grid_job/#configure-ganga","text":"ganga is a command-line interface for LHCb GRID. We need to configure ganga job output directory. On lxplus : Run ganga once. This should create a .gangarc in $HOME . Locate gangadir option, point it to your larger AFS storage , for example: gangadir = /afs/cern.ch/user/s/suny/work/gangadir Go into your gangadir , create a workspace symblink pointing to somewhere in your EOS. For example: workspace -> /eos/home-s/suny/gangadir-workspace Copy ganga/ganga.sample.py to $HOME/.ganga.py on lxplus .","title":"Configure ganga"},{"location":"ntupling/grid_job/#submitting-a-job-with-ganga","text":"Submitting jobs is very simple, you will simply copy a previous script that has similar features (eg. data, MC tracker-only), modify it appropriately, and run it. The detailed steps are Log on to lxplus and get a proxy with lhcb-proxy-init Clone lhcb-ntuples-gen and go to the appropriate jobs folder, for instance lhcb-ntuples-gen/run2-rdx/jobs/ Copy a script with similar characteristics and rename it with the current date and some description, for instance cp 22_02_03-tracker_only_Bs.sh 22_02_03-tracker_only_ddx_22to25.sh Modify the new script appropriately, for instance adding the MC IDs that you want to run. The script automatically sends the MagDown and MagUp for each sample. Run the script, eg. ./22_02_03-tracker_only_ddx_22to25.sh If there are no errors in the submission, commit the script to git Note An error such as GangaDiracError: All the files are only available on archive SEs. It is likely the data set has been archived. Contact data management to request that it be staged (consider --debug option for more information) simply means that the files that you are trying to run on do not exist, perhaps because you have a typo. Monitor the status of your jobs by entering interactive ganga (simply type ganga in lxplus after getting a proxy) and typing jobs Usage of ganga_jobs.py See this appendix .","title":"Submitting a job with ganga"},{"location":"ntupling/grid_job/#update-subjob-status-and-force-status-to-be-failed-when-necessary","text":"Sometimes ganga would stuck at updating job status. To reset the status for \"completing\" and \"failed\" subjobs, do: jobs [ 63 ] . backend . reset ( True ) If that still doesn't bring a job to a stable state (i.e. \"finished\" or \"failed\"), force the job to fail: jobs [ 63 ] . force_status ( \"failed\" , force = True )","title":"Update subjob status and force status to be \"failed\" when necessary"},{"location":"ntupling/grid_job/#handling-failing-subjobs","text":"The GRID job are split into subjobs, enabling parallel execution. Some subjobs may fail. Considering the following jobs output in ganga shell: [01:30:22] Ganga In [2]: jobs Ganga Out [2]: Registry Slice: jobs (30 objects) -------------- fqid | status | name | subjobs | application | backend | backend.actualCE | comment | subjob status ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 62 | completed |Dst_D0--20 | 26 | GaudiExec | Dirac | None | | 0/0/0/26 63 | failed |Dst_D0--20 | 1007 | GaudiExec | Dirac | None | | 0/1/0/1006 66 | failed |Dst_D0--20 | 1 | GaudiExec | Dirac | None | | 0/1/0/0 73 | completed |Dst_D0--20 | 772 | GaudiExec | Dirac | None | | 0/0/0/772 Jobs 63 and 66 are marked as failed because all of their subjobs are either completed or failed. To resubmit failed subjobs for, say, job[66] : jobs [ 63 ] . resubmit () However, above won't work unless all sub-jobs are either completed or failed. To resubmit the failed sub-jobs ASAP: jobs [ 63 ] . subjobs . select ( status = \"failed\" ) . resubmit () If you forced a \"failed\" status, some sub-jobs may be in \"killed\" state. A simple job[63].resubmit() won't resubmit these killed jobs. To resubmit them: jobs [ 63 ] . subjobs . select ( status = \"killed\" ) . resubmit () If for some jobs keep failing, consider the backend bad and ban it in: ganga_jobs.py : In BannedSites .ganga.py : In remake_uncompleted_job function parameter And remake the job (this may take a while before any output is printed out): remake_uncompleted_job ( 63 ) Note Unfortunately the backend option is read-only for existing jobs, so we have to remake a new job. Manage ganga job output You need to keep ganga running in a lxplus session to get up-to-date info about your jobs and download output of completed (sub)jobs.","title":"Handling failing subjobs"},{"location":"ntupling/grid_job/#skimming-and-annexing-of-grid-ntuples","text":"","title":"Skimming and annexing of GRID ntuples"},{"location":"ntupling/grid_job/#offline-skimming","text":"Before you proceed Clone lhcb-ntuples-gen on glacier and setup git-annex normally. Also don't forget to do make install-dep in the nix shell! We prefer to not merge .root files at all. Still, we need to give output files sane names and skim them to remove unneeded branches. Yipeng has prepared a ganga function that generates a bash script to aid the process. To use it: In ganga shell, type in hadd_completed_job_output(63) , where 63 is some job index. Info This will generated a batch_hadd.sh in $HOME . The generated script contains commands to merge output .root files for all completed jobs with a index that is greater or equal to the specified index. A script naed batch_skim.sh will be generated in $HOME on lxplus . A sample batch_skim.sh is displayed here . Copy batch_skim.sh to your lhcb-ntuples-gen root folder on glacier , then give it execution permission with chmod +x batch_skim.sh . Edit the following variables in batch_skim.sh : INPUT_DIR = /dev/null # NOTE: Configure this before proceed!!! SKIM_CONFIG = ./postprocess/skims/rdx_mc.yml # NOTE: Make sure you pick the right one!!! Use scp to copy finished jobs to some folder under in your $HOME on glacier Example Say your gangadir is at ~/eos/gangadir-workspace/suny/LocalXML , and you want to proceed job index 63 , then copy the folder 63 to glacier . Go into a nix shell in your lhcb-ntuples-gen with nix develop , then in the project root, run: ./batch_skim.sh ntuples/<folder_to_ntuple_output> For example, <folder_to_ntuple_output> can be: 0.9.6-2016-production/Dst_D0-mc-tracker-only","title":"Offline skimming"},{"location":"ntupling/grid_job/#annex-ntuples","text":"Use git anenx copy normally, then inform Manuel or Yipeng . They'll pull the ntuples to the public lhcb-ntuples-gen on glacier . Then you wan use git annex drop to remove your local copy (More on this later). Example Say you are working on ntuples/0.9.6-2016-production/Dst_D0-mc-tracker-only , the simplest way to annex your latest additional ntuples is this: cd ntuples/0.9.6-2016-production/Dst_D0-mc-tracker-only git annex add . It is safe to do so, because git-annex is smart enough to skim already annexed files. Info For more info on git-annex usage, review the git-annex entry .","title":"Annex ntuples"},{"location":"ntupling/grid_job/#appendix","text":"","title":"Appendix"},{"location":"ntupling/grid_job/#sample-batch_skimsh","text":"#!/usr/bin/env bash INPUT_DIR = /dev/null # NOTE: Configure this before proceed!!! SKIM_CONFIG = ./postprocess/skims/rdx_mc.yml # NOTE: Make sure you pick the right one!!! OUTPUT_DIR = $1 MIN_NTUPLE_SIZE = 500 # in KiB function check_job () { local error = 0 local job_dir = ${ INPUT_DIR } / $1 echo \"Verifying output for Job $1 ...\" for sj in $( ls $job_dir | grep -E \"^[0-9].* $ \" ) ; do local file = $( find $job_dir / $sj /output -name '*.root' ) if [[ -z $file ]] ; then let \"error++\" echo \"subjob $sj : ntuple missing!\" else local size = $( du -b $file | awk '{print int($1 / 1024)}' ) # in KiB if [ $size -lt ${ MIN_NTUPLE_SIZE } ] ; then let \"error++\" echo \"subjob $sj : ntuple has a size of $size KiB, which is too small!\" fi fi done if [ $error -gt 0 ] ; then echo \"Job $1 output verification failed with $error error(s).\" fi return $error } function concat_job () { check_job $1 if [ $? -eq 0 ] ; then ./ganga/ganga_skim_job_output.py ${ OUTPUT_DIR } / $2 ${ INPUT_DIR } / $1 ${ SKIM_CONFIG } fi } concat_job 177 Dst_D0--22_02_03--mc--tracker_only--MC_2016_Beam6500GeV-2016-MagUp-TrackerOnly-Nu1.6-25ns-Pythia8_Sim09k_Reco16_Filtered_13674000_D0TAUNU.SAFESTRIPTRIG.DST.root","title":"Sample batch_skim.sh"},{"location":"ntupling/grid_job/#general-usage-of-ganga_jobspy","text":"For this repo, there is a central ganga job submitter that should handle all job submissions for all analyses with all reconstruction scripts in all folders. The script is located at: ganga/ganga_jobs.py . For it The general syntax is: ganga_jobs.py <reco_script> <cond_files> For instance, for run 1 \\(R(D^{*})\\) signal Monte Carlo: ganga_jobs.py run1-rdx/reco_Dst_D0.py run1-rdx/cond/cond-mc-2012-md-sim08a.py -p mu -P Pythia6 -d 11574020 Note The -p and -P are optional. They have default values. The -d flag has a dummy default of 00000000 . For actual values, consult data sources . Info The usage of ganga_jobs.py is described by: ganga_jobs.py --help Most of submissions are wrapped in shell scripts. Some of them can be found here .","title":"General usage of ganga_jobs.py"},{"location":"ntupling/installation/","text":"Note Before proceeding, send Yipeng or Manuel an SSH key to your system so that we can give you read/write permission to julian , the git-annex server where our ntuples are stored. Clone the repository and set up the annex component 1 . We have a private server, julian , that hosts git-annex files. git clone git@github.com:umd-lhcb/lhcb-ntuples-gen cd lhcb-ntuples-gen #git remote add julian git@129.2.92.92:lhcb-ntuples-gen # not needed unless you want to copy to julian git remote add glacier git@129.2.92.85:lhcb-ntuples-gen git annex init --version = 7 git submodule update --init # Do this before git annex sync to avoid potential mess-up of submodule pointers! git annex sync # It is higly recommended to install nix now before proceed! See below for some pointers on how to do it # If you have nix installed: # nix develop make install-dep Note that these commands will only initialize the files controlled by git-annex (several GB in total) with symbolic links. You typically will download individual files as you need them with git annex get <path_to_file> The set up above also installs in the lib/python/ folder pyBabyMaker , pyTuplingUtils , and other packages that are needed. Each commit of lhcb-ntuples-gen points to specific commits of these packages. Thus, every time you pull new code in lhcb-ntuples-gen , you need to make sure you have the appropriate commits of the other packages installed with git pull git submodule update --init --recursive make install-dep Install docker to run DaVinci locally We use docker to run a pre-built DaVinci image locally. To install docker : On Arch Linux run sudo pacman -S docker and follow this Arch wiki entry to finish the setup. In macOS, you can install it using homebrew with brew install docker Now it's time to pull (download) the pre-built DaVinci docker: docker pull umdlhcb/lhcb-stack-cc7:DaVinci-v45r6-SL Install nix All of our C++ dependencies are installed with nix . To install nix , refer to the guide in root-curated repo. Warning nix develop also provides a Python virtualenv. It is located in .virtualenv in project root. If a major update in nixpkgs occurs, Python may also get a significate update (e.g. Python 3.8 -> Python 3.9). In this case, the virtualenv may stop working. In any case, if you see any weired Python problem, simply delete the .virtualenv folder, then run nix develop again: A new virtualenv will be re-created. babymaker code babymaker is part of the pyBabyMaker Python package. It requires python3 and a couple of Python dependencies 3 . Note It is strongly recommended to install clang-format 4 , so the generated C++ code looks much nicer. pyBabyMaker is included in this project as a submodule. If you follow the project initialization procedure listed at the beginning of this instruction, you should already have it installed. Info For more info on local development of in-house Python modules (included as submodules), refer to this guide . Install VCS ( git and git-annex ) We use git to version-control the ntupling code and the wiki, and git-annex to version-control large files, mostly the input .dst files or important .root outputs. For more details on git-annex , see this brief introduction . On Arch Linux, simply issue the following command to install both programs: sudo pacman -S git git-annex On macOS, if you have homebrew installed: brew install git git-annex Windows filesystems don't support symbolic links, which makes git-annex almost unusable. Please use WSL or WSL2, and make sure the project is stored on a Linux file system! \u21a9 gcc must be recent enough to support c++17 standard. Effectively, gcc6 or clang5 (or newer) is required. In reality, you typically don't need to worry about this, as nix develop will prepare you a shell with almost all tools needed for this project. \u21a9 These dependencies are listed in <project_root>/requirements.txt . It is highly recommended to install pip to manage Python packages. Note that pyBabyMaker doesn't rely on ROOT at all. It is also highly recommended to use pyenv and pyenv-virtualenv to manage Python enviroments. Please google the installation instructions for your OS. \u21a9 clang-format usually comes with clang . A notable exception is on macOS. In that case, just type in brew install clang-format . \u21a9","title":"Installing dependencies"},{"location":"ntupling/installation/#install-docker-to-run-davinci-locally","text":"We use docker to run a pre-built DaVinci image locally. To install docker : On Arch Linux run sudo pacman -S docker and follow this Arch wiki entry to finish the setup. In macOS, you can install it using homebrew with brew install docker Now it's time to pull (download) the pre-built DaVinci docker: docker pull umdlhcb/lhcb-stack-cc7:DaVinci-v45r6-SL","title":"Install docker to run DaVinci locally"},{"location":"ntupling/installation/#install-nix","text":"All of our C++ dependencies are installed with nix . To install nix , refer to the guide in root-curated repo. Warning nix develop also provides a Python virtualenv. It is located in .virtualenv in project root. If a major update in nixpkgs occurs, Python may also get a significate update (e.g. Python 3.8 -> Python 3.9). In this case, the virtualenv may stop working. In any case, if you see any weired Python problem, simply delete the .virtualenv folder, then run nix develop again: A new virtualenv will be re-created.","title":"Install nix"},{"location":"ntupling/installation/#babymaker-code","text":"babymaker is part of the pyBabyMaker Python package. It requires python3 and a couple of Python dependencies 3 . Note It is strongly recommended to install clang-format 4 , so the generated C++ code looks much nicer. pyBabyMaker is included in this project as a submodule. If you follow the project initialization procedure listed at the beginning of this instruction, you should already have it installed. Info For more info on local development of in-house Python modules (included as submodules), refer to this guide .","title":"babymaker code"},{"location":"ntupling/installation/#install-vcs-git-and-git-annex","text":"We use git to version-control the ntupling code and the wiki, and git-annex to version-control large files, mostly the input .dst files or important .root outputs. For more details on git-annex , see this brief introduction . On Arch Linux, simply issue the following command to install both programs: sudo pacman -S git git-annex On macOS, if you have homebrew installed: brew install git git-annex Windows filesystems don't support symbolic links, which makes git-annex almost unusable. Please use WSL or WSL2, and make sure the project is stored on a Linux file system! \u21a9 gcc must be recent enough to support c++17 standard. Effectively, gcc6 or clang5 (or newer) is required. In reality, you typically don't need to worry about this, as nix develop will prepare you a shell with almost all tools needed for this project. \u21a9 These dependencies are listed in <project_root>/requirements.txt . It is highly recommended to install pip to manage Python packages. Note that pyBabyMaker doesn't rely on ROOT at all. It is also highly recommended to use pyenv and pyenv-virtualenv to manage Python enviroments. Please google the installation instructions for your OS. \u21a9 clang-format usually comes with clang . A notable exception is on macOS. In that case, just type in brew install clang-format . \u21a9","title":"Install VCS (git and git-annex)"},{"location":"ntupling/nomenclature/","text":"These rules are checked by a script automatically. General guidelines These filenames are case-sensitive No whitespace or \\ permitted. Replace them with _ Fields must be separated with -- Filenames Step 1 ntuples Step 1 ntuple filenames, DaVinci logs, and ganga jobs should follow this form: <particles>--<date>--<reco_mode>--[additional_flags]--<lfn>--[index]--[aux].root Note Below are the definitions of each field. Optional fields are marked with [] instead of <> . particles : For instance Dst , D0 , Dst_D0 , etc. date : Generation date. Formatted: YY_MM_DD . reco_mode : Reconstruction mode, for instance cutflow_mc or std . additional_flags : Optional. Additional descriptions, such as tracker_only . lfn : The full DIRAC LFN of the sample, replacing \\ and whitespace with _ . index : Optional. Index of the split sample. Ideally padding so ntuples. in the same folder have the same length. aux : Optional. Reserved for auxiliary ntuples. Start with aux . e.g. aux_ubdt . Example A ntuple name looks like this: Dst--20_05_08--cutflow_mc--bare--MC_2011_11874091_Beam3500GeV-2011-MagDown-Nu2-Pythia8_Sim08h_Digi13_Trig0x40760037_Reco14c_Stripping20r1NoPrescalingFlagged.root For split (unmerged) ntuples: Dst_D0--21_10_16--mc--tracker_only--MC_2016_Beam6500GeV-2016-MagDown-TrackerOnly-Nu1.6-25ns-Pythia8_Sim09k_Reco16_Filtered_11574021_D0TAUNU.SAFESTRIPTRIG.DST--406-dv.root Step 2 ntuples Step 2 ntuple filenames should follow this form: <particles>--<date>--<reco_mode>--<decay_mode>--<year>--<polarity>--[additional_flags]--[index].root Note Sample ntuples that are stored in the samples folder of each stripping line folder is considered step 2 ! Note Below are the definitions of the fields not defined above. decay_mode : Brief description of the reco'ed sample. e.g. data , cocktail , DstplusTauNu , 11574021 , or all if all samples merged year : Year the data/MC is recorded/generated. Format: YYYY . If multiple years needed, separate them with - . polarity : md (magnet down), mu (magnet up), or md-mu . Example An ntuple name looks like this: Dst--20_02_02--mc--DstplusMuNu--2012--md--dv36-py6-sim08a.root For split (unmerged) ntuples: D0--21_12_31--mc--11574021--2016--md--tracker_only--003.root Condition files Condition files should follow this filename: cond-<type>-<year>-[polarity]-[additional_flags].py All fields obey the same definitions as listed in previous sections. Note Condition files are located in conds folder of each stripping line folder. Note The <polarity> and <additional_flags> fields are optional for condition files. Log files Log files should follow this naming convention: <particles>-<date>-<reco_mode>-[additional_flags].log All fields obey the same definitions as listed in previous sections. Note Log files are located in logs folder of each stripping line folder. Folder structure for storage Production ntuples Each ntuple production (defined by the same code) is to be placed in one folder named <code_tag>-<description> , with subfolders containing divisions in terms of reco_sample and mc/data . For example, the folder structure could look like: 0.9.0-cutflow/Dst-cutflow_mc 0.9.1-partial_refit/Dst-mc 0.9.1-partial_refit/Dst-data 0.9.1-partial_refit/D0-mc 0.9.1-partial_refit/D0-data 0.9.1-partial_refit/Dst-cutflow_mc ... DST folders DST folders should follow this naming convention: <reco_sample>-<year>-<polarity>-[additional_flags] All fields obey the same definitions as listed in previous sections. This time, the first three fields are mandatory. Note DST folders are located in data folder of each stripping line folder.","title":"Nomenclature"},{"location":"ntupling/nomenclature/#general-guidelines","text":"These filenames are case-sensitive No whitespace or \\ permitted. Replace them with _ Fields must be separated with --","title":"General guidelines"},{"location":"ntupling/nomenclature/#filenames","text":"","title":"Filenames"},{"location":"ntupling/nomenclature/#step-1-ntuples","text":"Step 1 ntuple filenames, DaVinci logs, and ganga jobs should follow this form: <particles>--<date>--<reco_mode>--[additional_flags]--<lfn>--[index]--[aux].root Note Below are the definitions of each field. Optional fields are marked with [] instead of <> . particles : For instance Dst , D0 , Dst_D0 , etc. date : Generation date. Formatted: YY_MM_DD . reco_mode : Reconstruction mode, for instance cutflow_mc or std . additional_flags : Optional. Additional descriptions, such as tracker_only . lfn : The full DIRAC LFN of the sample, replacing \\ and whitespace with _ . index : Optional. Index of the split sample. Ideally padding so ntuples. in the same folder have the same length. aux : Optional. Reserved for auxiliary ntuples. Start with aux . e.g. aux_ubdt . Example A ntuple name looks like this: Dst--20_05_08--cutflow_mc--bare--MC_2011_11874091_Beam3500GeV-2011-MagDown-Nu2-Pythia8_Sim08h_Digi13_Trig0x40760037_Reco14c_Stripping20r1NoPrescalingFlagged.root For split (unmerged) ntuples: Dst_D0--21_10_16--mc--tracker_only--MC_2016_Beam6500GeV-2016-MagDown-TrackerOnly-Nu1.6-25ns-Pythia8_Sim09k_Reco16_Filtered_11574021_D0TAUNU.SAFESTRIPTRIG.DST--406-dv.root","title":"Step 1 ntuples"},{"location":"ntupling/nomenclature/#step-2-ntuples","text":"Step 2 ntuple filenames should follow this form: <particles>--<date>--<reco_mode>--<decay_mode>--<year>--<polarity>--[additional_flags]--[index].root Note Sample ntuples that are stored in the samples folder of each stripping line folder is considered step 2 ! Note Below are the definitions of the fields not defined above. decay_mode : Brief description of the reco'ed sample. e.g. data , cocktail , DstplusTauNu , 11574021 , or all if all samples merged year : Year the data/MC is recorded/generated. Format: YYYY . If multiple years needed, separate them with - . polarity : md (magnet down), mu (magnet up), or md-mu . Example An ntuple name looks like this: Dst--20_02_02--mc--DstplusMuNu--2012--md--dv36-py6-sim08a.root For split (unmerged) ntuples: D0--21_12_31--mc--11574021--2016--md--tracker_only--003.root","title":"Step 2 ntuples"},{"location":"ntupling/nomenclature/#condition-files","text":"Condition files should follow this filename: cond-<type>-<year>-[polarity]-[additional_flags].py All fields obey the same definitions as listed in previous sections. Note Condition files are located in conds folder of each stripping line folder. Note The <polarity> and <additional_flags> fields are optional for condition files.","title":"Condition files"},{"location":"ntupling/nomenclature/#log-files","text":"Log files should follow this naming convention: <particles>-<date>-<reco_mode>-[additional_flags].log All fields obey the same definitions as listed in previous sections. Note Log files are located in logs folder of each stripping line folder.","title":"Log files"},{"location":"ntupling/nomenclature/#folder-structure-for-storage","text":"","title":"Folder structure for storage"},{"location":"ntupling/nomenclature/#production-ntuples","text":"Each ntuple production (defined by the same code) is to be placed in one folder named <code_tag>-<description> , with subfolders containing divisions in terms of reco_sample and mc/data . For example, the folder structure could look like: 0.9.0-cutflow/Dst-cutflow_mc 0.9.1-partial_refit/Dst-mc 0.9.1-partial_refit/Dst-data 0.9.1-partial_refit/D0-mc 0.9.1-partial_refit/D0-data 0.9.1-partial_refit/Dst-cutflow_mc ...","title":"Production ntuples"},{"location":"ntupling/nomenclature/#dst-folders","text":"DST folders should follow this naming convention: <reco_sample>-<year>-<polarity>-[additional_flags] All fields obey the same definitions as listed in previous sections. This time, the first three fields are mandatory. Note DST folders are located in data folder of each stripping line folder.","title":"DST folders"},{"location":"ntupling/step1_davinci/","text":"Info DaVinci is the LHCb package that runs preliminary selections and calculations on the raw .dst data, and produces .root files. It is often run on LHC remote Linux nodes lxplus . It is much more convenient to have a local DaVinci environment in a docker with a configuration that is easily shared. After the docker is pulled as described in the dependencies , it is launched from inside the project root with: make docker-dv This command mounts the project root into the docker, so it has access to all the code in lhcb-ntuples-gen and allows you to modify it outside of the docker. Launch DaVinci with additional TupleTool with this command, inside docker : run gaudirun.py <ntuple_options1> <ntuple_options2> ... We often have scripts that facilitate this. For instance, to run on Run 2 data, type in the docker : cd run2-rdx ./run.sh conds/cond-std-2016.py Warning The required .dst files need to be downloaded via git-annex OUTSIDE docker: cd run2-rdx git annex get data/data-2016-md # ~4.7 GB, this will take several minutes Note Inside the run script, the reco_Dst_D0.py script in the same directory is called for \\(D^{*+}(\\to D^0(\\to K^+\\pi^-)\\pi^+)\\mu^-\\) reconstruction. It also sets how many events to run at most ( EvtMax ) and the print frequency ( PrintFreq ). To use a different reco script, edit run.sh . The argument, conds/cond-std-2016.py , sets the type of input data (Data or MC), the input files and the name of the output file ( std.root in this case). Info For more info about docker usage, refer to this guide . For more info about Makefile , refer to this guide .","title":"Step 1 ntuples with Davinci"},{"location":"ntupling/step2_babymaker/","text":"babymaker is a part of the pyBabyMaker library. Please refer to the official document for its command line usage and internal APIs. Generating a C++ file with babymaker The general idea is that babymaker takes: A YAML file as configuration, denote as cfg_yml A C++ \"template\" that babymaker can work on, denote as cpp_tmpl Main ntuple file that you want to work on, denote as main_ntp Optionally many friend ntuples that have part of their tree structures identical to that of the main, denote as friend_ntp1 , friend_ntp2 , ... To generate our final C++ file: babymaker -i <cfg_yml> -n <main_ntp> -f <friend_ntp1> <friend_ntp2> ... -o <output_cpp> -t <cpp_tmpl> Next, the following shell snippet should be enough to get generated C++ compiled in this repo: DIR = \" $( cd \" $( dirname \" ${ BASH_SOURCE [0] } \" ) \" & > /dev/null && pwd ) \" HEADER_DIR = $DIR /../../include COMPILER = $( root-config --cxx ) CXX_FLAGS = $( root-config --cflags ) LINK_FLAGS = $( root-config --libs ) ADDF_FLAGS = \"-I ${ HEADER_DIR } \" cpp_compile () { ${ COMPILER } -O2 ${ CXX_FLAGS } ${ ADDF_FLAGS } -o baby baby.cpp ${ LINK_FLAGS } # -O2 is the optimization level flag } cpp_compile # assuming generated C++ file is named 'baby.cpp' The actual usage of compiled baby depends on your C++ \"template\". How does babymaker work, internally? Internally babymaker really does 2 things (conceptually): Directive generation : Figure out needed branches based on input ntuples and YML file and define output in a way that the branch dependencies are resolved properly. Internally, a directive is generated and passed to the next step. C++ generation : The directive from the previous step is passed to a general macro processor, similar to jekyll . Based on the input C++ template, the directive is implemented in a C++ output file.","title":"Step 2 ntuples with babymaker"},{"location":"ntupling/step2_babymaker/#generating-a-c-file-with-babymaker","text":"The general idea is that babymaker takes: A YAML file as configuration, denote as cfg_yml A C++ \"template\" that babymaker can work on, denote as cpp_tmpl Main ntuple file that you want to work on, denote as main_ntp Optionally many friend ntuples that have part of their tree structures identical to that of the main, denote as friend_ntp1 , friend_ntp2 , ... To generate our final C++ file: babymaker -i <cfg_yml> -n <main_ntp> -f <friend_ntp1> <friend_ntp2> ... -o <output_cpp> -t <cpp_tmpl> Next, the following shell snippet should be enough to get generated C++ compiled in this repo: DIR = \" $( cd \" $( dirname \" ${ BASH_SOURCE [0] } \" ) \" & > /dev/null && pwd ) \" HEADER_DIR = $DIR /../../include COMPILER = $( root-config --cxx ) CXX_FLAGS = $( root-config --cflags ) LINK_FLAGS = $( root-config --libs ) ADDF_FLAGS = \"-I ${ HEADER_DIR } \" cpp_compile () { ${ COMPILER } -O2 ${ CXX_FLAGS } ${ ADDF_FLAGS } -o baby baby.cpp ${ LINK_FLAGS } # -O2 is the optimization level flag } cpp_compile # assuming generated C++ file is named 'baby.cpp' The actual usage of compiled baby depends on your C++ \"template\".","title":"Generating a C++ file with babymaker"},{"location":"ntupling/step2_babymaker/#how-does-babymaker-work-internally","text":"Internally babymaker really does 2 things (conceptually): Directive generation : Figure out needed branches based on input ntuples and YML file and define output in a way that the branch dependencies are resolved properly. Internally, a directive is generated and passed to the next step. C++ generation : The directive from the previous step is passed to a general macro processor, similar to jekyll . Based on the input C++ template, the directive is implemented in a C++ output file.","title":"How does babymaker work, internally?"},{"location":"physics/b0_oscillation/","text":"\\(B_0\\) oscillation \\(B_0\\) oscillation refers to the fact some of the \\(B_0\\) oscillate into \\(\\bar{B_0}\\) before they decay. For real data reconstruction, this doesn't require additional consideration, as we only know the quark content of the \\(B\\) mesons, be it \\(B_0\\) or \\(\\bar{B_0}\\) , before they decay. However, for MC truth reconstruction (this applies to MCDecayTreeTuple only), we are concerned about the initial states of the \\(B\\) mesons. Instead of naively writing decay descriptors like this: '$ {b0} [B~0 -> $ {dst} (D*(2010)+ -> $ {d0} (D0 -> $ {k} K- $ {pi} pi+) $ {spi} pi+) $ {mu} mu-]CC' We need to take \\(B_0\\) oscillation into account: '(' '$ {b0} [B~0 => $ {dst} (D*(2010)+ => $ {d0} (D0 => $ {k} K- $ {pi} pi+) $ {spi} pi+) $ {mu} mu- $ {anu_mu} nu_mu~]CC' '||' '$ {b0} [B0 => $ {dst} (D*(2010)+ => $ {d0} (D0 => $ {k} K- $ {pi} pi+) $ {spi} pi+) $ {mu} mu- $ {anu_mu} nu_mu~]CC' ')'","title":"B0 oscillation"},{"location":"physics/b0_oscillation/#b_0-oscillation","text":"\\(B_0\\) oscillation refers to the fact some of the \\(B_0\\) oscillate into \\(\\bar{B_0}\\) before they decay. For real data reconstruction, this doesn't require additional consideration, as we only know the quark content of the \\(B\\) mesons, be it \\(B_0\\) or \\(\\bar{B_0}\\) , before they decay. However, for MC truth reconstruction (this applies to MCDecayTreeTuple only), we are concerned about the initial states of the \\(B\\) mesons. Instead of naively writing decay descriptors like this: '$ {b0} [B~0 -> $ {dst} (D*(2010)+ -> $ {d0} (D0 -> $ {k} K- $ {pi} pi+) $ {spi} pi+) $ {mu} mu-]CC' We need to take \\(B_0\\) oscillation into account: '(' '$ {b0} [B~0 => $ {dst} (D*(2010)+ => $ {d0} (D0 => $ {k} K- $ {pi} pi+) $ {spi} pi+) $ {mu} mu- $ {anu_mu} nu_mu~]CC' '||' '$ {b0} [B0 => $ {dst} (D*(2010)+ => $ {d0} (D0 => $ {k} K- $ {pi} pi+) $ {spi} pi+) $ {mu} mu- $ {anu_mu} nu_mu~]CC' ')'","title":"\\(B_0\\) oscillation"},{"location":"physics/momentum_scaling/","text":"For data processing, at LHCb: Scale the data momentum, because data measurements are biased. This bias can be detected and calibrated using some well-known decay mode (such as \\(J/\\Psi \\rightarrow \\mu \\mu\\) ). Smear the MC momentum, because MC measurements are too good.","title":"Momentum scaling"},{"location":"physics/track_chi2ndof_data_mc_inconsistency/","text":"Track \\(\\chi^2/DOF\\) data-MC inconsistency For the run 1 and 2 data-MC comparison, we observed that for run 1 data, MC and run 2 MC, their track \\(\\chi^2/DOF\\) distributions are all centered around 1, yet that of run 2 data is centered around 0.75: Puzzled by this, we asked experts 1 about this. The answer was: The OT drift time was improved so the actual tracking performance is better This is mostly due to better alignment and calibrations. However, the OT uncertainties used in \\(\\chi^2\\) calculation was not updated for data, and data only . Now we have something like this: mode residual resolution data new old MC new new Note that \\(\\chi^2\\) here is computed by \\(\\frac{\\text{residual}}{\\text{resolution}}\\) . As a result, MC does not agree with data. Note In DaVinci , the branch name is _TRACK_CHI2NDOF This also affects related variables, like Ghost probability rate ( _TRACK_GhostProb ) The implication of this is still under discussion Gregory Ciezarek and Lucia Grillo \u21a9","title":"Track \u03c7\u00b2/DOF inconsistency in run 2 data-MC"},{"location":"physics/track_chi2ndof_data_mc_inconsistency/#track-chi2dof-data-mc-inconsistency","text":"For the run 1 and 2 data-MC comparison, we observed that for run 1 data, MC and run 2 MC, their track \\(\\chi^2/DOF\\) distributions are all centered around 1, yet that of run 2 data is centered around 0.75: Puzzled by this, we asked experts 1 about this. The answer was: The OT drift time was improved so the actual tracking performance is better This is mostly due to better alignment and calibrations. However, the OT uncertainties used in \\(\\chi^2\\) calculation was not updated for data, and data only . Now we have something like this: mode residual resolution data new old MC new new Note that \\(\\chi^2\\) here is computed by \\(\\frac{\\text{residual}}{\\text{resolution}}\\) . As a result, MC does not agree with data. Note In DaVinci , the branch name is _TRACK_CHI2NDOF This also affects related variables, like Ghost probability rate ( _TRACK_GhostProb ) The implication of this is still under discussion Gregory Ciezarek and Lucia Grillo \u21a9","title":"Track \\(\\chi^2/DOF\\) data-MC inconsistency"},{"location":"physics/transverse_energy/","text":"Transverse energy \\(E_T\\) Transverse energy \\(E_T\\) is defined as (taken from p. 4 of this paper ): \\[ E_T = E \\sin\\theta = \\sqrt{m^2 + p^2} \\sin\\theta \\] In the massless limit: \\[ E_T \\approx \\sqrt{p^2} \\sin\\theta = p_T \\] \\(E_T\\) -related variables in TupleToolL0Calo In TupleToolL0Calo , there's 3 variables that are related to \\(E_T\\) : realET TriggerET TriggerHCALET Info For the rest of the article, assume we use TupleToolL0Calo on HCAL. realET This is \\(E_T\\) computed at HCAL: trackET = TMath :: Sqrt ( TMath :: Power ( m_part2calo -> caloState (). x (), 2 ) + TMath :: Power ( m_part2calo -> caloState (). y (), 2 ) ) / TMath :: Sqrt ( TMath :: Power ( m_part2calo -> caloState (). x (), 2 ) + TMath :: Power ( m_part2calo -> caloState (). y (), 2 ) + TMath :: Power ( m_part2calo -> caloState (). z (), 2 ) ) * TMath :: Sqrt ( TMath :: Power ( m_part2calo -> caloState (). p (), 2 ) + TMath :: Power ( P -> measuredMass (), 2 ) ); // ... test &= tuple -> column ( prefix + \"_L0Calo_HCAL_realET\" , trackET ); Conceptually, it really is just: \\[ \\sqrt{p^2 + m^2} \\sin\\theta \\] But here both \\(p\\) and \\(m\\) are measured, not MC truth. I'm having trouble giving it a good name. Question Naively I'd call it tracker \\(E_T\\) , but from the code it is the \\(E_T\\) at HCAL, and HCAL is not adjacent to a tracker: Before HCAL it is the ECAL, after HCAL Muon stations. But it really is not MC truth \\(E_T\\) either, because we are using measuredMass . TriggerET Before you proceed TriggerET and TriggerHCALET are defined in one block: double triggerET ( -1. ), triggerHCALET ( -1. ), xtrigger ( 0. ), ytrigger ( 0. ); if ( m_fillTriggerEt ) { triggerET = getAssociatedCluster ( triggerHCALET , xtrigger , ytrigger ); } // ... test &= tuple -> column ( prefix + \"_L0Calo_HCAL_TriggerET\" , triggerET ); test &= tuple -> column ( prefix + \"_L0Calo_HCAL_TriggerHCALET\" , triggerHCALET ); This is the maximum \\(E_T\\) measured by the whole detector for all L0 hadron candidates associated with the track. Note that: For the track, we find the center cell it supposed to hit based on its projectile, as well as the 3x3 neighbor cells, denote it track cells. For each hadron candidate, we find the HCAL cell it hits as well as the nearby top, right, and top right cells. Here we have a total of 2x2 cells, denote it candidate cells. Check if there's any overlap between the candidate cells and the track cells. If there is overlap, use this candidate's \\(E_T\\) as track \\(E_T\\) if \\(E_{T_{cand}} > E_{T_{prev}}\\) . Note Checking overlap is basically checking whether this L0 hadron candidate is associated with the track. Repeat this process for all L0 hadron candidates. // First get the CALO cells in the 3x3 cluster around the track projection std :: vector < LHCb :: CaloCellID > cells3x3 ; if ( m_part2calo -> isValid () ) { // 'm_part2calo' is the track const LHCb :: CaloCellID centerCell = m_part2calo -> caloCellID (); cells3x3 . push_back ( centerCell ); BOOST_FOREACH ( LHCb :: CaloCellID cell , m_caloDe -> neighborCells ( centerCell ) ) { cells3x3 . push_back ( cell ); }; } std :: sort ( cells3x3 . begin (), cells3x3 . end () ); // loop over the L0 candidates LHCb :: L0CaloCandidates * candidates = getIfExists < LHCb :: L0CaloCandidates > ( m_location ); if ( m_calo == \"HCAL\" ) typeToCheck = L0DUBase :: CaloType :: Hadron ; LHCb :: L0CaloCandidates :: iterator cand ; double result = -1. ; // 'result' is TriggerET for ( cand = candidates -> begin (); candidates -> end () != cand ; ++ cand ) { LHCb :: L0CaloCandidate * theCand = ( * cand ); if ( theCand -> type () == typeToCheck ) { LHCb :: CaloCellID cell1 , cell2 , cell3 , cell4 ; cell1 = theCand -> id (); cell2 = LHCb :: CaloCellID ( cell1 . calo (), cell1 . area (), cell1 . row () + 1 , cell1 . col () ); cell3 = LHCb :: CaloCellID ( cell1 . calo (), cell1 . area (), cell1 . row (), cell1 . col () + 1 ); cell4 = LHCb :: CaloCellID ( cell1 . calo (), cell1 . area (), cell1 . row () + 1 , cell1 . col () + 1 ); if ( std :: binary_search ( cells3x3 . begin (), cells3x3 . end (), cell1 ) || std :: binary_search ( cells3x3 . begin (), cells3x3 . end (), cell2 ) || std :: binary_search ( cells3x3 . begin (), cells3x3 . end (), cell3 ) || std :: binary_search ( cells3x3 . begin (), cells3x3 . end (), cell4 ) ) { if ( theCand -> et () > result ) { result = theCand -> et (); // This is the key line! // ... } } } } TriggerHCALET This is the maximum \\(E_T\\) measured by HCAL only for all hadron candidates associated with the track. The procedure is similar to that of TriggerET , the only difference is: instead of using theCand->et() , we find the associated HCAL cells and readout the ADC values associated with the hadron candidate and convert it to energy. // Compute the HCAL energy of this cluster // ... hcal_energy = 0. ; // 'hcal_energy' is TriggerHCALET const std :: vector < LHCb :: L0CaloAdc >& adcs = m_adcsHcal -> adcs (); for ( std :: vector < LHCb :: L0CaloAdc >:: const_iterator itAdc = adcs . begin (); adcs . end () != itAdc ; ++ itAdc ) { LHCb :: CaloCellID id = ( * itAdc ). cellID (); if ( ( id == cell1 ) || ( id == cell2 ) || ( id == cell3 ) || ( id == cell4 ) ) hcal_energy += ( * itAdc ). adc (); } if ( hcal_energy > 255 ) hcal_energy = 255 ; hcal_energy = hcal_energy * ( m_caloDe -> L0EtGain () );","title":"Transverse energy"},{"location":"physics/transverse_energy/#transverse-energy-e_t","text":"Transverse energy \\(E_T\\) is defined as (taken from p. 4 of this paper ): \\[ E_T = E \\sin\\theta = \\sqrt{m^2 + p^2} \\sin\\theta \\] In the massless limit: \\[ E_T \\approx \\sqrt{p^2} \\sin\\theta = p_T \\]","title":"Transverse energy \\(E_T\\)"},{"location":"physics/transverse_energy/#e_t-related-variables-in-tupletooll0calo","text":"In TupleToolL0Calo , there's 3 variables that are related to \\(E_T\\) : realET TriggerET TriggerHCALET Info For the rest of the article, assume we use TupleToolL0Calo on HCAL.","title":"\\(E_T\\)-related variables in TupleToolL0Calo"},{"location":"physics/transverse_energy/#realet","text":"This is \\(E_T\\) computed at HCAL: trackET = TMath :: Sqrt ( TMath :: Power ( m_part2calo -> caloState (). x (), 2 ) + TMath :: Power ( m_part2calo -> caloState (). y (), 2 ) ) / TMath :: Sqrt ( TMath :: Power ( m_part2calo -> caloState (). x (), 2 ) + TMath :: Power ( m_part2calo -> caloState (). y (), 2 ) + TMath :: Power ( m_part2calo -> caloState (). z (), 2 ) ) * TMath :: Sqrt ( TMath :: Power ( m_part2calo -> caloState (). p (), 2 ) + TMath :: Power ( P -> measuredMass (), 2 ) ); // ... test &= tuple -> column ( prefix + \"_L0Calo_HCAL_realET\" , trackET ); Conceptually, it really is just: \\[ \\sqrt{p^2 + m^2} \\sin\\theta \\] But here both \\(p\\) and \\(m\\) are measured, not MC truth. I'm having trouble giving it a good name. Question Naively I'd call it tracker \\(E_T\\) , but from the code it is the \\(E_T\\) at HCAL, and HCAL is not adjacent to a tracker: Before HCAL it is the ECAL, after HCAL Muon stations. But it really is not MC truth \\(E_T\\) either, because we are using measuredMass .","title":"realET"},{"location":"physics/transverse_energy/#triggeret","text":"Before you proceed TriggerET and TriggerHCALET are defined in one block: double triggerET ( -1. ), triggerHCALET ( -1. ), xtrigger ( 0. ), ytrigger ( 0. ); if ( m_fillTriggerEt ) { triggerET = getAssociatedCluster ( triggerHCALET , xtrigger , ytrigger ); } // ... test &= tuple -> column ( prefix + \"_L0Calo_HCAL_TriggerET\" , triggerET ); test &= tuple -> column ( prefix + \"_L0Calo_HCAL_TriggerHCALET\" , triggerHCALET ); This is the maximum \\(E_T\\) measured by the whole detector for all L0 hadron candidates associated with the track. Note that: For the track, we find the center cell it supposed to hit based on its projectile, as well as the 3x3 neighbor cells, denote it track cells. For each hadron candidate, we find the HCAL cell it hits as well as the nearby top, right, and top right cells. Here we have a total of 2x2 cells, denote it candidate cells. Check if there's any overlap between the candidate cells and the track cells. If there is overlap, use this candidate's \\(E_T\\) as track \\(E_T\\) if \\(E_{T_{cand}} > E_{T_{prev}}\\) . Note Checking overlap is basically checking whether this L0 hadron candidate is associated with the track. Repeat this process for all L0 hadron candidates. // First get the CALO cells in the 3x3 cluster around the track projection std :: vector < LHCb :: CaloCellID > cells3x3 ; if ( m_part2calo -> isValid () ) { // 'm_part2calo' is the track const LHCb :: CaloCellID centerCell = m_part2calo -> caloCellID (); cells3x3 . push_back ( centerCell ); BOOST_FOREACH ( LHCb :: CaloCellID cell , m_caloDe -> neighborCells ( centerCell ) ) { cells3x3 . push_back ( cell ); }; } std :: sort ( cells3x3 . begin (), cells3x3 . end () ); // loop over the L0 candidates LHCb :: L0CaloCandidates * candidates = getIfExists < LHCb :: L0CaloCandidates > ( m_location ); if ( m_calo == \"HCAL\" ) typeToCheck = L0DUBase :: CaloType :: Hadron ; LHCb :: L0CaloCandidates :: iterator cand ; double result = -1. ; // 'result' is TriggerET for ( cand = candidates -> begin (); candidates -> end () != cand ; ++ cand ) { LHCb :: L0CaloCandidate * theCand = ( * cand ); if ( theCand -> type () == typeToCheck ) { LHCb :: CaloCellID cell1 , cell2 , cell3 , cell4 ; cell1 = theCand -> id (); cell2 = LHCb :: CaloCellID ( cell1 . calo (), cell1 . area (), cell1 . row () + 1 , cell1 . col () ); cell3 = LHCb :: CaloCellID ( cell1 . calo (), cell1 . area (), cell1 . row (), cell1 . col () + 1 ); cell4 = LHCb :: CaloCellID ( cell1 . calo (), cell1 . area (), cell1 . row () + 1 , cell1 . col () + 1 ); if ( std :: binary_search ( cells3x3 . begin (), cells3x3 . end (), cell1 ) || std :: binary_search ( cells3x3 . begin (), cells3x3 . end (), cell2 ) || std :: binary_search ( cells3x3 . begin (), cells3x3 . end (), cell3 ) || std :: binary_search ( cells3x3 . begin (), cells3x3 . end (), cell4 ) ) { if ( theCand -> et () > result ) { result = theCand -> et (); // This is the key line! // ... } } } }","title":"TriggerET"},{"location":"physics/transverse_energy/#triggerhcalet","text":"This is the maximum \\(E_T\\) measured by HCAL only for all hadron candidates associated with the track. The procedure is similar to that of TriggerET , the only difference is: instead of using theCand->et() , we find the associated HCAL cells and readout the ADC values associated with the hadron candidate and convert it to energy. // Compute the HCAL energy of this cluster // ... hcal_energy = 0. ; // 'hcal_energy' is TriggerHCALET const std :: vector < LHCb :: L0CaloAdc >& adcs = m_adcsHcal -> adcs (); for ( std :: vector < LHCb :: L0CaloAdc >:: const_iterator itAdc = adcs . begin (); adcs . end () != itAdc ; ++ itAdc ) { LHCb :: CaloCellID id = ( * itAdc ). cellID (); if ( ( id == cell1 ) || ( id == cell2 ) || ( id == cell3 ) || ( id == cell4 ) ) hcal_energy += ( * itAdc ). adc (); } if ( hcal_energy > 255 ) hcal_energy = 255 ; hcal_energy = hcal_energy * ( m_caloDe -> L0EtGain () );","title":"TriggerHCALET"},{"location":"physics/wrong_sign_particles/","text":"Note that we are not guaranteed to be reconstructing real particles. Instead, we are looking at combinations of reconstructed tracks with specific properties consistent with originating from a common vertex. These reconstructed particles may original from different mothers---they may still pass our vertexing criteria by sheer coincidence combined with resolution effects and the fact that tracks don't have an origin point. By looking at wrong-sign combinations, we get a pure sample of \"candidates\" that did not originate from a common mother (charged was not conserved in this \"decay\" mode, so it is not physical). We can be absolutely sure that no signal or physics background contaminates these samples because there is no such thing as a \\(B^{++}\\) (again, charge not conserved). Therefore, these combinations can be used to study and model these random combinations of tracks that pass our selection. A caveat to remember is that the wrong-sign combinations are not guaranteed to look exactly like the background in the right-sign we are trying to understand. This is where the candidates with mass greater than \\(m_B\\) come in handy. Here we know neither the right-sign nor the wrong-sign has any physics candidates in them, and we can see how the two differ. An example from muonic \\(R(D^{(*)})\\) In b2D0MuXFakeB2DMuNuForTauMuLine , the decay \\(B^- \\to D^0 \\mu^-\\) is defined by: DecayDescriptors = [ '[B- -> D0 mu-]cc' , '[B+ -> D0 mu+]cc' ] Note the latter decay is actually wrong-sign; the right-sign should be a D~0 ( \\(\\bar{D^0}\\) ), instead of a D0 ( \\(D^0\\) ). Therefore, if in our reconstruction, we define the decay to be: DecayDescriptor = '[B- -> D0 mu-]cc' Then NOT ALL events passing stripping cuts contain a \\(B^-\\) candidate, because we are only reconstructing right-sign candidates with the decay descriptor above. Indeed, if we inspect the DaVinci log with the two decay descriptors: \\(B^-\\) with both signs: SELECT:/Event/Semileptonic/Phys/b2D0MuXFakeB| 2.232 | 2.417 | 0.685 10.7 0.86 | 1868 | 4.517 | SelMyStrippedMuFilteredEvent | 16.129 | 17.152 | 2.212 2950.3 68.08 | 1868 | 32.042 | SelMyStrippedChargedK | 0.016 | 0.005 | 0.003 0.1 0.00 | 1833 | 0.010 | SelMyStrippedChargedPi | 0.000 | 0.003 | 0.002 0.0 0.00 | 1833 | 0.007 | SelMyD0 | 0.278 | 0.334 | 0.210 44.0 1.02 | 1833 | 0.613 | SelMyStrippedMu | 0.000 | 0.004 | 0.003 0.0 0.00 | 1823 | 0.008 | SelMyB- | 0.197 | 0.178 | 0.116 0.7 0.05 | 1823 | 0.325 | SelMyComboD0 | 0.005 | 0.004 | 0.003 0.0 0.00 | 1812 | 0.008 | \\(B^-\\) with right-sign only: SELECT:/Event/Semileptonic/Phys/b2D0MuXFakeB| 1.761 | 1.887 | 0.618 6.2 0.65 | 1868 | 3.526 | SelMyStrippedMuFilteredEvent | 13.238 | 13.371 | 1.952 1455.4 33.61 | 1868 | 24.978 | SelMyStrippedChargedK | 0.000 | 0.004 | 0.002 0.2 0.00 | 1833 | 0.007 | SelMyStrippedChargedPi | 0.000 | 0.003 | 0.002 0.0 0.00 | 1833 | 0.006 | SelMyD0 | 0.278 | 0.257 | 0.187 33.3 0.77 | 1833 | 0.473 | SelMyStrippedMu | 0.000 | 0.003 | 0.002 0.0 0.00 | 1823 | 0.006 | SelMyB- | 0.093 | 0.121 | 0.087 0.5 0.03 | 1823 | 0.221 | SelMyComboD0 | 0.000 | 0.003 | 0.002 0.0 0.00 | 1197 | 0.004 | With both signs, \\(B^-\\) selection only kills 11 events (1823 -> 1812). With right-sign only, the same selection (with a different decay descriptor, of course) kills 626 events (1823 -> 1197).","title":"Wrong-sign particles"},{"location":"software_manuals/bender/","text":"bender is a tool to interactively explore .dst files. Find all trigger lines and hit ratios in a .dst file There is a simple one-liner to find these info: lb-run Bender/latest trg-check -n -1 -d 2012 --teslocation /Event/Semileptonic/Phys/b2D0MuXB2DMuNuForTauMuLine/Particles <path_to_dst> Note -n -1 is number of events to run over; -1 means all. Default is 1000 . -d 2012 specify the data type (year). Dump TES info from a .dst file lb-run Bender/latest dst-dump -d 2016 -f -n 100 <path_to_dst> Note -f means that try to unpack all TES locations.","title":"bender"},{"location":"software_manuals/bender/#find-all-trigger-lines-and-hit-ratios-in-a-dst-file","text":"There is a simple one-liner to find these info: lb-run Bender/latest trg-check -n -1 -d 2012 --teslocation /Event/Semileptonic/Phys/b2D0MuXB2DMuNuForTauMuLine/Particles <path_to_dst> Note -n -1 is number of events to run over; -1 means all. Default is 1000 . -d 2012 specify the data type (year).","title":"Find all trigger lines and hit ratios in a .dst file"},{"location":"software_manuals/bender/#dump-tes-info-from-a-dst-file","text":"lb-run Bender/latest dst-dump -d 2016 -f -n 100 <path_to_dst> Note -f means that try to unpack all TES locations.","title":"Dump TES info from a .dst file"},{"location":"software_manuals/dirac/","text":"DIRAC is a web interface to various LHCb's backends, including: Job monitoring Production monitoring Data bookkeeping Production monitoring Follow these steps to monitor the progress of a production: Open the \"folder\" Applications -> Data Double click on the Production Request In the interface on RHS, input the Request ID(s) then Submit . Productions satisfying with the desired IDs should now show up. Right-click on the production to View more details. Info The View action will provide software versions and base platform used in that production.","title":"DIRAC"},{"location":"software_manuals/dirac/#production-monitoring","text":"Follow these steps to monitor the progress of a production: Open the \"folder\" Applications -> Data Double click on the Production Request In the interface on RHS, input the Request ID(s) then Submit . Productions satisfying with the desired IDs should now show up. Right-click on the production to View more details. Info The View action will provide software versions and base platform used in that production.","title":"Production monitoring"},{"location":"software_manuals/external/","text":"Generic LHCb DeveloperKit Trigger Configuration Key (TCK) This TWiki explains briefly how to use TCKsh to study TCKs. This starter kit page provides some sample usage for TCKsh This page has all TCK info for LHCb. Note This link have .pdf files that list all TCKs for a given period of time. For example, in the 2016 year-end report : All TCKs in this period, such as 0x1138160E , are listed in page 6 . TCK vs. fill number are listed in page 18 . The fill number is related to time, but the relationship is unknown to us 1 . Find particle masses used by the LoKi functors The full mass table for a particular DaVinci version can be looked up with 2 : lb-run DaVinci/<dv_version> dump_particle_properties | tee ParticleTable.txt Alternatively, the latest mass table is available at cern-gitlab \"us\" refers to Yipeng Sun. \u21a9 Suggested by Phoebe Hamilton. \u21a9","title":"External manuals"},{"location":"software_manuals/external/#generic","text":"LHCb DeveloperKit","title":"Generic"},{"location":"software_manuals/external/#trigger-configuration-key-tck","text":"This TWiki explains briefly how to use TCKsh to study TCKs. This starter kit page provides some sample usage for TCKsh This page has all TCK info for LHCb. Note This link have .pdf files that list all TCKs for a given period of time. For example, in the 2016 year-end report : All TCKs in this period, such as 0x1138160E , are listed in page 6 . TCK vs. fill number are listed in page 18 . The fill number is related to time, but the relationship is unknown to us 1 .","title":"Trigger Configuration Key (TCK)"},{"location":"software_manuals/external/#find-particle-masses-used-by-the-loki-functors","text":"The full mass table for a particular DaVinci version can be looked up with 2 : lb-run DaVinci/<dv_version> dump_particle_properties | tee ParticleTable.txt Alternatively, the latest mass table is available at cern-gitlab \"us\" refers to Yipeng Sun. \u21a9 Suggested by Phoebe Hamilton. \u21a9","title":"Find particle masses used by the LoKi functors"},{"location":"software_manuals/git_annex/","text":"It is harder to manage large (100 MB or more) files in git , as checking them in/out would take a much longer time. Also, it is undesirable to expose raw data outside of the collaboration. We use a git addon, git-annex , to manage large files. git-annex stores all tracked files under <project_root>/.git/annex , and link/copy these files to the expected locations. Initialize git-annex repository Before you proceed This needs to be done only once for each repository! We have a private server 1 that hosts git repositories with git-annex capabilities. After cloning the umd-lhcb/lhcb-ntuples-gen repository from github, add our private repository: git remote add julian git@129.2.92.92:lhcb-ntuples-gen Note Please send us a SSH key so that we can give your read/write permission on the git-annex repository. Then we need to initialize the annex component: git annex init --version=7 Warning It is important to use a git-annex repository of v7 or newer! 2 To upgrade your git-annex repository to at least v7 , issue the following command inside your git repository: git annex upgrade Note Dropbox will not synchronize any symbolic links, so if the repository is placed within your Dropbox folder, and you have multiple computers, the symbolic links will be replaced by the actual files on all but the initial computers. Add files If you are adding large files that are unlikely to change in the future, such as .dst data files, use the following command: git annex add <path_to_file> Note You typically don't need this. It is left here for completeness. git add will add files to the git repository, not git-annex repository by default . Configuration is required to add only .root files to git-annex , and the rest to git . This has been done for this repository, in: <project_root>/.gitattributes See this article for more information on configuring .gitattributes . Change the content of annexed files Files added via git annex add are read only. For example: echo change > <path_to_annexed_file> > bash: <annexed_file>: Permission denied To change them, we need to unlock them first: git annex unlock <path_to_annexed_file> Now you can edit the unlocked file as you wish. After editing, use git annex add to keep the changes and lock it again. Note When you commit, git-annex will notice that you are committing an unlocked file, add its new content. A pointer to that content is what gets committed to git ; the actual content will go to git-annex . Warning If you don't need to modify the file after all, or want to discard modifications, use git annex lock . Doing so will result in all modifications discarded. Proceed with care! Files added via git add can be changed just like a regular file. Change the name of annexed files Once a file has been annexed with git annex add , the actual file will be moved automatically by git-annex inside .git folder in your project, and git-annex will create a symbolic link in-place pointing to that file. So, if you just want to rename the annexed file, without changing its content , just view that symbolic link as a regular file added to git . Example Consider the following example: Place a.root in folderA/a.root . Annex the file with: git annex add folderA/a.root Now folderA/a.root will be just a symbolic link, and the actual root file is placed in .git in your project root Suppose you want to rename a.root to b.root . In this case, you can: mv folderA/a.root folderA/b.root git add folderA/a.root folderA/b.root # <-- We are not using annex here!!! git commit -a Synchronize files between local and remote repositories First check that you have committed all changes: git status Make sure NO entry looks like this: changes not staged for commit If there are uncommitted local changes, commit then and write sensible messages. This way, git annex sync won't make unwanted commits! Before you proceed Do git pull origin master to get latest changes from origin first. Now, you can do this: git annex sync Note The command above doesn't download the actual data; rather, it only download the metadata so that git annex knows how to download the actual data. The command above will also make sure your local master is now identical to remote master . That's why it's better to do git pull origin master beforehand to avoid surprises. Error By default, git annex sync will commit all previously uncommitted changes before synchronizing! This can be disabled on a per-repository basis by: git annex config --set annex.autocommit false Other clones will also be configured properly after they do a: git annex sync . If you want to download every single file from the git-annex repo (which is probably a couple of GBs), add the --content flag in the second step and download not only the metadata, but also the data: git annex sync --content julian Download and upload individual files Downloading is simple: git annex get <path_to_files> So is uploading: git annex copy --to julian <path_to_files> git annex sync Drop local files The following command will remove the local copy of the file only , and will not delete the file from remote 3 : git annex drop <path_to_files> Note git would still think the working directory is clean, i.e. no change has been made. Check annexed file size For a single file this can be done via git annex info . For example: $ git annex info ntuples/pre-0.9.0/Dst-std/Dst--19_09_05--std--data--2012--md.root file: ntuples/pre-0.9.0/Dst-std/Dst--19_09_05--std--data--2012--md.root size: 1.8 gigabytes key: SHA256E-s1800364650--cb5222668f21032b81ede5f18eb86026e21188c54441917258e8aad4d072f791.root present: false For directories, we have a home-made wrapper script scripts/count_root_files.py . For example: $ ./scripts/count_root_files.py ntuples 2 .root total: 171.30 MiB local: 0.00 KiB ntuples/0.9.1-partial_refit 2 .root total: 171.30 MiB local: 0.00 KiB ntuples/0.9.1-partial_refit/Dst_D0-cutflow_mc 5 .root total: 47.49 GiB local: 0.00 KiB ntuples/ref-rdx-run1 1 .root total: 397.92 MiB local: 0.00 KiB ntuples/ref-rdx-run1/Dst-mc 1 .root total: 29.62 GiB local: 0.00 KiB ntuples/ref-rdx-run1/D0-mix 1 .root total: 1.70 GiB local: 0.00 KiB ntuples/ref-rdx-run1/Dst-std 1 .root total: 1.60 GiB local: 0.00 KiB ntuples/ref-rdx-run1/D0-std 1 .root total: 14.18 GiB local: 0.00 KiB ntuples/ref-rdx-run1/Dst-mix 2 .root total: 0.98 GiB local: 0.00 KiB ntuples/0.9.0-cutflow 2 .root total: 0.98 GiB local: 0.00 KiB ntuples/0.9.0-cutflow/Dst-cutflow_mc 7 .root total: 37.90 GiB local: 0.00 KiB ntuples/pre-0.9.0 2 .root total: 46.24 MiB local: 0.00 KiB ntuples/pre-0.9.0/Dst-cutflow_mc 2 .root total: 17.50 GiB local: 0.00 KiB ntuples/pre-0.9.0/Dst-cutflow_data 1 .root total: 179.56 MiB local: 0.00 KiB ntuples/pre-0.9.0/Dst-mc 2 .root total: 20.19 GiB local: 0.00 KiB ntuples/pre-0.9.0/Dst-std Info If you are in the nix shell, count_root_files.py is added to PATH so you can call it directly. Check annexed file availability We can use git annex list for this. For example: $ git annex list ntuples/0.9.0-cutflow here |Julian ||origin |||web ||||bittorrent ||||| _X___ ntuples/0.9.0-cutflow/Dst-cutflow_mc/Dst--20_06_05--cutflow_mc--bare--MC_2011_Beam3500GeV-2011-MagDown-Nu2-Pythia8_Sim08h_Digi13_Trig0x40760037_Reco14c_Stripping20r1NoPrescalingFlagged_11874091_ALLSTREAMS.DST.root _X___ ntuples/0.9.0-cutflow/Dst-cutflow_mc/Dst--20_06_05--cutflow_mc--bare--MC_2016_Beam6500GeV-2016-MagDown-Nu1.6-25ns-Pythia8_Sim09b_Trig0x6138160F_Reco16_Turbo03_Stripping26NoPrescalingFlagged_11874091_ALLSTREAMS.DST.root As of now, the server is sitting on Yipeng's desktop. It is named Julian , after Julian Schwinger . \u21a9 Please read this for the rationale. \u21a9 Deleting files from remote is dangerous! As the remote might be the last copy of the file so we may lose the file permanently. Still, if you insist, please refer to the official guide . \u21a9","title":"git-annex"},{"location":"software_manuals/git_annex/#initialize-git-annex-repository","text":"Before you proceed This needs to be done only once for each repository! We have a private server 1 that hosts git repositories with git-annex capabilities. After cloning the umd-lhcb/lhcb-ntuples-gen repository from github, add our private repository: git remote add julian git@129.2.92.92:lhcb-ntuples-gen Note Please send us a SSH key so that we can give your read/write permission on the git-annex repository. Then we need to initialize the annex component: git annex init --version=7 Warning It is important to use a git-annex repository of v7 or newer! 2 To upgrade your git-annex repository to at least v7 , issue the following command inside your git repository: git annex upgrade Note Dropbox will not synchronize any symbolic links, so if the repository is placed within your Dropbox folder, and you have multiple computers, the symbolic links will be replaced by the actual files on all but the initial computers.","title":"Initialize git-annex repository"},{"location":"software_manuals/git_annex/#add-files","text":"If you are adding large files that are unlikely to change in the future, such as .dst data files, use the following command: git annex add <path_to_file> Note You typically don't need this. It is left here for completeness. git add will add files to the git repository, not git-annex repository by default . Configuration is required to add only .root files to git-annex , and the rest to git . This has been done for this repository, in: <project_root>/.gitattributes See this article for more information on configuring .gitattributes .","title":"Add files"},{"location":"software_manuals/git_annex/#change-the-content-of-annexed-files","text":"Files added via git annex add are read only. For example: echo change > <path_to_annexed_file> > bash: <annexed_file>: Permission denied To change them, we need to unlock them first: git annex unlock <path_to_annexed_file> Now you can edit the unlocked file as you wish. After editing, use git annex add to keep the changes and lock it again. Note When you commit, git-annex will notice that you are committing an unlocked file, add its new content. A pointer to that content is what gets committed to git ; the actual content will go to git-annex . Warning If you don't need to modify the file after all, or want to discard modifications, use git annex lock . Doing so will result in all modifications discarded. Proceed with care! Files added via git add can be changed just like a regular file.","title":"Change the content of annexed files"},{"location":"software_manuals/git_annex/#change-the-name-of-annexed-files","text":"Once a file has been annexed with git annex add , the actual file will be moved automatically by git-annex inside .git folder in your project, and git-annex will create a symbolic link in-place pointing to that file. So, if you just want to rename the annexed file, without changing its content , just view that symbolic link as a regular file added to git . Example Consider the following example: Place a.root in folderA/a.root . Annex the file with: git annex add folderA/a.root Now folderA/a.root will be just a symbolic link, and the actual root file is placed in .git in your project root Suppose you want to rename a.root to b.root . In this case, you can: mv folderA/a.root folderA/b.root git add folderA/a.root folderA/b.root # <-- We are not using annex here!!! git commit -a","title":"Change the name of annexed files"},{"location":"software_manuals/git_annex/#synchronize-files-between-local-and-remote-repositories","text":"First check that you have committed all changes: git status Make sure NO entry looks like this: changes not staged for commit If there are uncommitted local changes, commit then and write sensible messages. This way, git annex sync won't make unwanted commits! Before you proceed Do git pull origin master to get latest changes from origin first. Now, you can do this: git annex sync Note The command above doesn't download the actual data; rather, it only download the metadata so that git annex knows how to download the actual data. The command above will also make sure your local master is now identical to remote master . That's why it's better to do git pull origin master beforehand to avoid surprises. Error By default, git annex sync will commit all previously uncommitted changes before synchronizing! This can be disabled on a per-repository basis by: git annex config --set annex.autocommit false Other clones will also be configured properly after they do a: git annex sync . If you want to download every single file from the git-annex repo (which is probably a couple of GBs), add the --content flag in the second step and download not only the metadata, but also the data: git annex sync --content julian","title":"Synchronize files between local and remote repositories"},{"location":"software_manuals/git_annex/#download-and-upload-individual-files","text":"Downloading is simple: git annex get <path_to_files> So is uploading: git annex copy --to julian <path_to_files> git annex sync","title":"Download and upload individual files"},{"location":"software_manuals/git_annex/#drop-local-files","text":"The following command will remove the local copy of the file only , and will not delete the file from remote 3 : git annex drop <path_to_files> Note git would still think the working directory is clean, i.e. no change has been made.","title":"Drop local files"},{"location":"software_manuals/git_annex/#check-annexed-file-size","text":"For a single file this can be done via git annex info . For example: $ git annex info ntuples/pre-0.9.0/Dst-std/Dst--19_09_05--std--data--2012--md.root file: ntuples/pre-0.9.0/Dst-std/Dst--19_09_05--std--data--2012--md.root size: 1.8 gigabytes key: SHA256E-s1800364650--cb5222668f21032b81ede5f18eb86026e21188c54441917258e8aad4d072f791.root present: false For directories, we have a home-made wrapper script scripts/count_root_files.py . For example: $ ./scripts/count_root_files.py ntuples 2 .root total: 171.30 MiB local: 0.00 KiB ntuples/0.9.1-partial_refit 2 .root total: 171.30 MiB local: 0.00 KiB ntuples/0.9.1-partial_refit/Dst_D0-cutflow_mc 5 .root total: 47.49 GiB local: 0.00 KiB ntuples/ref-rdx-run1 1 .root total: 397.92 MiB local: 0.00 KiB ntuples/ref-rdx-run1/Dst-mc 1 .root total: 29.62 GiB local: 0.00 KiB ntuples/ref-rdx-run1/D0-mix 1 .root total: 1.70 GiB local: 0.00 KiB ntuples/ref-rdx-run1/Dst-std 1 .root total: 1.60 GiB local: 0.00 KiB ntuples/ref-rdx-run1/D0-std 1 .root total: 14.18 GiB local: 0.00 KiB ntuples/ref-rdx-run1/Dst-mix 2 .root total: 0.98 GiB local: 0.00 KiB ntuples/0.9.0-cutflow 2 .root total: 0.98 GiB local: 0.00 KiB ntuples/0.9.0-cutflow/Dst-cutflow_mc 7 .root total: 37.90 GiB local: 0.00 KiB ntuples/pre-0.9.0 2 .root total: 46.24 MiB local: 0.00 KiB ntuples/pre-0.9.0/Dst-cutflow_mc 2 .root total: 17.50 GiB local: 0.00 KiB ntuples/pre-0.9.0/Dst-cutflow_data 1 .root total: 179.56 MiB local: 0.00 KiB ntuples/pre-0.9.0/Dst-mc 2 .root total: 20.19 GiB local: 0.00 KiB ntuples/pre-0.9.0/Dst-std Info If you are in the nix shell, count_root_files.py is added to PATH so you can call it directly.","title":"Check annexed file size"},{"location":"software_manuals/git_annex/#check-annexed-file-availability","text":"We can use git annex list for this. For example: $ git annex list ntuples/0.9.0-cutflow here |Julian ||origin |||web ||||bittorrent ||||| _X___ ntuples/0.9.0-cutflow/Dst-cutflow_mc/Dst--20_06_05--cutflow_mc--bare--MC_2011_Beam3500GeV-2011-MagDown-Nu2-Pythia8_Sim08h_Digi13_Trig0x40760037_Reco14c_Stripping20r1NoPrescalingFlagged_11874091_ALLSTREAMS.DST.root _X___ ntuples/0.9.0-cutflow/Dst-cutflow_mc/Dst--20_06_05--cutflow_mc--bare--MC_2016_Beam6500GeV-2016-MagDown-Nu1.6-25ns-Pythia8_Sim09b_Trig0x6138160F_Reco16_Turbo03_Stripping26NoPrescalingFlagged_11874091_ALLSTREAMS.DST.root As of now, the server is sitting on Yipeng's desktop. It is named Julian , after Julian Schwinger . \u21a9 Please read this for the rationale. \u21a9 Deleting files from remote is dangerous! As the remote might be the last copy of the file so we may lose the file permanently. Still, if you insist, please refer to the official guide . \u21a9","title":"Check annexed file availability"},{"location":"software_manuals/lxplus/","text":"Folder permission on lxplus This is needed to grant collogues access to certain files stored on lxplus . AFS AFS (mostly) ignores UNIX permissions 1 . Instead, use fs setacl to control access right: fs setacl <path_to_folder_on_afs> system:anyuser read To check current access permissions of a folder: fs listacl <path_to_folder_on_afs> Warning Only new subdirectories inherit the parent directory's permissions. For more info, consult this link 1 . EOS It is unclear on how to share files stored in EOS as naive chmod won't work and sharing via web interface won't work. VNC to lxplus First, run the VNC server on a lxplus node: vncserver :8 -localhost -name Lxplus-Session -geometry 1024x768 If it is your first time running vncserver , it may prompt you to set a remote-access password. Unfortunately, the default ~/.vnc/xstartup doesn't work out of box. You can confirm that by trying to kill the newly-launched server: vncserver -kill :8 and you may get something like this: Can't find file /afs/cern.ch/user/s/suny/.vnc/lxplus732.cern.ch:8.pid You'll have to kill the Xvnc process manually Now, we need to configure a working desktop for VNC. Clear your ~/.vnc/xstartup and copy the following lines 1 to that file: #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS icewm & Re-launch the vncserver on lxplus with the same command. If the port :8 is taken by someone else, use a different port. Remember the lxplus hostname (denote as lxplus_host ) and port number (denote as port ). Now we need to map the VNC port to a localhost port, likely due to firewall issues: ssh -L <port>:localhost:<port> <user>@<lxplus_host>.cern.ch Note Here port must be in full number. e.g. :8 -> 5908 . Finally, we can access our remote lxplus desktop with: vncviewer <port> Courtesy of Will. \u21a9 \u21a9 \u21a9","title":"Tips for lxplus"},{"location":"software_manuals/lxplus/#folder-permission-on-lxplus","text":"This is needed to grant collogues access to certain files stored on lxplus .","title":"Folder permission on lxplus"},{"location":"software_manuals/lxplus/#afs","text":"AFS (mostly) ignores UNIX permissions 1 . Instead, use fs setacl to control access right: fs setacl <path_to_folder_on_afs> system:anyuser read To check current access permissions of a folder: fs listacl <path_to_folder_on_afs> Warning Only new subdirectories inherit the parent directory's permissions. For more info, consult this link 1 .","title":"AFS"},{"location":"software_manuals/lxplus/#eos","text":"It is unclear on how to share files stored in EOS as naive chmod won't work and sharing via web interface won't work.","title":"EOS"},{"location":"software_manuals/lxplus/#vnc-to-lxplus","text":"First, run the VNC server on a lxplus node: vncserver :8 -localhost -name Lxplus-Session -geometry 1024x768 If it is your first time running vncserver , it may prompt you to set a remote-access password. Unfortunately, the default ~/.vnc/xstartup doesn't work out of box. You can confirm that by trying to kill the newly-launched server: vncserver -kill :8 and you may get something like this: Can't find file /afs/cern.ch/user/s/suny/.vnc/lxplus732.cern.ch:8.pid You'll have to kill the Xvnc process manually Now, we need to configure a working desktop for VNC. Clear your ~/.vnc/xstartup and copy the following lines 1 to that file: #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS icewm & Re-launch the vncserver on lxplus with the same command. If the port :8 is taken by someone else, use a different port. Remember the lxplus hostname (denote as lxplus_host ) and port number (denote as port ). Now we need to map the VNC port to a localhost port, likely due to firewall issues: ssh -L <port>:localhost:<port> <user>@<lxplus_host>.cern.ch Note Here port must be in full number. e.g. :8 -> 5908 . Finally, we can access our remote lxplus desktop with: vncviewer <port> Courtesy of Will. \u21a9 \u21a9 \u21a9","title":"VNC to lxplus"},{"location":"software_manuals/root/","text":"Compiling ROOT without nix on macOS For of our repos have a nix flake with ROOT in it, but if you want to have ROOT installed in your mac with the HistFactory pacthes, you can follow the instructions below. If you alread have a ROOT installation, you should delete it first as it often collides with new ones ( rm -rf root_build root_install ). git clone --branch histfactory_patch https://github.com/umd-lhcb/root.git mkdir root_build root_install && cd root_build cmake -DCMAKE_INSTALL_PREFIX=../root_install/ -Dsqlite=OFF -Dmysql=OFF -Dx11=ON -Droofit=ON -Dmt=ON -Dminuit2=ON -Dccache=ON -Dlibcxx=ON -Drpath=ON -DCMAKE_CXX_STANDARD=17 -Droot7=OFF ../root cmake --build . -- install -j6 Note: For -jN , N should be your number of CPU cores (or fewer). Using pyroot in macOS Starting in ROOT 6.22, the compilation is done for both python 2 and 3. Several of our scripts, which require python 3, rely on the python and pip commands, which in macOS are by default bound to python 2. This can be changed installing the python version that you want and adding the appropriate soft links. For instance, brew install python ln -s ../Cellar/python@3.9/3.9.6/bin/python3 /usr/local/bin/python ln -s ../Cellar/python@3.9/3.9.6/bin/pip3 /usr/local/bin/pip","title":"Compiling ROOT"},{"location":"software_manuals/root/#compiling-root-without-nix-on-macos","text":"For of our repos have a nix flake with ROOT in it, but if you want to have ROOT installed in your mac with the HistFactory pacthes, you can follow the instructions below. If you alread have a ROOT installation, you should delete it first as it often collides with new ones ( rm -rf root_build root_install ). git clone --branch histfactory_patch https://github.com/umd-lhcb/root.git mkdir root_build root_install && cd root_build cmake -DCMAKE_INSTALL_PREFIX=../root_install/ -Dsqlite=OFF -Dmysql=OFF -Dx11=ON -Droofit=ON -Dmt=ON -Dminuit2=ON -Dccache=ON -Dlibcxx=ON -Drpath=ON -DCMAKE_CXX_STANDARD=17 -Droot7=OFF ../root cmake --build . -- install -j6 Note: For -jN , N should be your number of CPU cores (or fewer).","title":"Compiling ROOT without nix on macOS"},{"location":"software_manuals/root/#using-pyroot-in-macos","text":"Starting in ROOT 6.22, the compilation is done for both python 2 and 3. Several of our scripts, which require python 3, rely on the python and pip commands, which in macOS are by default bound to python 2. This can be changed installing the python version that you want and adding the appropriate soft links. For instance, brew install python ln -s ../Cellar/python@3.9/3.9.6/bin/python3 /usr/local/bin/python ln -s ../Cellar/python@3.9/3.9.6/bin/pip3 /usr/local/bin/pip","title":"Using pyroot in macOS"},{"location":"software_manuals/davinci/docker_image_usage/","text":"Launch a DaVinci container The shortcut to run a DaVinci docker in this project is: make docker-dv in the project root. The make rule is actually defined as the following: docker run --rm -it -v `pwd`:/data -e UID=$(id -u) -e GID=$(id -g) --net=host umdlhcb/lhcb-stack-cc7:DaVinci-v45r6-SL More generally, if you want to mount another folder, with a path <src_path> : docker run --rm -it -v <src_path>:/data -e UID=$(id -u) -e GID=$(id -g) --net=host umdlhcb/lhcb-stack-cc7:DaVinci-v45r6-SL Info docker images are read-only. When we launch a docker container , a writable layer is placed on top of the image. Use official DaVinci inside container The command is very similar to the one used on lxplus : lb-run DaVinci/latest gaudirun.py <ntuple_options1> <ntuple_options2> ... since we have only 1 version of DaVinci inside the container, DaVinci/latest would always work. Use locally compiled DaVinci inside container Since we need additional TupleTool 1 in our reconstruction script, we also provide a locally compiled DaVinci inside the container, provided that you are using a DaVinci image with a -SL suffix. To launch this locally compiled DaVinci : run gaudirun.py <ntuple_options1> <ntuple_options2> ... Note To make our lives easier, a run.sh command is typically created in each stripping lines, such as: run1-rdx/run.sh run2-rdx/run.sh If you see this file, take a look at it to see the availabe commands, and run it inside the docker container: ./run.sh <path_to_cond_file> # inside docker optionally, a debug flag can be supplied so that only the first couple of events will be considered. Remove old docker images To list all local docker images: docker images If you download a newer version of docker image, and want to remove the old ones to save disk space, you can: docker rmi <docker_image_tag> docker image prune here <docker_image_tag> should be something like umdlhcb/lhcb-stack-cc7:DaVinci-v45r6-SL . Such as TupleToolApplyIsolation and TupleToolTauMuDiscVars . \u21a9","title":"Docker image usage"},{"location":"software_manuals/davinci/docker_image_usage/#launch-a-davinci-container","text":"The shortcut to run a DaVinci docker in this project is: make docker-dv in the project root. The make rule is actually defined as the following: docker run --rm -it -v `pwd`:/data -e UID=$(id -u) -e GID=$(id -g) --net=host umdlhcb/lhcb-stack-cc7:DaVinci-v45r6-SL More generally, if you want to mount another folder, with a path <src_path> : docker run --rm -it -v <src_path>:/data -e UID=$(id -u) -e GID=$(id -g) --net=host umdlhcb/lhcb-stack-cc7:DaVinci-v45r6-SL Info docker images are read-only. When we launch a docker container , a writable layer is placed on top of the image.","title":"Launch a DaVinci container"},{"location":"software_manuals/davinci/docker_image_usage/#use-official-davinci-inside-container","text":"The command is very similar to the one used on lxplus : lb-run DaVinci/latest gaudirun.py <ntuple_options1> <ntuple_options2> ... since we have only 1 version of DaVinci inside the container, DaVinci/latest would always work.","title":"Use official DaVinci inside container"},{"location":"software_manuals/davinci/docker_image_usage/#use-locally-compiled-davinci-inside-container","text":"Since we need additional TupleTool 1 in our reconstruction script, we also provide a locally compiled DaVinci inside the container, provided that you are using a DaVinci image with a -SL suffix. To launch this locally compiled DaVinci : run gaudirun.py <ntuple_options1> <ntuple_options2> ... Note To make our lives easier, a run.sh command is typically created in each stripping lines, such as: run1-rdx/run.sh run2-rdx/run.sh If you see this file, take a look at it to see the availabe commands, and run it inside the docker container: ./run.sh <path_to_cond_file> # inside docker optionally, a debug flag can be supplied so that only the first couple of events will be considered.","title":"Use locally compiled DaVinci inside container"},{"location":"software_manuals/davinci/docker_image_usage/#remove-old-docker-images","text":"To list all local docker images: docker images If you download a newer version of docker image, and want to remove the old ones to save disk space, you can: docker rmi <docker_image_tag> docker image prune here <docker_image_tag> should be something like umdlhcb/lhcb-stack-cc7:DaVinci-v45r6-SL . Such as TupleToolApplyIsolation and TupleToolTauMuDiscVars . \u21a9","title":"Remove old docker images"},{"location":"software_manuals/davinci/loki_functors/","text":"TIS functor TIS is a (undocumented) LoKi functor\uff0c and it stands for Trigger Independent Signal . There's another similar term: TOS: Trigger On Signal . Functor usage TIS(<trigger_line_to_look>, <trigger_decision_storage_location>) Note <trigger_decision_storage_location> is a TES location An example from lhcb-ana-2014-052-v2r1 INTREE (( ABSID == 'mu+' ) & ( TIS ( 'L0.*' , 'L0TriggerTisTos' ))) The line above should be interpreted as following: In the decay tree, find a \\(\\mu\\) . We look over all L0.* trigger lines with TES L0TriggerTisTos , and require to have a trigger independent signal: Since we are triggering on \\(\\mu\\) , this requires that the trigger cannot be due to the \\(\\mu\\) . Also note that the whole decay tree is just a \\(\\mu\\) and a \\(D\\) , so it means that we are either TOS on \\(D\\) , TIS in the whole event, or both.","title":"LoKi functors"},{"location":"software_manuals/davinci/loki_functors/#tis-functor","text":"TIS is a (undocumented) LoKi functor\uff0c and it stands for Trigger Independent Signal . There's another similar term: TOS: Trigger On Signal .","title":"TIS functor"},{"location":"software_manuals/davinci/loki_functors/#functor-usage","text":"TIS(<trigger_line_to_look>, <trigger_decision_storage_location>) Note <trigger_decision_storage_location> is a TES location","title":"Functor usage"},{"location":"software_manuals/davinci/loki_functors/#an-example-from-lhcb-ana-2014-052-v2r1","text":"INTREE (( ABSID == 'mu+' ) & ( TIS ( 'L0.*' , 'L0TriggerTisTos' ))) The line above should be interpreted as following: In the decay tree, find a \\(\\mu\\) . We look over all L0.* trigger lines with TES L0TriggerTisTos , and require to have a trigger independent signal: Since we are triggering on \\(\\mu\\) , this requires that the trigger cannot be due to the \\(\\mu\\) . Also note that the whole decay tree is just a \\(\\mu\\) and a \\(D\\) , so it means that we are either TOS on \\(D\\) , TIS in the whole event, or both.","title":"An example from lhcb-ana-2014-052-v2r1"},{"location":"software_manuals/davinci/tips_and_tricks/","text":"Running old DaVinci on the GRID The run 1 \\(R(D^{(*)})\\) analysis used DaVinci/v36r1p2. To run that on lxplus7 nodes: Export the following environmental variables to use old runtime: export CMTCONFIG=x86_64-slc6-gcc48-opt Run old DaVinci with lb-run : lb-run DaVinci/v36r1p2 gaudirun.py About GaudiSequencer GaudiSequencer is an per-event algorithm , such as DecayTreeTuple , in the sense that Gaudi knows that it should run on every event. GaudiSequencer is used to chain related algorithms, and it's default behavior is to only run an algorithm if the preceding algorithm passed (this is done in the c++ class for the algorithm by returning StatusCode::SUCCESS ). This default can be overridden by setting GaudiSequencer.IgnoreFilterPassed to True , which will run all the algorithms regardless of whether the preceding one passed or failed. The list of algorithms to run is defined by the GaudiSequencer.Members list. Difference between MainSequence and UserAlgorithms MainSequence : Use DaVinci().addToMainSequence([<a list of algorithms>]) to customize the initialization of DaVinci . This should be used to provide custom functions/TESs 1 that will be visible to all selection algorithms. UserAlgorithms : Actual selection algorithms. This is always appended at the end of the MainSequence of a DaVinci session. Difference CC and cc in a decay descriptor LoKi and DecayTreeTuple use uppercase CC for charge conjugation. CombineParticles uses lowercase cc . This is just an inconsistency in the DaVinci code base and there's nothing we can do as a user. TES: Transient Event Storage. \u21a9","title":"Tips and tricks"},{"location":"software_manuals/davinci/tips_and_tricks/#running-old-davinci-on-the-grid","text":"The run 1 \\(R(D^{(*)})\\) analysis used DaVinci/v36r1p2. To run that on lxplus7 nodes: Export the following environmental variables to use old runtime: export CMTCONFIG=x86_64-slc6-gcc48-opt Run old DaVinci with lb-run : lb-run DaVinci/v36r1p2 gaudirun.py","title":"Running old DaVinci on the GRID"},{"location":"software_manuals/davinci/tips_and_tricks/#about-gaudisequencer","text":"GaudiSequencer is an per-event algorithm , such as DecayTreeTuple , in the sense that Gaudi knows that it should run on every event. GaudiSequencer is used to chain related algorithms, and it's default behavior is to only run an algorithm if the preceding algorithm passed (this is done in the c++ class for the algorithm by returning StatusCode::SUCCESS ). This default can be overridden by setting GaudiSequencer.IgnoreFilterPassed to True , which will run all the algorithms regardless of whether the preceding one passed or failed. The list of algorithms to run is defined by the GaudiSequencer.Members list.","title":"About GaudiSequencer"},{"location":"software_manuals/davinci/tips_and_tricks/#difference-between-mainsequence-and-useralgorithms","text":"MainSequence : Use DaVinci().addToMainSequence([<a list of algorithms>]) to customize the initialization of DaVinci . This should be used to provide custom functions/TESs 1 that will be visible to all selection algorithms. UserAlgorithms : Actual selection algorithms. This is always appended at the end of the MainSequence of a DaVinci session.","title":"Difference between MainSequence and UserAlgorithms"},{"location":"software_manuals/davinci/tips_and_tricks/#difference-cc-and-cc-in-a-decay-descriptor","text":"LoKi and DecayTreeTuple use uppercase CC for charge conjugation. CombineParticles uses lowercase cc . This is just an inconsistency in the DaVinci code base and there's nothing we can do as a user. TES: Transient Event Storage. \u21a9","title":"Difference CC and cc in a decay descriptor"},{"location":"software_manuals/davinci/tuple_tools/","text":"Configure default TupleTools There are 5 TupleTools that are added by default: TupleToolKinematic TupleToolPid TupleToolANNPID TupleToolGeometry TupleToolEventInfo To configure, for example, TupleToolPid , remove it from the TupleTool list first, then re-add it. This new instance can now be configured normally: tp . ToolList . remove ( 'TupleToolPid' ) tt_pid = tp . addTupleTool ( 'TupleToolPid' ) tt_pid . Verbose = True Note If we don't remove the TupleTool first, neither addTupleTool nor addTool can make it configurable. TupleToolApplyIsolation TupleToolApplyIsolation is used to find isolation variables for semileptonic decays. This allows us to identify actual \\(B\\) meson decay vertices more readily. _ISOLATION_Type Among the many variables produced by this tool, these four are about track type of each track: _ISOLATION_Type _ISOLATION_Type2 _ISOLATION_Type3 _ISOLATION_Type4 Note These four tracks are the ones with the best BDT scores. For each of these variables, it admits 3 possible values of type float : 1.0 : VELO only, with no other compatible segments found 3.0 : Forward tracks, which are VELO+(TT)+downstream segment (TT hits optional) 4.0 : Upstream tracks, VELO+TT Note The type 1.0 tracks can be turned off by commenting out the following lines in reco_Dst.py : # Provide required information for VELO pions. ms_all_protos = ChargedProtoParticleMaker ( name = 'MyProtoPMaker' ) ms_all_protos . Inputs = [ 'Rec/Track/Best' ] ms_all_protos . Output = 'Rec/ProtoP/MyProtoPMaker/ProtoParticles' # This TES location will be accessible for all selection algorithms # VELO pions for Greg's isolation tool. # NOTE: The name 'StdNoPIDsVeloPions' is hard-coded in the tuple tool, so the # name should not be changed. ms_velo_pions = NoPIDsParticleMaker ( 'StdNoPIDsVeloPions' , Particle = 'pion' ) ms_velo_pions . Input = ms_all_protos . Output # NOTE: These two lines are needed to select particles in VELO only. # NOTE: DARK MAGIC. trackSelector ( ms_velo_pions , trackTypes = [ 'Velo' ]) updateDoD ( ms_velo_pions ) DaVinci () . appendToMainSequence ([ ms_all_protos , ms_velo_pions ]) TupleToolSLTruth The truth-matching is done with a getMCParticle class method, which is defined as following: const LHCb :: MCParticle * TupleToolSLTruth::getMCParticle ( const LHCb :: Particle * P ) { const LHCb :: MCParticle * mcp ( NULL ); if ( P ) { // assignedPid = P->particleID().pid(); if ( msgLevel ( MSG :: VERBOSE ) ) verbose () << \"Getting related MCP to \" << P << endmsg ; for ( std :: vector < IParticle2MCAssociator *>:: const_iterator iMCAss = m_p2mcAssocs . begin (); iMCAss != m_p2mcAssocs . end (); ++ iMCAss ) { mcp = ( * iMCAss ) -> relatedMCP ( P ); if ( mcp ) break ; } if ( msgLevel ( MSG :: VERBOSE ) ) verbose () << \"Got mcp \" << mcp << endmsg ; } return mcp ; } Here it is trying to use the following MC associators in order: DaVinciSmartAssociator MCMatchObjP2MCRelator And if one of them return a non-empty match, it will return that match right away. Info These accociators are derived classes of Particle2MCAssociatorBase , which is defined in the Phys project in the Phys/DaVinciMCKernel/Kernel/Particle2MCAssociatorBase.h file. Info For more info on MC truth-matching, take a look at this article .","title":"TupleTools"},{"location":"software_manuals/davinci/tuple_tools/#configure-default-tupletools","text":"There are 5 TupleTools that are added by default: TupleToolKinematic TupleToolPid TupleToolANNPID TupleToolGeometry TupleToolEventInfo To configure, for example, TupleToolPid , remove it from the TupleTool list first, then re-add it. This new instance can now be configured normally: tp . ToolList . remove ( 'TupleToolPid' ) tt_pid = tp . addTupleTool ( 'TupleToolPid' ) tt_pid . Verbose = True Note If we don't remove the TupleTool first, neither addTupleTool nor addTool can make it configurable.","title":"Configure default TupleTools"},{"location":"software_manuals/davinci/tuple_tools/#tupletoolapplyisolation","text":"TupleToolApplyIsolation is used to find isolation variables for semileptonic decays. This allows us to identify actual \\(B\\) meson decay vertices more readily.","title":"TupleToolApplyIsolation"},{"location":"software_manuals/davinci/tuple_tools/#_isolation_type","text":"Among the many variables produced by this tool, these four are about track type of each track: _ISOLATION_Type _ISOLATION_Type2 _ISOLATION_Type3 _ISOLATION_Type4 Note These four tracks are the ones with the best BDT scores. For each of these variables, it admits 3 possible values of type float : 1.0 : VELO only, with no other compatible segments found 3.0 : Forward tracks, which are VELO+(TT)+downstream segment (TT hits optional) 4.0 : Upstream tracks, VELO+TT Note The type 1.0 tracks can be turned off by commenting out the following lines in reco_Dst.py : # Provide required information for VELO pions. ms_all_protos = ChargedProtoParticleMaker ( name = 'MyProtoPMaker' ) ms_all_protos . Inputs = [ 'Rec/Track/Best' ] ms_all_protos . Output = 'Rec/ProtoP/MyProtoPMaker/ProtoParticles' # This TES location will be accessible for all selection algorithms # VELO pions for Greg's isolation tool. # NOTE: The name 'StdNoPIDsVeloPions' is hard-coded in the tuple tool, so the # name should not be changed. ms_velo_pions = NoPIDsParticleMaker ( 'StdNoPIDsVeloPions' , Particle = 'pion' ) ms_velo_pions . Input = ms_all_protos . Output # NOTE: These two lines are needed to select particles in VELO only. # NOTE: DARK MAGIC. trackSelector ( ms_velo_pions , trackTypes = [ 'Velo' ]) updateDoD ( ms_velo_pions ) DaVinci () . appendToMainSequence ([ ms_all_protos , ms_velo_pions ])","title":"_ISOLATION_Type"},{"location":"software_manuals/davinci/tuple_tools/#tupletoolsltruth","text":"The truth-matching is done with a getMCParticle class method, which is defined as following: const LHCb :: MCParticle * TupleToolSLTruth::getMCParticle ( const LHCb :: Particle * P ) { const LHCb :: MCParticle * mcp ( NULL ); if ( P ) { // assignedPid = P->particleID().pid(); if ( msgLevel ( MSG :: VERBOSE ) ) verbose () << \"Getting related MCP to \" << P << endmsg ; for ( std :: vector < IParticle2MCAssociator *>:: const_iterator iMCAss = m_p2mcAssocs . begin (); iMCAss != m_p2mcAssocs . end (); ++ iMCAss ) { mcp = ( * iMCAss ) -> relatedMCP ( P ); if ( mcp ) break ; } if ( msgLevel ( MSG :: VERBOSE ) ) verbose () << \"Got mcp \" << mcp << endmsg ; } return mcp ; } Here it is trying to use the following MC associators in order: DaVinciSmartAssociator MCMatchObjP2MCRelator And if one of them return a non-empty match, it will return that match right away. Info These accociators are derived classes of Particle2MCAssociatorBase , which is defined in the Phys project in the Phys/DaVinciMCKernel/Kernel/Particle2MCAssociatorBase.h file. Info For more info on MC truth-matching, take a look at this article .","title":"TupleToolSLTruth"},{"location":"software_manuals/nix/nix/","text":"What is nix ? nix is a package manager that aims to avoid the dependency hell that you some times enter with conventional package managers such as rpm or pip . This nix-pills post explains nix advantages in more detail, but basically, it stores each package and its version at /nix/store/hash-name (eg, /nix/store/s4zia7hhqkin1di0f187b79sa2srhv6k-bash-4.2-p45/ ). Everything in this store is immutable, and packages are built against absolute paths whose code never changes. Per nix-pills , What does all this mean? It means that you could run mysql 5.2 with glibc-2.18, and mysql 5.5 with glibc-2.19. You could use your python module with python 2.7 compiled with gcc 4.6 and the same python module with python 3 compiled with gcc 4.8, all in the same system. For our purposes, we configure the dependencies needed in some of our repos with flake.nix files such as the one in lhcb-ntuples-gen . You then type nix develop , et voila, you have all the packages you need (after some compilation if it is the first time you do it). ROOT in nix and our documentation Importantly, nix allows us to run various versions of CERN's ROOT simultaneously, which is needed because in some cases, old code like the uBDT classifier relies on ROOT versions too old to be compiled in modern systems. We set up various ROOT versions at root-curated : 5.34/38, 6.16/00, and 6.24/02. These can then be picked up in the various repos, see here an example. Note that various repos may use the same version of ROOT . You will only need to compile it once for all of them. The README in root-curated also provides our basic nix documentation, for instance installation in macOS or linux or automatic nix develop with direnv . nixpkgs nixpkgs is the main registry that contains all official packages provided by Nix/NixOS project ( nix is a package in nixpkgs ). When you install nix , a system-wide version of nixpkgs is specified in the installer (let's call it nixpkgs-ver_sys ). In the root-curated flake, we pin a version of nixpkgs (say, nixpkgs-ver_root_curated ). In general, nixpkgs-ver_sys != nixpkgs-ver_root_curated . This nixpkgs-ver_root_curated is only effective in the root-curated project. It is completely isolated from your system. In lhcb-ntuples-gen flake, we pin a version of root-curated . We also configure this flake in a way such that we use the nixpkgs pinned in the pinned root-curated flake. Denote this nixpkgs as nixpkgs-ver_ntuples_gen Similarly, nixpkgs-ver_ntuples_gen != nixpkgs-ver_root_curated , unless you manually update root-curated pointer in lhcb-ntuples-gen . Another possibility of nixpkgs-ver_ntuples_gen == nixpkgs-ver_root_curated is that we don't update the nixpkgs pointer in root-curated . The diagram below gives a visual example of the nixpkgs version changing, and only being picked up by root-curated with the pinning changes.","title":"nix"},{"location":"software_manuals/nix/nix/#what-is-nix","text":"nix is a package manager that aims to avoid the dependency hell that you some times enter with conventional package managers such as rpm or pip . This nix-pills post explains nix advantages in more detail, but basically, it stores each package and its version at /nix/store/hash-name (eg, /nix/store/s4zia7hhqkin1di0f187b79sa2srhv6k-bash-4.2-p45/ ). Everything in this store is immutable, and packages are built against absolute paths whose code never changes. Per nix-pills , What does all this mean? It means that you could run mysql 5.2 with glibc-2.18, and mysql 5.5 with glibc-2.19. You could use your python module with python 2.7 compiled with gcc 4.6 and the same python module with python 3 compiled with gcc 4.8, all in the same system. For our purposes, we configure the dependencies needed in some of our repos with flake.nix files such as the one in lhcb-ntuples-gen . You then type nix develop , et voila, you have all the packages you need (after some compilation if it is the first time you do it).","title":"What is nix?"},{"location":"software_manuals/nix/nix/#root-in-nix-and-our-documentation","text":"Importantly, nix allows us to run various versions of CERN's ROOT simultaneously, which is needed because in some cases, old code like the uBDT classifier relies on ROOT versions too old to be compiled in modern systems. We set up various ROOT versions at root-curated : 5.34/38, 6.16/00, and 6.24/02. These can then be picked up in the various repos, see here an example. Note that various repos may use the same version of ROOT . You will only need to compile it once for all of them. The README in root-curated also provides our basic nix documentation, for instance installation in macOS or linux or automatic nix develop with direnv .","title":"ROOT in nix and our documentation"},{"location":"software_manuals/nix/nix/#nixpkgs","text":"nixpkgs is the main registry that contains all official packages provided by Nix/NixOS project ( nix is a package in nixpkgs ). When you install nix , a system-wide version of nixpkgs is specified in the installer (let's call it nixpkgs-ver_sys ). In the root-curated flake, we pin a version of nixpkgs (say, nixpkgs-ver_root_curated ). In general, nixpkgs-ver_sys != nixpkgs-ver_root_curated . This nixpkgs-ver_root_curated is only effective in the root-curated project. It is completely isolated from your system. In lhcb-ntuples-gen flake, we pin a version of root-curated . We also configure this flake in a way such that we use the nixpkgs pinned in the pinned root-curated flake. Denote this nixpkgs as nixpkgs-ver_ntuples_gen Similarly, nixpkgs-ver_ntuples_gen != nixpkgs-ver_root_curated , unless you manually update root-curated pointer in lhcb-ntuples-gen . Another possibility of nixpkgs-ver_ntuples_gen == nixpkgs-ver_root_curated is that we don't update the nixpkgs pointer in root-curated . The diagram below gives a visual example of the nixpkgs version changing, and only being picked up by root-curated with the pinning changes.","title":"nixpkgs"},{"location":"technical_concepts/truth_matching/","text":"Truth-Matching In LHCb, the general procedure works as follows: In the MC generation, after Gauss and Boole , Brunel is used to reconstruct events. During this reconstruction, truth-matching maps for ProtoParticle - MCParticle are also created. This only applies to stable particles in the detector. An example on truth-matching in Brunel is provided in this TWiki . Info An example of these TES locations for TurboDst can be found at this TWiki . Reconstructed events and truth-matching maps are stored in the dst files. When reconstructing events in DaVinci , the truth-matching maps are loaded from the dst file and used to truth-match stable particles. For composite particles: Each reconstructed final state daughter of the composite Particle has an associated MCParticle , and all these associated MCParticle s have the same final MCParticle mother. LHCb has implemented many truth-matching strategies. Info Take a look at the Particle2MC TWiki for an overview on these strategies. DaVinciSmartAssociator In this implementation, truth-matching are separated into 3 categories: Neutral particles (both basic and composite) Basic stable charged particles Composite charged particles Warning The code below might be phased out as some of them are not present in master branch of the related projects. Neutral particles The truth-matching is done purely with calorimeter info. It is implemented in Calo2MCTool . The tool returns the MC particle that is best matched to the reconstructed particle. The MC dst will provide several relation tables for truth-matching. See this TWiki . Basic stable charged particles This is done with P2MCPFromProtoP . It finds the ProtoParticle of the reconstructed Particle . Then use the standard truth-matching table to find the linked MCParticle . Truth-Matching for RDX run 2 For the run 2 RDX analysis, when postprocessing our MC ntuples, we perform truth-matching copied from Phoebe's code for the run 1 analysis. Info Her code for truth-matching can be found in: redoHistos_D0.C + AddD0B_tmp.C (for \\(D^0\\) sample) redoHistos_Dst.C + AddB.C (for \\(D^*\\) sample) in this proc folder from her gitlab run 1 analysis (preservation) code repo. We implement the truth-matching differently from her in order to work (more understandably) with our workflow; rather than using flags and filling all histograms (templates) all at the same time based on those flags, we truth-match each decay mode (i.e. the MC ID s listed here ) separately and store the result as a coded integer truthmatch in our postprocessed ntuples. Difference between Phoebe's and our truth-matching Phoebe's implementation: An event can be used to fill any, and even multiple, templates, not just templates corresponding to the decay mode (eg. an event for \\(B^0 \\rightarrow D^* \\mu\\nu\\) MC could pass the truth- matching requirements and thus be filled in for the template corresponding to \\(B^0 \\rightarrow D^* X_c(\\rightarrow \\mu\\nu X')X\\) ), And indeed this is seen to occur for a fraction of a percent of all events. Our truth-matching: Takes in the decay mode that the user wants to truth- match against as an input and will only set truthmatch to a corresponding value for that decay mode. Additionally, our implementation will never fill in multiple templates with the same event. To apply our truth-matching when postprocessing ntuples: Use the header truth_match.h In a postprocessing configuration YAML 1 , add a calculation integer variable (nominally called truthmatch ) that is calculated using: MC_TRUTH_MATCH_DST(...) (for \\(D^*\\) sample) MC_TRUTH_MATCH_D0(...) (for \\(D^0\\) sample) Note The input parameters for these functions can be found at the bottom of the truth-matching script linked above. As already mentioned, one required input is the decay mode ID. Optional debugging flags for truth-matching The truth-matching code has some optional debugging flags that can be set if one: Wants to not separate \\(D^{**}_{(s)}\\) cocktails Want to separate \\(D^{**}H\\) cocktails Doesn't want to separate \\(DD\\) cocktails For now, the \\(DD\\) debug flag is set to true until the code is developed to actually separate those cocktails (and, in fact, Phoebe does not separate the cocktails for her templates). In the encoding scheme below, this means that temporarily truthmatch will have b1b2=0 . Without setting these flags, the coded truthmatch int is nominally set to encode all information that should be relevant for building the run 2 RDX templates. Once this is done, the postprocessed ntuples will contain a truthmatch branch that encodes what type of decay the event was successfully truth-matched to, or truthmatch=0 if the event failed to pass the truth-matching requirements. The encoding scheme for truthmatch works as follows: truthmatch=a1b1b2c1c2d1 where d1 = 0 if normalization(-like) (i.e. without \\(\\tau\\) ) 1 if signal(-like) c1c2 are two digits referring to the \"primary\" \\(D\\) meson. For non- \\(DD\\) decays, this is just the \\(D\\) that the \\(B\\) decays to; for now, for \\(DD\\) decays, c1c2=00 . Otherwise, c1c2= : 01 for \\(D^0\\) , 02 for \\(D^+\\) , 03 for \\(D^{*0}\\) , 04 for \\(D^{*+}\\) 10 for all (light) \\(D^{**0}\\) (i.e. cocktail not separated, but it's required that the specific event \\(D^{**}\\) is possible for the considered decay), 11 for \\(D_0^{*0}\\) , 12 for \\(D_1^0\\) , 13 for \\(D_1'^0\\) , 14 for \\(D_2^{*0}\\) 20 for all (light) \\(D^{**+}\\) , 21 for \\(D_0^{*+}\\) , 22 for \\(D_1^+\\) , 23 for \\(D_1'^+\\) , 24 for \\(D_2^{*+}\\) 30 for all heavy \\(D^{**}H^0\\) (again, it's internally required that the \\(D^{**}H\\) is possible), and (for debugging) 31 for \\(D(2S)^{*+}\\) , 32 for \\(D(2S)^+\\) , 33 for \\(D(2750)^+\\) , 34 for \\(D(3000)^+\\) 40 for all heavy \\(D^{**}H^+\\) , and 41 for \\(D(2S)^{*+}\\) , 42 for \\(D(2S)^+\\) , 43 for \\(D(2750)^+\\) , 44 for \\(D(3000)^+\\) 50 for all strange \\(D^{**}_s\\) (again, internally require specific \\(D^{**}_s\\) to be possible), and 53 for \\(D_{1s}'\\) , 54 for \\(D_{2s}^*\\) (to keep consistent with \\(D^{**}\\) scheme; there aren't any \" \\(D_{0s}^*, D_{1s}\\) \") b1b2 are used to separate DD cocktails, and will nominally be set to nonzero values for every DD decay. For now, this feature is not implemented, so it will always be that b1b2=00 a1 = 0 if not a \\(D^{**}H\\) or \\(DD\\) decay, and \\(D^{**} \\rightarrow D^{(*)}\\pi\\pi\\) decays are cut out if a (light) \\(D^{**}\\) decay 1 if a \\(DD\\) decay from a \\(B^0\\) 2 if a \\(DD\\) decay from a \\(B^+\\) 3 if a \\(D^{**}H\\) decay where \\(D^{**}H \\rightarrow D* \\rightarrow D\\) (useful because Phoebe separates this topology from \\(D^{**}H \\rightarrow D^0\\) directly in her templates for the \\(D^0\\) sample) 4 if a \\(D^{**}H\\) decay where \\(D^{**}H \\rightarrow D\\) 5 if a (light) \\(D^{**}\\) decay explicitly with two pion decays ( \\(D^{**} \\rightarrow D^{(*)}\\pi\\pi\\) ) kept Example \\(B^0 \\rightarrow D^* \\mu\\nu\\) will be encoded as 000041 \\(B^- \\rightarrow D^{*0} \\mu\\nu\\) as 000031 \\(B^0 \\rightarrow D^0 \\tau\\nu\\) as 000011 \\(B^0 \\rightarrow D_1' \\tau\\nu\\) (no \\(2\\pi\\) ) as 000231 \\(B^+ \\rightarrow D_2^*(\\rightarrow D^*\\pi\\pi)\\mu\\nu\\) as 500140 \\(B^0 \\rightarrow D^{**}H(\\rightarrow D\\pi\\pi)\\mu\\nu\\) as 400400 \\(B^+ \\rightarrow D^0X(\\rightarrow \\mu\\nu X')X\\) as 200000 Recall instructions here for postprocessing. \u21a9","title":"Truth matching"},{"location":"technical_concepts/truth_matching/#truth-matching","text":"In LHCb, the general procedure works as follows: In the MC generation, after Gauss and Boole , Brunel is used to reconstruct events. During this reconstruction, truth-matching maps for ProtoParticle - MCParticle are also created. This only applies to stable particles in the detector. An example on truth-matching in Brunel is provided in this TWiki . Info An example of these TES locations for TurboDst can be found at this TWiki . Reconstructed events and truth-matching maps are stored in the dst files. When reconstructing events in DaVinci , the truth-matching maps are loaded from the dst file and used to truth-match stable particles. For composite particles: Each reconstructed final state daughter of the composite Particle has an associated MCParticle , and all these associated MCParticle s have the same final MCParticle mother. LHCb has implemented many truth-matching strategies. Info Take a look at the Particle2MC TWiki for an overview on these strategies.","title":"Truth-Matching"},{"location":"technical_concepts/truth_matching/#davincismartassociator","text":"In this implementation, truth-matching are separated into 3 categories: Neutral particles (both basic and composite) Basic stable charged particles Composite charged particles Warning The code below might be phased out as some of them are not present in master branch of the related projects.","title":"DaVinciSmartAssociator"},{"location":"technical_concepts/truth_matching/#neutral-particles","text":"The truth-matching is done purely with calorimeter info. It is implemented in Calo2MCTool . The tool returns the MC particle that is best matched to the reconstructed particle. The MC dst will provide several relation tables for truth-matching. See this TWiki .","title":"Neutral particles"},{"location":"technical_concepts/truth_matching/#basic-stable-charged-particles","text":"This is done with P2MCPFromProtoP . It finds the ProtoParticle of the reconstructed Particle . Then use the standard truth-matching table to find the linked MCParticle .","title":"Basic stable charged particles"},{"location":"technical_concepts/truth_matching/#truth-matching-for-rdx-run-2","text":"For the run 2 RDX analysis, when postprocessing our MC ntuples, we perform truth-matching copied from Phoebe's code for the run 1 analysis. Info Her code for truth-matching can be found in: redoHistos_D0.C + AddD0B_tmp.C (for \\(D^0\\) sample) redoHistos_Dst.C + AddB.C (for \\(D^*\\) sample) in this proc folder from her gitlab run 1 analysis (preservation) code repo. We implement the truth-matching differently from her in order to work (more understandably) with our workflow; rather than using flags and filling all histograms (templates) all at the same time based on those flags, we truth-match each decay mode (i.e. the MC ID s listed here ) separately and store the result as a coded integer truthmatch in our postprocessed ntuples. Difference between Phoebe's and our truth-matching Phoebe's implementation: An event can be used to fill any, and even multiple, templates, not just templates corresponding to the decay mode (eg. an event for \\(B^0 \\rightarrow D^* \\mu\\nu\\) MC could pass the truth- matching requirements and thus be filled in for the template corresponding to \\(B^0 \\rightarrow D^* X_c(\\rightarrow \\mu\\nu X')X\\) ), And indeed this is seen to occur for a fraction of a percent of all events. Our truth-matching: Takes in the decay mode that the user wants to truth- match against as an input and will only set truthmatch to a corresponding value for that decay mode. Additionally, our implementation will never fill in multiple templates with the same event. To apply our truth-matching when postprocessing ntuples: Use the header truth_match.h In a postprocessing configuration YAML 1 , add a calculation integer variable (nominally called truthmatch ) that is calculated using: MC_TRUTH_MATCH_DST(...) (for \\(D^*\\) sample) MC_TRUTH_MATCH_D0(...) (for \\(D^0\\) sample) Note The input parameters for these functions can be found at the bottom of the truth-matching script linked above. As already mentioned, one required input is the decay mode ID. Optional debugging flags for truth-matching The truth-matching code has some optional debugging flags that can be set if one: Wants to not separate \\(D^{**}_{(s)}\\) cocktails Want to separate \\(D^{**}H\\) cocktails Doesn't want to separate \\(DD\\) cocktails For now, the \\(DD\\) debug flag is set to true until the code is developed to actually separate those cocktails (and, in fact, Phoebe does not separate the cocktails for her templates). In the encoding scheme below, this means that temporarily truthmatch will have b1b2=0 . Without setting these flags, the coded truthmatch int is nominally set to encode all information that should be relevant for building the run 2 RDX templates. Once this is done, the postprocessed ntuples will contain a truthmatch branch that encodes what type of decay the event was successfully truth-matched to, or truthmatch=0 if the event failed to pass the truth-matching requirements. The encoding scheme for truthmatch works as follows: truthmatch=a1b1b2c1c2d1 where d1 = 0 if normalization(-like) (i.e. without \\(\\tau\\) ) 1 if signal(-like) c1c2 are two digits referring to the \"primary\" \\(D\\) meson. For non- \\(DD\\) decays, this is just the \\(D\\) that the \\(B\\) decays to; for now, for \\(DD\\) decays, c1c2=00 . Otherwise, c1c2= : 01 for \\(D^0\\) , 02 for \\(D^+\\) , 03 for \\(D^{*0}\\) , 04 for \\(D^{*+}\\) 10 for all (light) \\(D^{**0}\\) (i.e. cocktail not separated, but it's required that the specific event \\(D^{**}\\) is possible for the considered decay), 11 for \\(D_0^{*0}\\) , 12 for \\(D_1^0\\) , 13 for \\(D_1'^0\\) , 14 for \\(D_2^{*0}\\) 20 for all (light) \\(D^{**+}\\) , 21 for \\(D_0^{*+}\\) , 22 for \\(D_1^+\\) , 23 for \\(D_1'^+\\) , 24 for \\(D_2^{*+}\\) 30 for all heavy \\(D^{**}H^0\\) (again, it's internally required that the \\(D^{**}H\\) is possible), and (for debugging) 31 for \\(D(2S)^{*+}\\) , 32 for \\(D(2S)^+\\) , 33 for \\(D(2750)^+\\) , 34 for \\(D(3000)^+\\) 40 for all heavy \\(D^{**}H^+\\) , and 41 for \\(D(2S)^{*+}\\) , 42 for \\(D(2S)^+\\) , 43 for \\(D(2750)^+\\) , 44 for \\(D(3000)^+\\) 50 for all strange \\(D^{**}_s\\) (again, internally require specific \\(D^{**}_s\\) to be possible), and 53 for \\(D_{1s}'\\) , 54 for \\(D_{2s}^*\\) (to keep consistent with \\(D^{**}\\) scheme; there aren't any \" \\(D_{0s}^*, D_{1s}\\) \") b1b2 are used to separate DD cocktails, and will nominally be set to nonzero values for every DD decay. For now, this feature is not implemented, so it will always be that b1b2=00 a1 = 0 if not a \\(D^{**}H\\) or \\(DD\\) decay, and \\(D^{**} \\rightarrow D^{(*)}\\pi\\pi\\) decays are cut out if a (light) \\(D^{**}\\) decay 1 if a \\(DD\\) decay from a \\(B^0\\) 2 if a \\(DD\\) decay from a \\(B^+\\) 3 if a \\(D^{**}H\\) decay where \\(D^{**}H \\rightarrow D* \\rightarrow D\\) (useful because Phoebe separates this topology from \\(D^{**}H \\rightarrow D^0\\) directly in her templates for the \\(D^0\\) sample) 4 if a \\(D^{**}H\\) decay where \\(D^{**}H \\rightarrow D\\) 5 if a (light) \\(D^{**}\\) decay explicitly with two pion decays ( \\(D^{**} \\rightarrow D^{(*)}\\pi\\pi\\) ) kept Example \\(B^0 \\rightarrow D^* \\mu\\nu\\) will be encoded as 000041 \\(B^- \\rightarrow D^{*0} \\mu\\nu\\) as 000031 \\(B^0 \\rightarrow D^0 \\tau\\nu\\) as 000011 \\(B^0 \\rightarrow D_1' \\tau\\nu\\) (no \\(2\\pi\\) ) as 000231 \\(B^+ \\rightarrow D_2^*(\\rightarrow D^*\\pi\\pi)\\mu\\nu\\) as 500140 \\(B^0 \\rightarrow D^{**}H(\\rightarrow D\\pi\\pi)\\mu\\nu\\) as 400400 \\(B^+ \\rightarrow D^0X(\\rightarrow \\mu\\nu X')X\\) as 200000 Recall instructions here for postprocessing. \u21a9","title":"Truth-Matching for RDX run 2"}]}